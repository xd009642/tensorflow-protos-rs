// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow/tools/api/lib/api_objects.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct TFAPIMember {
    // message fields
    name: ::protobuf::SingularField<::std::string::String>,
    mtype: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TFAPIMember {
    fn default() -> &'a TFAPIMember {
        <TFAPIMember as ::protobuf::Message>::default_instance()
    }
}

impl TFAPIMember {
    pub fn new() -> TFAPIMember {
        ::std::default::Default::default()
    }

    // optional string name = 1;


    pub fn get_name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string mtype = 2;


    pub fn get_mtype(&self) -> &str {
        match self.mtype.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_mtype(&mut self) {
        self.mtype.clear();
    }

    pub fn has_mtype(&self) -> bool {
        self.mtype.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mtype(&mut self, v: ::std::string::String) {
        self.mtype = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mtype(&mut self) -> &mut ::std::string::String {
        if self.mtype.is_none() {
            self.mtype.set_default();
        }
        self.mtype.as_mut().unwrap()
    }

    // Take field
    pub fn take_mtype(&mut self) -> ::std::string::String {
        self.mtype.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for TFAPIMember {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.mtype)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.mtype.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.name.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.mtype.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TFAPIMember {
        TFAPIMember::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &TFAPIMember| { &m.name },
                |m: &mut TFAPIMember| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "mtype",
                |m: &TFAPIMember| { &m.mtype },
                |m: &mut TFAPIMember| { &mut m.mtype },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TFAPIMember>(
                "TFAPIMember",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TFAPIMember {
        static instance: ::protobuf::rt::LazyV2<TFAPIMember> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TFAPIMember::new)
    }
}

impl ::protobuf::Clear for TFAPIMember {
    fn clear(&mut self) {
        self.name.clear();
        self.mtype.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TFAPIMember {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TFAPIMember {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TFAPIMethod {
    // message fields
    name: ::protobuf::SingularField<::std::string::String>,
    path: ::protobuf::SingularField<::std::string::String>,
    argspec: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TFAPIMethod {
    fn default() -> &'a TFAPIMethod {
        <TFAPIMethod as ::protobuf::Message>::default_instance()
    }
}

impl TFAPIMethod {
    pub fn new() -> TFAPIMethod {
        ::std::default::Default::default()
    }

    // optional string name = 1;


    pub fn get_name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string path = 2;


    pub fn get_path(&self) -> &str {
        match self.path.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    pub fn has_path(&self) -> bool {
        self.path.is_some()
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        if self.path.is_none() {
            self.path.set_default();
        }
        self.path.as_mut().unwrap()
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        self.path.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string argspec = 3;


    pub fn get_argspec(&self) -> &str {
        match self.argspec.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_argspec(&mut self) {
        self.argspec.clear();
    }

    pub fn has_argspec(&self) -> bool {
        self.argspec.is_some()
    }

    // Param is passed by value, moved
    pub fn set_argspec(&mut self, v: ::std::string::String) {
        self.argspec = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_argspec(&mut self) -> &mut ::std::string::String {
        if self.argspec.is_none() {
            self.argspec.set_default();
        }
        self.argspec.as_mut().unwrap()
    }

    // Take field
    pub fn take_argspec(&mut self) -> ::std::string::String {
        self.argspec.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for TFAPIMethod {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.path)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.argspec)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.path.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.argspec.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.name.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.path.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.argspec.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TFAPIMethod {
        TFAPIMethod::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &TFAPIMethod| { &m.name },
                |m: &mut TFAPIMethod| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &TFAPIMethod| { &m.path },
                |m: &mut TFAPIMethod| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "argspec",
                |m: &TFAPIMethod| { &m.argspec },
                |m: &mut TFAPIMethod| { &mut m.argspec },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TFAPIMethod>(
                "TFAPIMethod",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TFAPIMethod {
        static instance: ::protobuf::rt::LazyV2<TFAPIMethod> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TFAPIMethod::new)
    }
}

impl ::protobuf::Clear for TFAPIMethod {
    fn clear(&mut self) {
        self.name.clear();
        self.path.clear();
        self.argspec.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TFAPIMethod {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TFAPIMethod {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TFAPIModule {
    // message fields
    pub member: ::protobuf::RepeatedField<TFAPIMember>,
    pub member_method: ::protobuf::RepeatedField<TFAPIMethod>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TFAPIModule {
    fn default() -> &'a TFAPIModule {
        <TFAPIModule as ::protobuf::Message>::default_instance()
    }
}

impl TFAPIModule {
    pub fn new() -> TFAPIModule {
        ::std::default::Default::default()
    }

    // repeated .third_party.tensorflow.tools.api.TFAPIMember member = 1;


    pub fn get_member(&self) -> &[TFAPIMember] {
        &self.member
    }
    pub fn clear_member(&mut self) {
        self.member.clear();
    }

    // Param is passed by value, moved
    pub fn set_member(&mut self, v: ::protobuf::RepeatedField<TFAPIMember>) {
        self.member = v;
    }

    // Mutable pointer to the field.
    pub fn mut_member(&mut self) -> &mut ::protobuf::RepeatedField<TFAPIMember> {
        &mut self.member
    }

    // Take field
    pub fn take_member(&mut self) -> ::protobuf::RepeatedField<TFAPIMember> {
        ::std::mem::replace(&mut self.member, ::protobuf::RepeatedField::new())
    }

    // repeated .third_party.tensorflow.tools.api.TFAPIMethod member_method = 2;


    pub fn get_member_method(&self) -> &[TFAPIMethod] {
        &self.member_method
    }
    pub fn clear_member_method(&mut self) {
        self.member_method.clear();
    }

    // Param is passed by value, moved
    pub fn set_member_method(&mut self, v: ::protobuf::RepeatedField<TFAPIMethod>) {
        self.member_method = v;
    }

    // Mutable pointer to the field.
    pub fn mut_member_method(&mut self) -> &mut ::protobuf::RepeatedField<TFAPIMethod> {
        &mut self.member_method
    }

    // Take field
    pub fn take_member_method(&mut self) -> ::protobuf::RepeatedField<TFAPIMethod> {
        ::std::mem::replace(&mut self.member_method, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TFAPIModule {
    fn is_initialized(&self) -> bool {
        for v in &self.member {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.member_method {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.member)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.member_method)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.member {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.member_method {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.member {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.member_method {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TFAPIModule {
        TFAPIModule::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TFAPIMember>>(
                "member",
                |m: &TFAPIModule| { &m.member },
                |m: &mut TFAPIModule| { &mut m.member },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TFAPIMethod>>(
                "member_method",
                |m: &TFAPIModule| { &m.member_method },
                |m: &mut TFAPIModule| { &mut m.member_method },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TFAPIModule>(
                "TFAPIModule",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TFAPIModule {
        static instance: ::protobuf::rt::LazyV2<TFAPIModule> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TFAPIModule::new)
    }
}

impl ::protobuf::Clear for TFAPIModule {
    fn clear(&mut self) {
        self.member.clear();
        self.member_method.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TFAPIModule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TFAPIModule {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TFAPIClass {
    // message fields
    pub is_instance: ::protobuf::RepeatedField<::std::string::String>,
    pub member: ::protobuf::RepeatedField<TFAPIMember>,
    pub member_method: ::protobuf::RepeatedField<TFAPIMethod>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TFAPIClass {
    fn default() -> &'a TFAPIClass {
        <TFAPIClass as ::protobuf::Message>::default_instance()
    }
}

impl TFAPIClass {
    pub fn new() -> TFAPIClass {
        ::std::default::Default::default()
    }

    // repeated string is_instance = 1;


    pub fn get_is_instance(&self) -> &[::std::string::String] {
        &self.is_instance
    }
    pub fn clear_is_instance(&mut self) {
        self.is_instance.clear();
    }

    // Param is passed by value, moved
    pub fn set_is_instance(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.is_instance = v;
    }

    // Mutable pointer to the field.
    pub fn mut_is_instance(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.is_instance
    }

    // Take field
    pub fn take_is_instance(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.is_instance, ::protobuf::RepeatedField::new())
    }

    // repeated .third_party.tensorflow.tools.api.TFAPIMember member = 2;


    pub fn get_member(&self) -> &[TFAPIMember] {
        &self.member
    }
    pub fn clear_member(&mut self) {
        self.member.clear();
    }

    // Param is passed by value, moved
    pub fn set_member(&mut self, v: ::protobuf::RepeatedField<TFAPIMember>) {
        self.member = v;
    }

    // Mutable pointer to the field.
    pub fn mut_member(&mut self) -> &mut ::protobuf::RepeatedField<TFAPIMember> {
        &mut self.member
    }

    // Take field
    pub fn take_member(&mut self) -> ::protobuf::RepeatedField<TFAPIMember> {
        ::std::mem::replace(&mut self.member, ::protobuf::RepeatedField::new())
    }

    // repeated .third_party.tensorflow.tools.api.TFAPIMethod member_method = 3;


    pub fn get_member_method(&self) -> &[TFAPIMethod] {
        &self.member_method
    }
    pub fn clear_member_method(&mut self) {
        self.member_method.clear();
    }

    // Param is passed by value, moved
    pub fn set_member_method(&mut self, v: ::protobuf::RepeatedField<TFAPIMethod>) {
        self.member_method = v;
    }

    // Mutable pointer to the field.
    pub fn mut_member_method(&mut self) -> &mut ::protobuf::RepeatedField<TFAPIMethod> {
        &mut self.member_method
    }

    // Take field
    pub fn take_member_method(&mut self) -> ::protobuf::RepeatedField<TFAPIMethod> {
        ::std::mem::replace(&mut self.member_method, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TFAPIClass {
    fn is_initialized(&self) -> bool {
        for v in &self.member {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.member_method {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.is_instance)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.member)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.member_method)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.is_instance {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        for value in &self.member {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.member_method {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.is_instance {
            os.write_string(1, &v)?;
        };
        for v in &self.member {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.member_method {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TFAPIClass {
        TFAPIClass::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "is_instance",
                |m: &TFAPIClass| { &m.is_instance },
                |m: &mut TFAPIClass| { &mut m.is_instance },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TFAPIMember>>(
                "member",
                |m: &TFAPIClass| { &m.member },
                |m: &mut TFAPIClass| { &mut m.member },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TFAPIMethod>>(
                "member_method",
                |m: &TFAPIClass| { &m.member_method },
                |m: &mut TFAPIClass| { &mut m.member_method },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TFAPIClass>(
                "TFAPIClass",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TFAPIClass {
        static instance: ::protobuf::rt::LazyV2<TFAPIClass> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TFAPIClass::new)
    }
}

impl ::protobuf::Clear for TFAPIClass {
    fn clear(&mut self) {
        self.is_instance.clear();
        self.member.clear();
        self.member_method.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TFAPIClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TFAPIClass {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TFAPIProto {
    // message fields
    pub descriptor: ::protobuf::SingularPtrField<::protobuf::descriptor::DescriptorProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TFAPIProto {
    fn default() -> &'a TFAPIProto {
        <TFAPIProto as ::protobuf::Message>::default_instance()
    }
}

impl TFAPIProto {
    pub fn new() -> TFAPIProto {
        ::std::default::Default::default()
    }

    // optional .google.protobuf.DescriptorProto descriptor = 1;


    pub fn get_descriptor(&self) -> &::protobuf::descriptor::DescriptorProto {
        self.descriptor.as_ref().unwrap_or_else(|| <::protobuf::descriptor::DescriptorProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_descriptor(&mut self) {
        self.descriptor.clear();
    }

    pub fn has_descriptor(&self) -> bool {
        self.descriptor.is_some()
    }

    // Param is passed by value, moved
    pub fn set_descriptor(&mut self, v: ::protobuf::descriptor::DescriptorProto) {
        self.descriptor = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_descriptor(&mut self) -> &mut ::protobuf::descriptor::DescriptorProto {
        if self.descriptor.is_none() {
            self.descriptor.set_default();
        }
        self.descriptor.as_mut().unwrap()
    }

    // Take field
    pub fn take_descriptor(&mut self) -> ::protobuf::descriptor::DescriptorProto {
        self.descriptor.take().unwrap_or_else(|| ::protobuf::descriptor::DescriptorProto::new())
    }
}

impl ::protobuf::Message for TFAPIProto {
    fn is_initialized(&self) -> bool {
        for v in &self.descriptor {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.descriptor)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.descriptor.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.descriptor.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TFAPIProto {
        TFAPIProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::descriptor::DescriptorProto>>(
                "descriptor",
                |m: &TFAPIProto| { &m.descriptor },
                |m: &mut TFAPIProto| { &mut m.descriptor },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TFAPIProto>(
                "TFAPIProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TFAPIProto {
        static instance: ::protobuf::rt::LazyV2<TFAPIProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TFAPIProto::new)
    }
}

impl ::protobuf::Clear for TFAPIProto {
    fn clear(&mut self) {
        self.descriptor.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TFAPIProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TFAPIProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TFAPIObject {
    // message fields
    path: ::protobuf::SingularField<::std::string::String>,
    pub tf_module: ::protobuf::SingularPtrField<TFAPIModule>,
    pub tf_class: ::protobuf::SingularPtrField<TFAPIClass>,
    pub tf_proto: ::protobuf::SingularPtrField<TFAPIProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TFAPIObject {
    fn default() -> &'a TFAPIObject {
        <TFAPIObject as ::protobuf::Message>::default_instance()
    }
}

impl TFAPIObject {
    pub fn new() -> TFAPIObject {
        ::std::default::Default::default()
    }

    // optional string path = 1;


    pub fn get_path(&self) -> &str {
        match self.path.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    pub fn has_path(&self) -> bool {
        self.path.is_some()
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        if self.path.is_none() {
            self.path.set_default();
        }
        self.path.as_mut().unwrap()
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        self.path.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .third_party.tensorflow.tools.api.TFAPIModule tf_module = 2;


    pub fn get_tf_module(&self) -> &TFAPIModule {
        self.tf_module.as_ref().unwrap_or_else(|| <TFAPIModule as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tf_module(&mut self) {
        self.tf_module.clear();
    }

    pub fn has_tf_module(&self) -> bool {
        self.tf_module.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tf_module(&mut self, v: TFAPIModule) {
        self.tf_module = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tf_module(&mut self) -> &mut TFAPIModule {
        if self.tf_module.is_none() {
            self.tf_module.set_default();
        }
        self.tf_module.as_mut().unwrap()
    }

    // Take field
    pub fn take_tf_module(&mut self) -> TFAPIModule {
        self.tf_module.take().unwrap_or_else(|| TFAPIModule::new())
    }

    // optional .third_party.tensorflow.tools.api.TFAPIClass tf_class = 3;


    pub fn get_tf_class(&self) -> &TFAPIClass {
        self.tf_class.as_ref().unwrap_or_else(|| <TFAPIClass as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tf_class(&mut self) {
        self.tf_class.clear();
    }

    pub fn has_tf_class(&self) -> bool {
        self.tf_class.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tf_class(&mut self, v: TFAPIClass) {
        self.tf_class = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tf_class(&mut self) -> &mut TFAPIClass {
        if self.tf_class.is_none() {
            self.tf_class.set_default();
        }
        self.tf_class.as_mut().unwrap()
    }

    // Take field
    pub fn take_tf_class(&mut self) -> TFAPIClass {
        self.tf_class.take().unwrap_or_else(|| TFAPIClass::new())
    }

    // optional .third_party.tensorflow.tools.api.TFAPIProto tf_proto = 4;


    pub fn get_tf_proto(&self) -> &TFAPIProto {
        self.tf_proto.as_ref().unwrap_or_else(|| <TFAPIProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tf_proto(&mut self) {
        self.tf_proto.clear();
    }

    pub fn has_tf_proto(&self) -> bool {
        self.tf_proto.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tf_proto(&mut self, v: TFAPIProto) {
        self.tf_proto = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tf_proto(&mut self) -> &mut TFAPIProto {
        if self.tf_proto.is_none() {
            self.tf_proto.set_default();
        }
        self.tf_proto.as_mut().unwrap()
    }

    // Take field
    pub fn take_tf_proto(&mut self) -> TFAPIProto {
        self.tf_proto.take().unwrap_or_else(|| TFAPIProto::new())
    }
}

impl ::protobuf::Message for TFAPIObject {
    fn is_initialized(&self) -> bool {
        for v in &self.tf_module {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tf_class {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tf_proto {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tf_module)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tf_class)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tf_proto)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.path.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.tf_module.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.tf_class.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.tf_proto.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.path.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.tf_module.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.tf_class.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.tf_proto.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TFAPIObject {
        TFAPIObject::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &TFAPIObject| { &m.path },
                |m: &mut TFAPIObject| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TFAPIModule>>(
                "tf_module",
                |m: &TFAPIObject| { &m.tf_module },
                |m: &mut TFAPIObject| { &mut m.tf_module },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TFAPIClass>>(
                "tf_class",
                |m: &TFAPIObject| { &m.tf_class },
                |m: &mut TFAPIObject| { &mut m.tf_class },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TFAPIProto>>(
                "tf_proto",
                |m: &TFAPIObject| { &m.tf_proto },
                |m: &mut TFAPIObject| { &mut m.tf_proto },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TFAPIObject>(
                "TFAPIObject",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TFAPIObject {
        static instance: ::protobuf::rt::LazyV2<TFAPIObject> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TFAPIObject::new)
    }
}

impl ::protobuf::Clear for TFAPIObject {
    fn clear(&mut self) {
        self.path.clear();
        self.tf_module.clear();
        self.tf_class.clear();
        self.tf_proto.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TFAPIObject {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TFAPIObject {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n*tensorflow/tools/api/lib/api_objects.proto\x12\x20third_party.tensorf\
    low.tools.api\x1a\x20google/protobuf/descriptor.proto\"7\n\x0bTFAPIMembe\
    r\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x14\n\x05mtype\x18\
    \x02\x20\x01(\tR\x05mtype\"O\n\x0bTFAPIMethod\x12\x12\n\x04name\x18\x01\
    \x20\x01(\tR\x04name\x12\x12\n\x04path\x18\x02\x20\x01(\tR\x04path\x12\
    \x18\n\x07argspec\x18\x03\x20\x01(\tR\x07argspec\"\xa8\x01\n\x0bTFAPIMod\
    ule\x12E\n\x06member\x18\x01\x20\x03(\x0b2-.third_party.tensorflow.tools\
    .api.TFAPIMemberR\x06member\x12R\n\rmember_method\x18\x02\x20\x03(\x0b2-\
    .third_party.tensorflow.tools.api.TFAPIMethodR\x0cmemberMethod\"\xc8\x01\
    \n\nTFAPIClass\x12\x1f\n\x0bis_instance\x18\x01\x20\x03(\tR\nisInstance\
    \x12E\n\x06member\x18\x02\x20\x03(\x0b2-.third_party.tensorflow.tools.ap\
    i.TFAPIMemberR\x06member\x12R\n\rmember_method\x18\x03\x20\x03(\x0b2-.th\
    ird_party.tensorflow.tools.api.TFAPIMethodR\x0cmemberMethod\"R\n\nTFAPIP\
    roto\x12@\n\ndescriptor\x18\x01\x20\x01(\x0b2\x20.google.protobuf.Descri\
    ptorProtoR\ndescriptor:\x02\x10\x01\"\xff\x01\n\x0bTFAPIObject\x12\x12\n\
    \x04path\x18\x01\x20\x01(\tR\x04path\x12J\n\ttf_module\x18\x02\x20\x01(\
    \x0b2-.third_party.tensorflow.tools.api.TFAPIModuleR\x08tfModule\x12G\n\
    \x08tf_class\x18\x03\x20\x01(\x0b2,.third_party.tensorflow.tools.api.TFA\
    PIClassR\x07tfClass\x12G\n\x08tf_proto\x18\x04\x20\x01(\x0b2,.third_part\
    y.tensorflow.tools.api.TFAPIProtoR\x07tfProto\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
