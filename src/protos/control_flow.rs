// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow/core/protobuf/control_flow.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct ValuesDef {
    // message fields
    pub values: ::protobuf::RepeatedField<::std::string::String>,
    pub external_values: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ValuesDef {
    fn default() -> &'a ValuesDef {
        <ValuesDef as ::protobuf::Message>::default_instance()
    }
}

impl ValuesDef {
    pub fn new() -> ValuesDef {
        ::std::default::Default::default()
    }

    // repeated string values = 1;


    pub fn get_values(&self) -> &[::std::string::String] {
        &self.values
    }
    pub fn clear_values(&mut self) {
        self.values.clear();
    }

    // Param is passed by value, moved
    pub fn set_values(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_values(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.values
    }

    // Take field
    pub fn take_values(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.values, ::protobuf::RepeatedField::new())
    }

    // repeated .tensorflow.ValuesDef.ExternalValuesEntry external_values = 2;


    pub fn get_external_values(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.external_values
    }
    pub fn clear_external_values(&mut self) {
        self.external_values.clear();
    }

    // Param is passed by value, moved
    pub fn set_external_values(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.external_values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_external_values(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.external_values
    }

    // Take field
    pub fn take_external_values(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.external_values, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for ValuesDef {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.values)?;
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.external_values)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.values {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(2, &self.external_values);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.values {
            os.write_string(1, &v)?;
        };
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(2, &self.external_values, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ValuesDef {
        ValuesDef::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "values",
                |m: &ValuesDef| { &m.values },
                |m: &mut ValuesDef| { &mut m.values },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "external_values",
                |m: &ValuesDef| { &m.external_values },
                |m: &mut ValuesDef| { &mut m.external_values },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ValuesDef>(
                "ValuesDef",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ValuesDef {
        static instance: ::protobuf::rt::LazyV2<ValuesDef> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ValuesDef::new)
    }
}

impl ::protobuf::Clear for ValuesDef {
    fn clear(&mut self) {
        self.values.clear();
        self.external_values.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ValuesDef {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValuesDef {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ControlFlowContextDef {
    // message oneof groups
    pub ctxt: ::std::option::Option<ControlFlowContextDef_oneof_ctxt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ControlFlowContextDef {
    fn default() -> &'a ControlFlowContextDef {
        <ControlFlowContextDef as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ControlFlowContextDef_oneof_ctxt {
    cond_ctxt(CondContextDef),
    while_ctxt(WhileContextDef),
}

impl ControlFlowContextDef {
    pub fn new() -> ControlFlowContextDef {
        ::std::default::Default::default()
    }

    // .tensorflow.CondContextDef cond_ctxt = 1;


    pub fn get_cond_ctxt(&self) -> &CondContextDef {
        match self.ctxt {
            ::std::option::Option::Some(ControlFlowContextDef_oneof_ctxt::cond_ctxt(ref v)) => v,
            _ => <CondContextDef as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_cond_ctxt(&mut self) {
        self.ctxt = ::std::option::Option::None;
    }

    pub fn has_cond_ctxt(&self) -> bool {
        match self.ctxt {
            ::std::option::Option::Some(ControlFlowContextDef_oneof_ctxt::cond_ctxt(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cond_ctxt(&mut self, v: CondContextDef) {
        self.ctxt = ::std::option::Option::Some(ControlFlowContextDef_oneof_ctxt::cond_ctxt(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cond_ctxt(&mut self) -> &mut CondContextDef {
        if let ::std::option::Option::Some(ControlFlowContextDef_oneof_ctxt::cond_ctxt(_)) = self.ctxt {
        } else {
            self.ctxt = ::std::option::Option::Some(ControlFlowContextDef_oneof_ctxt::cond_ctxt(CondContextDef::new()));
        }
        match self.ctxt {
            ::std::option::Option::Some(ControlFlowContextDef_oneof_ctxt::cond_ctxt(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cond_ctxt(&mut self) -> CondContextDef {
        if self.has_cond_ctxt() {
            match self.ctxt.take() {
                ::std::option::Option::Some(ControlFlowContextDef_oneof_ctxt::cond_ctxt(v)) => v,
                _ => panic!(),
            }
        } else {
            CondContextDef::new()
        }
    }

    // .tensorflow.WhileContextDef while_ctxt = 2;


    pub fn get_while_ctxt(&self) -> &WhileContextDef {
        match self.ctxt {
            ::std::option::Option::Some(ControlFlowContextDef_oneof_ctxt::while_ctxt(ref v)) => v,
            _ => <WhileContextDef as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_while_ctxt(&mut self) {
        self.ctxt = ::std::option::Option::None;
    }

    pub fn has_while_ctxt(&self) -> bool {
        match self.ctxt {
            ::std::option::Option::Some(ControlFlowContextDef_oneof_ctxt::while_ctxt(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_while_ctxt(&mut self, v: WhileContextDef) {
        self.ctxt = ::std::option::Option::Some(ControlFlowContextDef_oneof_ctxt::while_ctxt(v))
    }

    // Mutable pointer to the field.
    pub fn mut_while_ctxt(&mut self) -> &mut WhileContextDef {
        if let ::std::option::Option::Some(ControlFlowContextDef_oneof_ctxt::while_ctxt(_)) = self.ctxt {
        } else {
            self.ctxt = ::std::option::Option::Some(ControlFlowContextDef_oneof_ctxt::while_ctxt(WhileContextDef::new()));
        }
        match self.ctxt {
            ::std::option::Option::Some(ControlFlowContextDef_oneof_ctxt::while_ctxt(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_while_ctxt(&mut self) -> WhileContextDef {
        if self.has_while_ctxt() {
            match self.ctxt.take() {
                ::std::option::Option::Some(ControlFlowContextDef_oneof_ctxt::while_ctxt(v)) => v,
                _ => panic!(),
            }
        } else {
            WhileContextDef::new()
        }
    }
}

impl ::protobuf::Message for ControlFlowContextDef {
    fn is_initialized(&self) -> bool {
        if let Some(ControlFlowContextDef_oneof_ctxt::cond_ctxt(ref v)) = self.ctxt {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ControlFlowContextDef_oneof_ctxt::while_ctxt(ref v)) = self.ctxt {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.ctxt = ::std::option::Option::Some(ControlFlowContextDef_oneof_ctxt::cond_ctxt(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.ctxt = ::std::option::Option::Some(ControlFlowContextDef_oneof_ctxt::while_ctxt(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.ctxt {
            match v {
                &ControlFlowContextDef_oneof_ctxt::cond_ctxt(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ControlFlowContextDef_oneof_ctxt::while_ctxt(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.ctxt {
            match v {
                &ControlFlowContextDef_oneof_ctxt::cond_ctxt(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ControlFlowContextDef_oneof_ctxt::while_ctxt(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ControlFlowContextDef {
        ControlFlowContextDef::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, CondContextDef>(
                "cond_ctxt",
                ControlFlowContextDef::has_cond_ctxt,
                ControlFlowContextDef::get_cond_ctxt,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, WhileContextDef>(
                "while_ctxt",
                ControlFlowContextDef::has_while_ctxt,
                ControlFlowContextDef::get_while_ctxt,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ControlFlowContextDef>(
                "ControlFlowContextDef",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ControlFlowContextDef {
        static instance: ::protobuf::rt::LazyV2<ControlFlowContextDef> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ControlFlowContextDef::new)
    }
}

impl ::protobuf::Clear for ControlFlowContextDef {
    fn clear(&mut self) {
        self.ctxt = ::std::option::Option::None;
        self.ctxt = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ControlFlowContextDef {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ControlFlowContextDef {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CondContextDef {
    // message fields
    pub context_name: ::std::string::String,
    pub pred_name: ::std::string::String,
    pub pivot_name: ::std::string::String,
    pub branch: i32,
    pub values_def: ::protobuf::SingularPtrField<ValuesDef>,
    pub nested_contexts: ::protobuf::RepeatedField<ControlFlowContextDef>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CondContextDef {
    fn default() -> &'a CondContextDef {
        <CondContextDef as ::protobuf::Message>::default_instance()
    }
}

impl CondContextDef {
    pub fn new() -> CondContextDef {
        ::std::default::Default::default()
    }

    // string context_name = 1;


    pub fn get_context_name(&self) -> &str {
        &self.context_name
    }
    pub fn clear_context_name(&mut self) {
        self.context_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_context_name(&mut self, v: ::std::string::String) {
        self.context_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_context_name(&mut self) -> &mut ::std::string::String {
        &mut self.context_name
    }

    // Take field
    pub fn take_context_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.context_name, ::std::string::String::new())
    }

    // string pred_name = 2;


    pub fn get_pred_name(&self) -> &str {
        &self.pred_name
    }
    pub fn clear_pred_name(&mut self) {
        self.pred_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_pred_name(&mut self, v: ::std::string::String) {
        self.pred_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pred_name(&mut self) -> &mut ::std::string::String {
        &mut self.pred_name
    }

    // Take field
    pub fn take_pred_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pred_name, ::std::string::String::new())
    }

    // string pivot_name = 3;


    pub fn get_pivot_name(&self) -> &str {
        &self.pivot_name
    }
    pub fn clear_pivot_name(&mut self) {
        self.pivot_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_pivot_name(&mut self, v: ::std::string::String) {
        self.pivot_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pivot_name(&mut self) -> &mut ::std::string::String {
        &mut self.pivot_name
    }

    // Take field
    pub fn take_pivot_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pivot_name, ::std::string::String::new())
    }

    // int32 branch = 4;


    pub fn get_branch(&self) -> i32 {
        self.branch
    }
    pub fn clear_branch(&mut self) {
        self.branch = 0;
    }

    // Param is passed by value, moved
    pub fn set_branch(&mut self, v: i32) {
        self.branch = v;
    }

    // .tensorflow.ValuesDef values_def = 5;


    pub fn get_values_def(&self) -> &ValuesDef {
        self.values_def.as_ref().unwrap_or_else(|| <ValuesDef as ::protobuf::Message>::default_instance())
    }
    pub fn clear_values_def(&mut self) {
        self.values_def.clear();
    }

    pub fn has_values_def(&self) -> bool {
        self.values_def.is_some()
    }

    // Param is passed by value, moved
    pub fn set_values_def(&mut self, v: ValuesDef) {
        self.values_def = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_values_def(&mut self) -> &mut ValuesDef {
        if self.values_def.is_none() {
            self.values_def.set_default();
        }
        self.values_def.as_mut().unwrap()
    }

    // Take field
    pub fn take_values_def(&mut self) -> ValuesDef {
        self.values_def.take().unwrap_or_else(|| ValuesDef::new())
    }

    // repeated .tensorflow.ControlFlowContextDef nested_contexts = 6;


    pub fn get_nested_contexts(&self) -> &[ControlFlowContextDef] {
        &self.nested_contexts
    }
    pub fn clear_nested_contexts(&mut self) {
        self.nested_contexts.clear();
    }

    // Param is passed by value, moved
    pub fn set_nested_contexts(&mut self, v: ::protobuf::RepeatedField<ControlFlowContextDef>) {
        self.nested_contexts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_nested_contexts(&mut self) -> &mut ::protobuf::RepeatedField<ControlFlowContextDef> {
        &mut self.nested_contexts
    }

    // Take field
    pub fn take_nested_contexts(&mut self) -> ::protobuf::RepeatedField<ControlFlowContextDef> {
        ::std::mem::replace(&mut self.nested_contexts, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CondContextDef {
    fn is_initialized(&self) -> bool {
        for v in &self.values_def {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.nested_contexts {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.context_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pred_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pivot_name)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.branch = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.values_def)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.nested_contexts)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.context_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.context_name);
        }
        if !self.pred_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.pred_name);
        }
        if !self.pivot_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.pivot_name);
        }
        if self.branch != 0 {
            my_size += ::protobuf::rt::value_size(4, self.branch, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.values_def.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.nested_contexts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.context_name.is_empty() {
            os.write_string(1, &self.context_name)?;
        }
        if !self.pred_name.is_empty() {
            os.write_string(2, &self.pred_name)?;
        }
        if !self.pivot_name.is_empty() {
            os.write_string(3, &self.pivot_name)?;
        }
        if self.branch != 0 {
            os.write_int32(4, self.branch)?;
        }
        if let Some(ref v) = self.values_def.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.nested_contexts {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CondContextDef {
        CondContextDef::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "context_name",
                |m: &CondContextDef| { &m.context_name },
                |m: &mut CondContextDef| { &mut m.context_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pred_name",
                |m: &CondContextDef| { &m.pred_name },
                |m: &mut CondContextDef| { &mut m.pred_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pivot_name",
                |m: &CondContextDef| { &m.pivot_name },
                |m: &mut CondContextDef| { &mut m.pivot_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "branch",
                |m: &CondContextDef| { &m.branch },
                |m: &mut CondContextDef| { &mut m.branch },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ValuesDef>>(
                "values_def",
                |m: &CondContextDef| { &m.values_def },
                |m: &mut CondContextDef| { &mut m.values_def },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ControlFlowContextDef>>(
                "nested_contexts",
                |m: &CondContextDef| { &m.nested_contexts },
                |m: &mut CondContextDef| { &mut m.nested_contexts },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CondContextDef>(
                "CondContextDef",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CondContextDef {
        static instance: ::protobuf::rt::LazyV2<CondContextDef> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CondContextDef::new)
    }
}

impl ::protobuf::Clear for CondContextDef {
    fn clear(&mut self) {
        self.context_name.clear();
        self.pred_name.clear();
        self.pivot_name.clear();
        self.branch = 0;
        self.values_def.clear();
        self.nested_contexts.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CondContextDef {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CondContextDef {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WhileContextDef {
    // message fields
    pub context_name: ::std::string::String,
    pub parallel_iterations: i32,
    pub back_prop: bool,
    pub swap_memory: bool,
    pub pivot_name: ::std::string::String,
    pub pivot_for_pred_name: ::std::string::String,
    pub pivot_for_body_name: ::std::string::String,
    pub loop_exit_names: ::protobuf::RepeatedField<::std::string::String>,
    pub loop_enter_names: ::protobuf::RepeatedField<::std::string::String>,
    pub values_def: ::protobuf::SingularPtrField<ValuesDef>,
    pub maximum_iterations_name: ::std::string::String,
    pub nested_contexts: ::protobuf::RepeatedField<ControlFlowContextDef>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WhileContextDef {
    fn default() -> &'a WhileContextDef {
        <WhileContextDef as ::protobuf::Message>::default_instance()
    }
}

impl WhileContextDef {
    pub fn new() -> WhileContextDef {
        ::std::default::Default::default()
    }

    // string context_name = 1;


    pub fn get_context_name(&self) -> &str {
        &self.context_name
    }
    pub fn clear_context_name(&mut self) {
        self.context_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_context_name(&mut self, v: ::std::string::String) {
        self.context_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_context_name(&mut self) -> &mut ::std::string::String {
        &mut self.context_name
    }

    // Take field
    pub fn take_context_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.context_name, ::std::string::String::new())
    }

    // int32 parallel_iterations = 2;


    pub fn get_parallel_iterations(&self) -> i32 {
        self.parallel_iterations
    }
    pub fn clear_parallel_iterations(&mut self) {
        self.parallel_iterations = 0;
    }

    // Param is passed by value, moved
    pub fn set_parallel_iterations(&mut self, v: i32) {
        self.parallel_iterations = v;
    }

    // bool back_prop = 3;


    pub fn get_back_prop(&self) -> bool {
        self.back_prop
    }
    pub fn clear_back_prop(&mut self) {
        self.back_prop = false;
    }

    // Param is passed by value, moved
    pub fn set_back_prop(&mut self, v: bool) {
        self.back_prop = v;
    }

    // bool swap_memory = 4;


    pub fn get_swap_memory(&self) -> bool {
        self.swap_memory
    }
    pub fn clear_swap_memory(&mut self) {
        self.swap_memory = false;
    }

    // Param is passed by value, moved
    pub fn set_swap_memory(&mut self, v: bool) {
        self.swap_memory = v;
    }

    // string pivot_name = 5;


    pub fn get_pivot_name(&self) -> &str {
        &self.pivot_name
    }
    pub fn clear_pivot_name(&mut self) {
        self.pivot_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_pivot_name(&mut self, v: ::std::string::String) {
        self.pivot_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pivot_name(&mut self) -> &mut ::std::string::String {
        &mut self.pivot_name
    }

    // Take field
    pub fn take_pivot_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pivot_name, ::std::string::String::new())
    }

    // string pivot_for_pred_name = 6;


    pub fn get_pivot_for_pred_name(&self) -> &str {
        &self.pivot_for_pred_name
    }
    pub fn clear_pivot_for_pred_name(&mut self) {
        self.pivot_for_pred_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_pivot_for_pred_name(&mut self, v: ::std::string::String) {
        self.pivot_for_pred_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pivot_for_pred_name(&mut self) -> &mut ::std::string::String {
        &mut self.pivot_for_pred_name
    }

    // Take field
    pub fn take_pivot_for_pred_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pivot_for_pred_name, ::std::string::String::new())
    }

    // string pivot_for_body_name = 7;


    pub fn get_pivot_for_body_name(&self) -> &str {
        &self.pivot_for_body_name
    }
    pub fn clear_pivot_for_body_name(&mut self) {
        self.pivot_for_body_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_pivot_for_body_name(&mut self, v: ::std::string::String) {
        self.pivot_for_body_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pivot_for_body_name(&mut self) -> &mut ::std::string::String {
        &mut self.pivot_for_body_name
    }

    // Take field
    pub fn take_pivot_for_body_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pivot_for_body_name, ::std::string::String::new())
    }

    // repeated string loop_exit_names = 8;


    pub fn get_loop_exit_names(&self) -> &[::std::string::String] {
        &self.loop_exit_names
    }
    pub fn clear_loop_exit_names(&mut self) {
        self.loop_exit_names.clear();
    }

    // Param is passed by value, moved
    pub fn set_loop_exit_names(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.loop_exit_names = v;
    }

    // Mutable pointer to the field.
    pub fn mut_loop_exit_names(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.loop_exit_names
    }

    // Take field
    pub fn take_loop_exit_names(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.loop_exit_names, ::protobuf::RepeatedField::new())
    }

    // repeated string loop_enter_names = 10;


    pub fn get_loop_enter_names(&self) -> &[::std::string::String] {
        &self.loop_enter_names
    }
    pub fn clear_loop_enter_names(&mut self) {
        self.loop_enter_names.clear();
    }

    // Param is passed by value, moved
    pub fn set_loop_enter_names(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.loop_enter_names = v;
    }

    // Mutable pointer to the field.
    pub fn mut_loop_enter_names(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.loop_enter_names
    }

    // Take field
    pub fn take_loop_enter_names(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.loop_enter_names, ::protobuf::RepeatedField::new())
    }

    // .tensorflow.ValuesDef values_def = 9;


    pub fn get_values_def(&self) -> &ValuesDef {
        self.values_def.as_ref().unwrap_or_else(|| <ValuesDef as ::protobuf::Message>::default_instance())
    }
    pub fn clear_values_def(&mut self) {
        self.values_def.clear();
    }

    pub fn has_values_def(&self) -> bool {
        self.values_def.is_some()
    }

    // Param is passed by value, moved
    pub fn set_values_def(&mut self, v: ValuesDef) {
        self.values_def = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_values_def(&mut self) -> &mut ValuesDef {
        if self.values_def.is_none() {
            self.values_def.set_default();
        }
        self.values_def.as_mut().unwrap()
    }

    // Take field
    pub fn take_values_def(&mut self) -> ValuesDef {
        self.values_def.take().unwrap_or_else(|| ValuesDef::new())
    }

    // string maximum_iterations_name = 11;


    pub fn get_maximum_iterations_name(&self) -> &str {
        &self.maximum_iterations_name
    }
    pub fn clear_maximum_iterations_name(&mut self) {
        self.maximum_iterations_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_maximum_iterations_name(&mut self, v: ::std::string::String) {
        self.maximum_iterations_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_maximum_iterations_name(&mut self) -> &mut ::std::string::String {
        &mut self.maximum_iterations_name
    }

    // Take field
    pub fn take_maximum_iterations_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.maximum_iterations_name, ::std::string::String::new())
    }

    // repeated .tensorflow.ControlFlowContextDef nested_contexts = 12;


    pub fn get_nested_contexts(&self) -> &[ControlFlowContextDef] {
        &self.nested_contexts
    }
    pub fn clear_nested_contexts(&mut self) {
        self.nested_contexts.clear();
    }

    // Param is passed by value, moved
    pub fn set_nested_contexts(&mut self, v: ::protobuf::RepeatedField<ControlFlowContextDef>) {
        self.nested_contexts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_nested_contexts(&mut self) -> &mut ::protobuf::RepeatedField<ControlFlowContextDef> {
        &mut self.nested_contexts
    }

    // Take field
    pub fn take_nested_contexts(&mut self) -> ::protobuf::RepeatedField<ControlFlowContextDef> {
        ::std::mem::replace(&mut self.nested_contexts, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for WhileContextDef {
    fn is_initialized(&self) -> bool {
        for v in &self.values_def {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.nested_contexts {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.context_name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.parallel_iterations = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.back_prop = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.swap_memory = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pivot_name)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pivot_for_pred_name)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pivot_for_body_name)?;
                },
                8 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.loop_exit_names)?;
                },
                10 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.loop_enter_names)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.values_def)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.maximum_iterations_name)?;
                },
                12 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.nested_contexts)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.context_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.context_name);
        }
        if self.parallel_iterations != 0 {
            my_size += ::protobuf::rt::value_size(2, self.parallel_iterations, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.back_prop != false {
            my_size += 2;
        }
        if self.swap_memory != false {
            my_size += 2;
        }
        if !self.pivot_name.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.pivot_name);
        }
        if !self.pivot_for_pred_name.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.pivot_for_pred_name);
        }
        if !self.pivot_for_body_name.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.pivot_for_body_name);
        }
        for value in &self.loop_exit_names {
            my_size += ::protobuf::rt::string_size(8, &value);
        };
        for value in &self.loop_enter_names {
            my_size += ::protobuf::rt::string_size(10, &value);
        };
        if let Some(ref v) = self.values_def.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.maximum_iterations_name.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.maximum_iterations_name);
        }
        for value in &self.nested_contexts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.context_name.is_empty() {
            os.write_string(1, &self.context_name)?;
        }
        if self.parallel_iterations != 0 {
            os.write_int32(2, self.parallel_iterations)?;
        }
        if self.back_prop != false {
            os.write_bool(3, self.back_prop)?;
        }
        if self.swap_memory != false {
            os.write_bool(4, self.swap_memory)?;
        }
        if !self.pivot_name.is_empty() {
            os.write_string(5, &self.pivot_name)?;
        }
        if !self.pivot_for_pred_name.is_empty() {
            os.write_string(6, &self.pivot_for_pred_name)?;
        }
        if !self.pivot_for_body_name.is_empty() {
            os.write_string(7, &self.pivot_for_body_name)?;
        }
        for v in &self.loop_exit_names {
            os.write_string(8, &v)?;
        };
        for v in &self.loop_enter_names {
            os.write_string(10, &v)?;
        };
        if let Some(ref v) = self.values_def.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.maximum_iterations_name.is_empty() {
            os.write_string(11, &self.maximum_iterations_name)?;
        }
        for v in &self.nested_contexts {
            os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WhileContextDef {
        WhileContextDef::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "context_name",
                |m: &WhileContextDef| { &m.context_name },
                |m: &mut WhileContextDef| { &mut m.context_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "parallel_iterations",
                |m: &WhileContextDef| { &m.parallel_iterations },
                |m: &mut WhileContextDef| { &mut m.parallel_iterations },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "back_prop",
                |m: &WhileContextDef| { &m.back_prop },
                |m: &mut WhileContextDef| { &mut m.back_prop },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "swap_memory",
                |m: &WhileContextDef| { &m.swap_memory },
                |m: &mut WhileContextDef| { &mut m.swap_memory },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pivot_name",
                |m: &WhileContextDef| { &m.pivot_name },
                |m: &mut WhileContextDef| { &mut m.pivot_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pivot_for_pred_name",
                |m: &WhileContextDef| { &m.pivot_for_pred_name },
                |m: &mut WhileContextDef| { &mut m.pivot_for_pred_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pivot_for_body_name",
                |m: &WhileContextDef| { &m.pivot_for_body_name },
                |m: &mut WhileContextDef| { &mut m.pivot_for_body_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "loop_exit_names",
                |m: &WhileContextDef| { &m.loop_exit_names },
                |m: &mut WhileContextDef| { &mut m.loop_exit_names },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "loop_enter_names",
                |m: &WhileContextDef| { &m.loop_enter_names },
                |m: &mut WhileContextDef| { &mut m.loop_enter_names },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ValuesDef>>(
                "values_def",
                |m: &WhileContextDef| { &m.values_def },
                |m: &mut WhileContextDef| { &mut m.values_def },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "maximum_iterations_name",
                |m: &WhileContextDef| { &m.maximum_iterations_name },
                |m: &mut WhileContextDef| { &mut m.maximum_iterations_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ControlFlowContextDef>>(
                "nested_contexts",
                |m: &WhileContextDef| { &m.nested_contexts },
                |m: &mut WhileContextDef| { &mut m.nested_contexts },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WhileContextDef>(
                "WhileContextDef",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WhileContextDef {
        static instance: ::protobuf::rt::LazyV2<WhileContextDef> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WhileContextDef::new)
    }
}

impl ::protobuf::Clear for WhileContextDef {
    fn clear(&mut self) {
        self.context_name.clear();
        self.parallel_iterations = 0;
        self.back_prop = false;
        self.swap_memory = false;
        self.pivot_name.clear();
        self.pivot_for_pred_name.clear();
        self.pivot_for_body_name.clear();
        self.loop_exit_names.clear();
        self.loop_enter_names.clear();
        self.values_def.clear();
        self.maximum_iterations_name.clear();
        self.nested_contexts.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WhileContextDef {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WhileContextDef {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n+tensorflow/core/protobuf/control_flow.proto\x12\ntensorflow\"\xba\x01\
    \n\tValuesDef\x12\x16\n\x06values\x18\x01\x20\x03(\tR\x06values\x12R\n\
    \x0fexternal_values\x18\x02\x20\x03(\x0b2).tensorflow.ValuesDef.External\
    ValuesEntryR\x0eexternalValues\x1aA\n\x13ExternalValuesEntry\x12\x10\n\
    \x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\t\
    R\x05value:\x028\x01\"\x98\x01\n\x15ControlFlowContextDef\x129\n\tcond_c\
    txt\x18\x01\x20\x01(\x0b2\x1a.tensorflow.CondContextDefH\0R\x08condCtxt\
    \x12<\n\nwhile_ctxt\x18\x02\x20\x01(\x0b2\x1b.tensorflow.WhileContextDef\
    H\0R\twhileCtxtB\x06\n\x04ctxt\"\x89\x02\n\x0eCondContextDef\x12!\n\x0cc\
    ontext_name\x18\x01\x20\x01(\tR\x0bcontextName\x12\x1b\n\tpred_name\x18\
    \x02\x20\x01(\tR\x08predName\x12\x1d\n\npivot_name\x18\x03\x20\x01(\tR\t\
    pivotName\x12\x16\n\x06branch\x18\x04\x20\x01(\x05R\x06branch\x124\n\nva\
    lues_def\x18\x05\x20\x01(\x0b2\x15.tensorflow.ValuesDefR\tvaluesDef\x12J\
    \n\x0fnested_contexts\x18\x06\x20\x03(\x0b2!.tensorflow.ControlFlowConte\
    xtDefR\x0enestedContexts\"\xac\x04\n\x0fWhileContextDef\x12!\n\x0ccontex\
    t_name\x18\x01\x20\x01(\tR\x0bcontextName\x12/\n\x13parallel_iterations\
    \x18\x02\x20\x01(\x05R\x12parallelIterations\x12\x1b\n\tback_prop\x18\
    \x03\x20\x01(\x08R\x08backProp\x12\x1f\n\x0bswap_memory\x18\x04\x20\x01(\
    \x08R\nswapMemory\x12\x1d\n\npivot_name\x18\x05\x20\x01(\tR\tpivotName\
    \x12-\n\x13pivot_for_pred_name\x18\x06\x20\x01(\tR\x10pivotForPredName\
    \x12-\n\x13pivot_for_body_name\x18\x07\x20\x01(\tR\x10pivotForBodyName\
    \x12&\n\x0floop_exit_names\x18\x08\x20\x03(\tR\rloopExitNames\x12(\n\x10\
    loop_enter_names\x18\n\x20\x03(\tR\x0eloopEnterNames\x124\n\nvalues_def\
    \x18\t\x20\x01(\x0b2\x15.tensorflow.ValuesDefR\tvaluesDef\x126\n\x17maxi\
    mum_iterations_name\x18\x0b\x20\x01(\tR\x15maximumIterationsName\x12J\n\
    \x0fnested_contexts\x18\x0c\x20\x03(\x0b2!.tensorflow.ControlFlowContext\
    DefR\x0enestedContextsBp\n\x18org.tensorflow.frameworkB\x11ControlFlowPr\
    otosP\x01Z<github.com/tensorflow/tensorflow/tensorflow/go/core/protobuf\
    \xf8\x01\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
