// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow/core/protobuf/conv_autotuning.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct ConvolutionProto {
    // message fields
    pub kind: super::dnn::ConvolutionKind,
    pub input: ::protobuf::SingularPtrField<super::dnn::TensorDescriptorProto>,
    pub filter: ::protobuf::SingularPtrField<super::dnn::TensorDescriptorProto>,
    pub output: ::protobuf::SingularPtrField<super::dnn::TensorDescriptorProto>,
    pub conv_desc: ::protobuf::SingularPtrField<super::dnn::ConvolutionDescriptorProto>,
    pub conv_scale: f64,
    pub side_value_scale: f64,
    pub activation: super::dnn::ActivationMode,
    pub input_address: i64,
    pub filter_address: i64,
    pub output_address: i64,
    pub bias_address: i64,
    pub side_input_address: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConvolutionProto {
    fn default() -> &'a ConvolutionProto {
        <ConvolutionProto as ::protobuf::Message>::default_instance()
    }
}

impl ConvolutionProto {
    pub fn new() -> ConvolutionProto {
        ::std::default::Default::default()
    }

    // .stream_executor.dnn.ConvolutionKind kind = 1;


    pub fn get_kind(&self) -> super::dnn::ConvolutionKind {
        self.kind
    }
    pub fn clear_kind(&mut self) {
        self.kind = super::dnn::ConvolutionKind::INVALID;
    }

    // Param is passed by value, moved
    pub fn set_kind(&mut self, v: super::dnn::ConvolutionKind) {
        self.kind = v;
    }

    // .stream_executor.dnn.TensorDescriptorProto input = 2;


    pub fn get_input(&self) -> &super::dnn::TensorDescriptorProto {
        self.input.as_ref().unwrap_or_else(|| <super::dnn::TensorDescriptorProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_input(&mut self) {
        self.input.clear();
    }

    pub fn has_input(&self) -> bool {
        self.input.is_some()
    }

    // Param is passed by value, moved
    pub fn set_input(&mut self, v: super::dnn::TensorDescriptorProto) {
        self.input = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_input(&mut self) -> &mut super::dnn::TensorDescriptorProto {
        if self.input.is_none() {
            self.input.set_default();
        }
        self.input.as_mut().unwrap()
    }

    // Take field
    pub fn take_input(&mut self) -> super::dnn::TensorDescriptorProto {
        self.input.take().unwrap_or_else(|| super::dnn::TensorDescriptorProto::new())
    }

    // .stream_executor.dnn.TensorDescriptorProto filter = 3;


    pub fn get_filter(&self) -> &super::dnn::TensorDescriptorProto {
        self.filter.as_ref().unwrap_or_else(|| <super::dnn::TensorDescriptorProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    pub fn has_filter(&self) -> bool {
        self.filter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: super::dnn::TensorDescriptorProto) {
        self.filter = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut super::dnn::TensorDescriptorProto {
        if self.filter.is_none() {
            self.filter.set_default();
        }
        self.filter.as_mut().unwrap()
    }

    // Take field
    pub fn take_filter(&mut self) -> super::dnn::TensorDescriptorProto {
        self.filter.take().unwrap_or_else(|| super::dnn::TensorDescriptorProto::new())
    }

    // .stream_executor.dnn.TensorDescriptorProto output = 4;


    pub fn get_output(&self) -> &super::dnn::TensorDescriptorProto {
        self.output.as_ref().unwrap_or_else(|| <super::dnn::TensorDescriptorProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_output(&mut self) {
        self.output.clear();
    }

    pub fn has_output(&self) -> bool {
        self.output.is_some()
    }

    // Param is passed by value, moved
    pub fn set_output(&mut self, v: super::dnn::TensorDescriptorProto) {
        self.output = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_output(&mut self) -> &mut super::dnn::TensorDescriptorProto {
        if self.output.is_none() {
            self.output.set_default();
        }
        self.output.as_mut().unwrap()
    }

    // Take field
    pub fn take_output(&mut self) -> super::dnn::TensorDescriptorProto {
        self.output.take().unwrap_or_else(|| super::dnn::TensorDescriptorProto::new())
    }

    // .stream_executor.dnn.ConvolutionDescriptorProto conv_desc = 5;


    pub fn get_conv_desc(&self) -> &super::dnn::ConvolutionDescriptorProto {
        self.conv_desc.as_ref().unwrap_or_else(|| <super::dnn::ConvolutionDescriptorProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_conv_desc(&mut self) {
        self.conv_desc.clear();
    }

    pub fn has_conv_desc(&self) -> bool {
        self.conv_desc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_conv_desc(&mut self, v: super::dnn::ConvolutionDescriptorProto) {
        self.conv_desc = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_conv_desc(&mut self) -> &mut super::dnn::ConvolutionDescriptorProto {
        if self.conv_desc.is_none() {
            self.conv_desc.set_default();
        }
        self.conv_desc.as_mut().unwrap()
    }

    // Take field
    pub fn take_conv_desc(&mut self) -> super::dnn::ConvolutionDescriptorProto {
        self.conv_desc.take().unwrap_or_else(|| super::dnn::ConvolutionDescriptorProto::new())
    }

    // double conv_scale = 6;


    pub fn get_conv_scale(&self) -> f64 {
        self.conv_scale
    }
    pub fn clear_conv_scale(&mut self) {
        self.conv_scale = 0.;
    }

    // Param is passed by value, moved
    pub fn set_conv_scale(&mut self, v: f64) {
        self.conv_scale = v;
    }

    // double side_value_scale = 7;


    pub fn get_side_value_scale(&self) -> f64 {
        self.side_value_scale
    }
    pub fn clear_side_value_scale(&mut self) {
        self.side_value_scale = 0.;
    }

    // Param is passed by value, moved
    pub fn set_side_value_scale(&mut self, v: f64) {
        self.side_value_scale = v;
    }

    // .stream_executor.dnn.ActivationMode activation = 8;


    pub fn get_activation(&self) -> super::dnn::ActivationMode {
        self.activation
    }
    pub fn clear_activation(&mut self) {
        self.activation = super::dnn::ActivationMode::kNone;
    }

    // Param is passed by value, moved
    pub fn set_activation(&mut self, v: super::dnn::ActivationMode) {
        self.activation = v;
    }

    // int64 input_address = 9;


    pub fn get_input_address(&self) -> i64 {
        self.input_address
    }
    pub fn clear_input_address(&mut self) {
        self.input_address = 0;
    }

    // Param is passed by value, moved
    pub fn set_input_address(&mut self, v: i64) {
        self.input_address = v;
    }

    // int64 filter_address = 10;


    pub fn get_filter_address(&self) -> i64 {
        self.filter_address
    }
    pub fn clear_filter_address(&mut self) {
        self.filter_address = 0;
    }

    // Param is passed by value, moved
    pub fn set_filter_address(&mut self, v: i64) {
        self.filter_address = v;
    }

    // int64 output_address = 11;


    pub fn get_output_address(&self) -> i64 {
        self.output_address
    }
    pub fn clear_output_address(&mut self) {
        self.output_address = 0;
    }

    // Param is passed by value, moved
    pub fn set_output_address(&mut self, v: i64) {
        self.output_address = v;
    }

    // int64 bias_address = 12;


    pub fn get_bias_address(&self) -> i64 {
        self.bias_address
    }
    pub fn clear_bias_address(&mut self) {
        self.bias_address = 0;
    }

    // Param is passed by value, moved
    pub fn set_bias_address(&mut self, v: i64) {
        self.bias_address = v;
    }

    // int64 side_input_address = 13;


    pub fn get_side_input_address(&self) -> i64 {
        self.side_input_address
    }
    pub fn clear_side_input_address(&mut self) {
        self.side_input_address = 0;
    }

    // Param is passed by value, moved
    pub fn set_side_input_address(&mut self, v: i64) {
        self.side_input_address = v;
    }
}

impl ::protobuf::Message for ConvolutionProto {
    fn is_initialized(&self) -> bool {
        for v in &self.input {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.filter {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.output {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.conv_desc {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.kind, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.input)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.filter)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.output)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.conv_desc)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.conv_scale = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.side_value_scale = tmp;
                },
                8 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.activation, 8, &mut self.unknown_fields)?
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.input_address = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.filter_address = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.output_address = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.bias_address = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.side_input_address = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.kind != super::dnn::ConvolutionKind::INVALID {
            my_size += ::protobuf::rt::enum_size(1, self.kind);
        }
        if let Some(ref v) = self.input.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.filter.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.output.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.conv_desc.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.conv_scale != 0. {
            my_size += 9;
        }
        if self.side_value_scale != 0. {
            my_size += 9;
        }
        if self.activation != super::dnn::ActivationMode::kNone {
            my_size += ::protobuf::rt::enum_size(8, self.activation);
        }
        if self.input_address != 0 {
            my_size += ::protobuf::rt::value_size(9, self.input_address, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.filter_address != 0 {
            my_size += ::protobuf::rt::value_size(10, self.filter_address, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.output_address != 0 {
            my_size += ::protobuf::rt::value_size(11, self.output_address, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.bias_address != 0 {
            my_size += ::protobuf::rt::value_size(12, self.bias_address, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.side_input_address != 0 {
            my_size += ::protobuf::rt::value_size(13, self.side_input_address, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.kind != super::dnn::ConvolutionKind::INVALID {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.kind))?;
        }
        if let Some(ref v) = self.input.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.filter.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.output.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.conv_desc.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.conv_scale != 0. {
            os.write_double(6, self.conv_scale)?;
        }
        if self.side_value_scale != 0. {
            os.write_double(7, self.side_value_scale)?;
        }
        if self.activation != super::dnn::ActivationMode::kNone {
            os.write_enum(8, ::protobuf::ProtobufEnum::value(&self.activation))?;
        }
        if self.input_address != 0 {
            os.write_int64(9, self.input_address)?;
        }
        if self.filter_address != 0 {
            os.write_int64(10, self.filter_address)?;
        }
        if self.output_address != 0 {
            os.write_int64(11, self.output_address)?;
        }
        if self.bias_address != 0 {
            os.write_int64(12, self.bias_address)?;
        }
        if self.side_input_address != 0 {
            os.write_int64(13, self.side_input_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConvolutionProto {
        ConvolutionProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::dnn::ConvolutionKind>>(
                "kind",
                |m: &ConvolutionProto| { &m.kind },
                |m: &mut ConvolutionProto| { &mut m.kind },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::dnn::TensorDescriptorProto>>(
                "input",
                |m: &ConvolutionProto| { &m.input },
                |m: &mut ConvolutionProto| { &mut m.input },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::dnn::TensorDescriptorProto>>(
                "filter",
                |m: &ConvolutionProto| { &m.filter },
                |m: &mut ConvolutionProto| { &mut m.filter },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::dnn::TensorDescriptorProto>>(
                "output",
                |m: &ConvolutionProto| { &m.output },
                |m: &mut ConvolutionProto| { &mut m.output },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::dnn::ConvolutionDescriptorProto>>(
                "conv_desc",
                |m: &ConvolutionProto| { &m.conv_desc },
                |m: &mut ConvolutionProto| { &mut m.conv_desc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "conv_scale",
                |m: &ConvolutionProto| { &m.conv_scale },
                |m: &mut ConvolutionProto| { &mut m.conv_scale },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "side_value_scale",
                |m: &ConvolutionProto| { &m.side_value_scale },
                |m: &mut ConvolutionProto| { &mut m.side_value_scale },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::dnn::ActivationMode>>(
                "activation",
                |m: &ConvolutionProto| { &m.activation },
                |m: &mut ConvolutionProto| { &mut m.activation },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "input_address",
                |m: &ConvolutionProto| { &m.input_address },
                |m: &mut ConvolutionProto| { &mut m.input_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "filter_address",
                |m: &ConvolutionProto| { &m.filter_address },
                |m: &mut ConvolutionProto| { &mut m.filter_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "output_address",
                |m: &ConvolutionProto| { &m.output_address },
                |m: &mut ConvolutionProto| { &mut m.output_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "bias_address",
                |m: &ConvolutionProto| { &m.bias_address },
                |m: &mut ConvolutionProto| { &mut m.bias_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "side_input_address",
                |m: &ConvolutionProto| { &m.side_input_address },
                |m: &mut ConvolutionProto| { &mut m.side_input_address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConvolutionProto>(
                "ConvolutionProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConvolutionProto {
        static instance: ::protobuf::rt::LazyV2<ConvolutionProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConvolutionProto::new)
    }
}

impl ::protobuf::Clear for ConvolutionProto {
    fn clear(&mut self) {
        self.kind = super::dnn::ConvolutionKind::INVALID;
        self.input.clear();
        self.filter.clear();
        self.output.clear();
        self.conv_desc.clear();
        self.conv_scale = 0.;
        self.side_value_scale = 0.;
        self.activation = super::dnn::ActivationMode::kNone;
        self.input_address = 0;
        self.filter_address = 0;
        self.output_address = 0;
        self.bias_address = 0;
        self.side_input_address = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConvolutionProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConvolutionProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n.tensorflow/core/protobuf/conv_autotuning.proto\x12\ntensorflow\x1a$te\
    nsorflow/stream_executor/dnn.proto\"\xb6\x05\n\x10ConvolutionProto\x128\
    \n\x04kind\x18\x01\x20\x01(\x0e2$.stream_executor.dnn.ConvolutionKindR\
    \x04kind\x12@\n\x05input\x18\x02\x20\x01(\x0b2*.stream_executor.dnn.Tens\
    orDescriptorProtoR\x05input\x12B\n\x06filter\x18\x03\x20\x01(\x0b2*.stre\
    am_executor.dnn.TensorDescriptorProtoR\x06filter\x12B\n\x06output\x18\
    \x04\x20\x01(\x0b2*.stream_executor.dnn.TensorDescriptorProtoR\x06output\
    \x12L\n\tconv_desc\x18\x05\x20\x01(\x0b2/.stream_executor.dnn.Convolutio\
    nDescriptorProtoR\x08convDesc\x12\x1d\n\nconv_scale\x18\x06\x20\x01(\x01\
    R\tconvScale\x12(\n\x10side_value_scale\x18\x07\x20\x01(\x01R\x0esideVal\
    ueScale\x12C\n\nactivation\x18\x08\x20\x01(\x0e2#.stream_executor.dnn.Ac\
    tivationModeR\nactivation\x12#\n\rinput_address\x18\t\x20\x01(\x03R\x0ci\
    nputAddress\x12%\n\x0efilter_address\x18\n\x20\x01(\x03R\rfilterAddress\
    \x12%\n\x0eoutput_address\x18\x0b\x20\x01(\x03R\routputAddress\x12!\n\
    \x0cbias_address\x18\x0c\x20\x01(\x03R\x0bbiasAddress\x12,\n\x12side_inp\
    ut_address\x18\r\x20\x01(\x03R\x10sideInputAddressb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
