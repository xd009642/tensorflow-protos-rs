// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow/core/protobuf/replay_log.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct NewReplaySession {
    // message fields
    pub devices: ::protobuf::SingularPtrField<super::master::ListDevicesResponse>,
    pub session_handle: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NewReplaySession {
    fn default() -> &'a NewReplaySession {
        <NewReplaySession as ::protobuf::Message>::default_instance()
    }
}

impl NewReplaySession {
    pub fn new() -> NewReplaySession {
        ::std::default::Default::default()
    }

    // .tensorflow.ListDevicesResponse devices = 1;


    pub fn get_devices(&self) -> &super::master::ListDevicesResponse {
        self.devices.as_ref().unwrap_or_else(|| <super::master::ListDevicesResponse as ::protobuf::Message>::default_instance())
    }
    pub fn clear_devices(&mut self) {
        self.devices.clear();
    }

    pub fn has_devices(&self) -> bool {
        self.devices.is_some()
    }

    // Param is passed by value, moved
    pub fn set_devices(&mut self, v: super::master::ListDevicesResponse) {
        self.devices = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_devices(&mut self) -> &mut super::master::ListDevicesResponse {
        if self.devices.is_none() {
            self.devices.set_default();
        }
        self.devices.as_mut().unwrap()
    }

    // Take field
    pub fn take_devices(&mut self) -> super::master::ListDevicesResponse {
        self.devices.take().unwrap_or_else(|| super::master::ListDevicesResponse::new())
    }

    // string session_handle = 2;


    pub fn get_session_handle(&self) -> &str {
        &self.session_handle
    }
    pub fn clear_session_handle(&mut self) {
        self.session_handle.clear();
    }

    // Param is passed by value, moved
    pub fn set_session_handle(&mut self, v: ::std::string::String) {
        self.session_handle = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_session_handle(&mut self) -> &mut ::std::string::String {
        &mut self.session_handle
    }

    // Take field
    pub fn take_session_handle(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.session_handle, ::std::string::String::new())
    }
}

impl ::protobuf::Message for NewReplaySession {
    fn is_initialized(&self) -> bool {
        for v in &self.devices {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.devices)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.session_handle)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.devices.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.session_handle.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.session_handle);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.devices.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.session_handle.is_empty() {
            os.write_string(2, &self.session_handle)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NewReplaySession {
        NewReplaySession::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::master::ListDevicesResponse>>(
                "devices",
                |m: &NewReplaySession| { &m.devices },
                |m: &mut NewReplaySession| { &mut m.devices },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "session_handle",
                |m: &NewReplaySession| { &m.session_handle },
                |m: &mut NewReplaySession| { &mut m.session_handle },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<NewReplaySession>(
                "NewReplaySession",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static NewReplaySession {
        static instance: ::protobuf::rt::LazyV2<NewReplaySession> = ::protobuf::rt::LazyV2::INIT;
        instance.get(NewReplaySession::new)
    }
}

impl ::protobuf::Clear for NewReplaySession {
    fn clear(&mut self) {
        self.devices.clear();
        self.session_handle.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NewReplaySession {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NewReplaySession {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReplayOp {
    // message fields
    pub start_time_us: f64,
    pub end_time_us: f64,
    // message oneof groups
    pub op: ::std::option::Option<ReplayOp_oneof_op>,
    pub response: ::std::option::Option<ReplayOp_oneof_response>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReplayOp {
    fn default() -> &'a ReplayOp {
        <ReplayOp as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ReplayOp_oneof_op {
    create_session(super::master::CreateSessionRequest),
    extend_session(super::master::ExtendSessionRequest),
    partial_run_setup(super::master::PartialRunSetupRequest),
    run_step(super::master::RunStepRequest),
    close_session(super::master::CloseSessionRequest),
    list_devices(super::master::ListDevicesRequest),
    reset_request(super::master::ResetRequest),
    make_callable(super::master::MakeCallableRequest),
    run_callable(super::master::RunCallableRequest),
    release_callable(super::master::ReleaseCallableRequest),
    new_replay_session(NewReplaySession),
}

#[derive(Clone,PartialEq,Debug)]
pub enum ReplayOp_oneof_response {
    create_session_response(super::master::CreateSessionResponse),
    extend_session_response(super::master::ExtendSessionResponse),
    partial_run_setup_response(super::master::PartialRunSetupResponse),
    run_step_response(super::master::RunStepResponse),
    close_session_response(super::master::CloseSessionResponse),
    list_devices_response(super::master::ListDevicesResponse),
    reset_request_response(super::master::ResetResponse),
    make_callable_response(super::master::MakeCallableResponse),
    run_callable_response(super::master::RunCallableResponse),
    release_callable_response(super::master::ReleaseCallableResponse),
}

impl ReplayOp {
    pub fn new() -> ReplayOp {
        ::std::default::Default::default()
    }

    // double start_time_us = 31;


    pub fn get_start_time_us(&self) -> f64 {
        self.start_time_us
    }
    pub fn clear_start_time_us(&mut self) {
        self.start_time_us = 0.;
    }

    // Param is passed by value, moved
    pub fn set_start_time_us(&mut self, v: f64) {
        self.start_time_us = v;
    }

    // double end_time_us = 32;


    pub fn get_end_time_us(&self) -> f64 {
        self.end_time_us
    }
    pub fn clear_end_time_us(&mut self) {
        self.end_time_us = 0.;
    }

    // Param is passed by value, moved
    pub fn set_end_time_us(&mut self, v: f64) {
        self.end_time_us = v;
    }

    // .tensorflow.CreateSessionRequest create_session = 1;


    pub fn get_create_session(&self) -> &super::master::CreateSessionRequest {
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::create_session(ref v)) => v,
            _ => <super::master::CreateSessionRequest as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_create_session(&mut self) {
        self.op = ::std::option::Option::None;
    }

    pub fn has_create_session(&self) -> bool {
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::create_session(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_create_session(&mut self, v: super::master::CreateSessionRequest) {
        self.op = ::std::option::Option::Some(ReplayOp_oneof_op::create_session(v))
    }

    // Mutable pointer to the field.
    pub fn mut_create_session(&mut self) -> &mut super::master::CreateSessionRequest {
        if let ::std::option::Option::Some(ReplayOp_oneof_op::create_session(_)) = self.op {
        } else {
            self.op = ::std::option::Option::Some(ReplayOp_oneof_op::create_session(super::master::CreateSessionRequest::new()));
        }
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::create_session(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_create_session(&mut self) -> super::master::CreateSessionRequest {
        if self.has_create_session() {
            match self.op.take() {
                ::std::option::Option::Some(ReplayOp_oneof_op::create_session(v)) => v,
                _ => panic!(),
            }
        } else {
            super::master::CreateSessionRequest::new()
        }
    }

    // .tensorflow.ExtendSessionRequest extend_session = 2;


    pub fn get_extend_session(&self) -> &super::master::ExtendSessionRequest {
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::extend_session(ref v)) => v,
            _ => <super::master::ExtendSessionRequest as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_extend_session(&mut self) {
        self.op = ::std::option::Option::None;
    }

    pub fn has_extend_session(&self) -> bool {
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::extend_session(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_extend_session(&mut self, v: super::master::ExtendSessionRequest) {
        self.op = ::std::option::Option::Some(ReplayOp_oneof_op::extend_session(v))
    }

    // Mutable pointer to the field.
    pub fn mut_extend_session(&mut self) -> &mut super::master::ExtendSessionRequest {
        if let ::std::option::Option::Some(ReplayOp_oneof_op::extend_session(_)) = self.op {
        } else {
            self.op = ::std::option::Option::Some(ReplayOp_oneof_op::extend_session(super::master::ExtendSessionRequest::new()));
        }
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::extend_session(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_extend_session(&mut self) -> super::master::ExtendSessionRequest {
        if self.has_extend_session() {
            match self.op.take() {
                ::std::option::Option::Some(ReplayOp_oneof_op::extend_session(v)) => v,
                _ => panic!(),
            }
        } else {
            super::master::ExtendSessionRequest::new()
        }
    }

    // .tensorflow.PartialRunSetupRequest partial_run_setup = 3;


    pub fn get_partial_run_setup(&self) -> &super::master::PartialRunSetupRequest {
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::partial_run_setup(ref v)) => v,
            _ => <super::master::PartialRunSetupRequest as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_partial_run_setup(&mut self) {
        self.op = ::std::option::Option::None;
    }

    pub fn has_partial_run_setup(&self) -> bool {
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::partial_run_setup(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_partial_run_setup(&mut self, v: super::master::PartialRunSetupRequest) {
        self.op = ::std::option::Option::Some(ReplayOp_oneof_op::partial_run_setup(v))
    }

    // Mutable pointer to the field.
    pub fn mut_partial_run_setup(&mut self) -> &mut super::master::PartialRunSetupRequest {
        if let ::std::option::Option::Some(ReplayOp_oneof_op::partial_run_setup(_)) = self.op {
        } else {
            self.op = ::std::option::Option::Some(ReplayOp_oneof_op::partial_run_setup(super::master::PartialRunSetupRequest::new()));
        }
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::partial_run_setup(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_partial_run_setup(&mut self) -> super::master::PartialRunSetupRequest {
        if self.has_partial_run_setup() {
            match self.op.take() {
                ::std::option::Option::Some(ReplayOp_oneof_op::partial_run_setup(v)) => v,
                _ => panic!(),
            }
        } else {
            super::master::PartialRunSetupRequest::new()
        }
    }

    // .tensorflow.RunStepRequest run_step = 4;


    pub fn get_run_step(&self) -> &super::master::RunStepRequest {
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::run_step(ref v)) => v,
            _ => <super::master::RunStepRequest as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_run_step(&mut self) {
        self.op = ::std::option::Option::None;
    }

    pub fn has_run_step(&self) -> bool {
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::run_step(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_run_step(&mut self, v: super::master::RunStepRequest) {
        self.op = ::std::option::Option::Some(ReplayOp_oneof_op::run_step(v))
    }

    // Mutable pointer to the field.
    pub fn mut_run_step(&mut self) -> &mut super::master::RunStepRequest {
        if let ::std::option::Option::Some(ReplayOp_oneof_op::run_step(_)) = self.op {
        } else {
            self.op = ::std::option::Option::Some(ReplayOp_oneof_op::run_step(super::master::RunStepRequest::new()));
        }
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::run_step(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_run_step(&mut self) -> super::master::RunStepRequest {
        if self.has_run_step() {
            match self.op.take() {
                ::std::option::Option::Some(ReplayOp_oneof_op::run_step(v)) => v,
                _ => panic!(),
            }
        } else {
            super::master::RunStepRequest::new()
        }
    }

    // .tensorflow.CloseSessionRequest close_session = 5;


    pub fn get_close_session(&self) -> &super::master::CloseSessionRequest {
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::close_session(ref v)) => v,
            _ => <super::master::CloseSessionRequest as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_close_session(&mut self) {
        self.op = ::std::option::Option::None;
    }

    pub fn has_close_session(&self) -> bool {
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::close_session(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_close_session(&mut self, v: super::master::CloseSessionRequest) {
        self.op = ::std::option::Option::Some(ReplayOp_oneof_op::close_session(v))
    }

    // Mutable pointer to the field.
    pub fn mut_close_session(&mut self) -> &mut super::master::CloseSessionRequest {
        if let ::std::option::Option::Some(ReplayOp_oneof_op::close_session(_)) = self.op {
        } else {
            self.op = ::std::option::Option::Some(ReplayOp_oneof_op::close_session(super::master::CloseSessionRequest::new()));
        }
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::close_session(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_close_session(&mut self) -> super::master::CloseSessionRequest {
        if self.has_close_session() {
            match self.op.take() {
                ::std::option::Option::Some(ReplayOp_oneof_op::close_session(v)) => v,
                _ => panic!(),
            }
        } else {
            super::master::CloseSessionRequest::new()
        }
    }

    // .tensorflow.ListDevicesRequest list_devices = 6;


    pub fn get_list_devices(&self) -> &super::master::ListDevicesRequest {
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::list_devices(ref v)) => v,
            _ => <super::master::ListDevicesRequest as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_list_devices(&mut self) {
        self.op = ::std::option::Option::None;
    }

    pub fn has_list_devices(&self) -> bool {
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::list_devices(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_list_devices(&mut self, v: super::master::ListDevicesRequest) {
        self.op = ::std::option::Option::Some(ReplayOp_oneof_op::list_devices(v))
    }

    // Mutable pointer to the field.
    pub fn mut_list_devices(&mut self) -> &mut super::master::ListDevicesRequest {
        if let ::std::option::Option::Some(ReplayOp_oneof_op::list_devices(_)) = self.op {
        } else {
            self.op = ::std::option::Option::Some(ReplayOp_oneof_op::list_devices(super::master::ListDevicesRequest::new()));
        }
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::list_devices(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_list_devices(&mut self) -> super::master::ListDevicesRequest {
        if self.has_list_devices() {
            match self.op.take() {
                ::std::option::Option::Some(ReplayOp_oneof_op::list_devices(v)) => v,
                _ => panic!(),
            }
        } else {
            super::master::ListDevicesRequest::new()
        }
    }

    // .tensorflow.ResetRequest reset_request = 7;


    pub fn get_reset_request(&self) -> &super::master::ResetRequest {
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::reset_request(ref v)) => v,
            _ => <super::master::ResetRequest as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_reset_request(&mut self) {
        self.op = ::std::option::Option::None;
    }

    pub fn has_reset_request(&self) -> bool {
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::reset_request(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_reset_request(&mut self, v: super::master::ResetRequest) {
        self.op = ::std::option::Option::Some(ReplayOp_oneof_op::reset_request(v))
    }

    // Mutable pointer to the field.
    pub fn mut_reset_request(&mut self) -> &mut super::master::ResetRequest {
        if let ::std::option::Option::Some(ReplayOp_oneof_op::reset_request(_)) = self.op {
        } else {
            self.op = ::std::option::Option::Some(ReplayOp_oneof_op::reset_request(super::master::ResetRequest::new()));
        }
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::reset_request(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_reset_request(&mut self) -> super::master::ResetRequest {
        if self.has_reset_request() {
            match self.op.take() {
                ::std::option::Option::Some(ReplayOp_oneof_op::reset_request(v)) => v,
                _ => panic!(),
            }
        } else {
            super::master::ResetRequest::new()
        }
    }

    // .tensorflow.MakeCallableRequest make_callable = 8;


    pub fn get_make_callable(&self) -> &super::master::MakeCallableRequest {
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::make_callable(ref v)) => v,
            _ => <super::master::MakeCallableRequest as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_make_callable(&mut self) {
        self.op = ::std::option::Option::None;
    }

    pub fn has_make_callable(&self) -> bool {
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::make_callable(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_make_callable(&mut self, v: super::master::MakeCallableRequest) {
        self.op = ::std::option::Option::Some(ReplayOp_oneof_op::make_callable(v))
    }

    // Mutable pointer to the field.
    pub fn mut_make_callable(&mut self) -> &mut super::master::MakeCallableRequest {
        if let ::std::option::Option::Some(ReplayOp_oneof_op::make_callable(_)) = self.op {
        } else {
            self.op = ::std::option::Option::Some(ReplayOp_oneof_op::make_callable(super::master::MakeCallableRequest::new()));
        }
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::make_callable(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_make_callable(&mut self) -> super::master::MakeCallableRequest {
        if self.has_make_callable() {
            match self.op.take() {
                ::std::option::Option::Some(ReplayOp_oneof_op::make_callable(v)) => v,
                _ => panic!(),
            }
        } else {
            super::master::MakeCallableRequest::new()
        }
    }

    // .tensorflow.RunCallableRequest run_callable = 9;


    pub fn get_run_callable(&self) -> &super::master::RunCallableRequest {
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::run_callable(ref v)) => v,
            _ => <super::master::RunCallableRequest as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_run_callable(&mut self) {
        self.op = ::std::option::Option::None;
    }

    pub fn has_run_callable(&self) -> bool {
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::run_callable(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_run_callable(&mut self, v: super::master::RunCallableRequest) {
        self.op = ::std::option::Option::Some(ReplayOp_oneof_op::run_callable(v))
    }

    // Mutable pointer to the field.
    pub fn mut_run_callable(&mut self) -> &mut super::master::RunCallableRequest {
        if let ::std::option::Option::Some(ReplayOp_oneof_op::run_callable(_)) = self.op {
        } else {
            self.op = ::std::option::Option::Some(ReplayOp_oneof_op::run_callable(super::master::RunCallableRequest::new()));
        }
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::run_callable(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_run_callable(&mut self) -> super::master::RunCallableRequest {
        if self.has_run_callable() {
            match self.op.take() {
                ::std::option::Option::Some(ReplayOp_oneof_op::run_callable(v)) => v,
                _ => panic!(),
            }
        } else {
            super::master::RunCallableRequest::new()
        }
    }

    // .tensorflow.ReleaseCallableRequest release_callable = 10;


    pub fn get_release_callable(&self) -> &super::master::ReleaseCallableRequest {
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::release_callable(ref v)) => v,
            _ => <super::master::ReleaseCallableRequest as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_release_callable(&mut self) {
        self.op = ::std::option::Option::None;
    }

    pub fn has_release_callable(&self) -> bool {
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::release_callable(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_release_callable(&mut self, v: super::master::ReleaseCallableRequest) {
        self.op = ::std::option::Option::Some(ReplayOp_oneof_op::release_callable(v))
    }

    // Mutable pointer to the field.
    pub fn mut_release_callable(&mut self) -> &mut super::master::ReleaseCallableRequest {
        if let ::std::option::Option::Some(ReplayOp_oneof_op::release_callable(_)) = self.op {
        } else {
            self.op = ::std::option::Option::Some(ReplayOp_oneof_op::release_callable(super::master::ReleaseCallableRequest::new()));
        }
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::release_callable(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_release_callable(&mut self) -> super::master::ReleaseCallableRequest {
        if self.has_release_callable() {
            match self.op.take() {
                ::std::option::Option::Some(ReplayOp_oneof_op::release_callable(v)) => v,
                _ => panic!(),
            }
        } else {
            super::master::ReleaseCallableRequest::new()
        }
    }

    // .tensorflow.NewReplaySession new_replay_session = 11;


    pub fn get_new_replay_session(&self) -> &NewReplaySession {
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::new_replay_session(ref v)) => v,
            _ => <NewReplaySession as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_new_replay_session(&mut self) {
        self.op = ::std::option::Option::None;
    }

    pub fn has_new_replay_session(&self) -> bool {
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::new_replay_session(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_new_replay_session(&mut self, v: NewReplaySession) {
        self.op = ::std::option::Option::Some(ReplayOp_oneof_op::new_replay_session(v))
    }

    // Mutable pointer to the field.
    pub fn mut_new_replay_session(&mut self) -> &mut NewReplaySession {
        if let ::std::option::Option::Some(ReplayOp_oneof_op::new_replay_session(_)) = self.op {
        } else {
            self.op = ::std::option::Option::Some(ReplayOp_oneof_op::new_replay_session(NewReplaySession::new()));
        }
        match self.op {
            ::std::option::Option::Some(ReplayOp_oneof_op::new_replay_session(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_new_replay_session(&mut self) -> NewReplaySession {
        if self.has_new_replay_session() {
            match self.op.take() {
                ::std::option::Option::Some(ReplayOp_oneof_op::new_replay_session(v)) => v,
                _ => panic!(),
            }
        } else {
            NewReplaySession::new()
        }
    }

    // .tensorflow.CreateSessionResponse create_session_response = 21;


    pub fn get_create_session_response(&self) -> &super::master::CreateSessionResponse {
        match self.response {
            ::std::option::Option::Some(ReplayOp_oneof_response::create_session_response(ref v)) => v,
            _ => <super::master::CreateSessionResponse as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_create_session_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_create_session_response(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(ReplayOp_oneof_response::create_session_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_create_session_response(&mut self, v: super::master::CreateSessionResponse) {
        self.response = ::std::option::Option::Some(ReplayOp_oneof_response::create_session_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_create_session_response(&mut self) -> &mut super::master::CreateSessionResponse {
        if let ::std::option::Option::Some(ReplayOp_oneof_response::create_session_response(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(ReplayOp_oneof_response::create_session_response(super::master::CreateSessionResponse::new()));
        }
        match self.response {
            ::std::option::Option::Some(ReplayOp_oneof_response::create_session_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_create_session_response(&mut self) -> super::master::CreateSessionResponse {
        if self.has_create_session_response() {
            match self.response.take() {
                ::std::option::Option::Some(ReplayOp_oneof_response::create_session_response(v)) => v,
                _ => panic!(),
            }
        } else {
            super::master::CreateSessionResponse::new()
        }
    }

    // .tensorflow.ExtendSessionResponse extend_session_response = 22;


    pub fn get_extend_session_response(&self) -> &super::master::ExtendSessionResponse {
        match self.response {
            ::std::option::Option::Some(ReplayOp_oneof_response::extend_session_response(ref v)) => v,
            _ => <super::master::ExtendSessionResponse as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_extend_session_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_extend_session_response(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(ReplayOp_oneof_response::extend_session_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_extend_session_response(&mut self, v: super::master::ExtendSessionResponse) {
        self.response = ::std::option::Option::Some(ReplayOp_oneof_response::extend_session_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_extend_session_response(&mut self) -> &mut super::master::ExtendSessionResponse {
        if let ::std::option::Option::Some(ReplayOp_oneof_response::extend_session_response(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(ReplayOp_oneof_response::extend_session_response(super::master::ExtendSessionResponse::new()));
        }
        match self.response {
            ::std::option::Option::Some(ReplayOp_oneof_response::extend_session_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_extend_session_response(&mut self) -> super::master::ExtendSessionResponse {
        if self.has_extend_session_response() {
            match self.response.take() {
                ::std::option::Option::Some(ReplayOp_oneof_response::extend_session_response(v)) => v,
                _ => panic!(),
            }
        } else {
            super::master::ExtendSessionResponse::new()
        }
    }

    // .tensorflow.PartialRunSetupResponse partial_run_setup_response = 23;


    pub fn get_partial_run_setup_response(&self) -> &super::master::PartialRunSetupResponse {
        match self.response {
            ::std::option::Option::Some(ReplayOp_oneof_response::partial_run_setup_response(ref v)) => v,
            _ => <super::master::PartialRunSetupResponse as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_partial_run_setup_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_partial_run_setup_response(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(ReplayOp_oneof_response::partial_run_setup_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_partial_run_setup_response(&mut self, v: super::master::PartialRunSetupResponse) {
        self.response = ::std::option::Option::Some(ReplayOp_oneof_response::partial_run_setup_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_partial_run_setup_response(&mut self) -> &mut super::master::PartialRunSetupResponse {
        if let ::std::option::Option::Some(ReplayOp_oneof_response::partial_run_setup_response(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(ReplayOp_oneof_response::partial_run_setup_response(super::master::PartialRunSetupResponse::new()));
        }
        match self.response {
            ::std::option::Option::Some(ReplayOp_oneof_response::partial_run_setup_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_partial_run_setup_response(&mut self) -> super::master::PartialRunSetupResponse {
        if self.has_partial_run_setup_response() {
            match self.response.take() {
                ::std::option::Option::Some(ReplayOp_oneof_response::partial_run_setup_response(v)) => v,
                _ => panic!(),
            }
        } else {
            super::master::PartialRunSetupResponse::new()
        }
    }

    // .tensorflow.RunStepResponse run_step_response = 24;


    pub fn get_run_step_response(&self) -> &super::master::RunStepResponse {
        match self.response {
            ::std::option::Option::Some(ReplayOp_oneof_response::run_step_response(ref v)) => v,
            _ => <super::master::RunStepResponse as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_run_step_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_run_step_response(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(ReplayOp_oneof_response::run_step_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_run_step_response(&mut self, v: super::master::RunStepResponse) {
        self.response = ::std::option::Option::Some(ReplayOp_oneof_response::run_step_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_run_step_response(&mut self) -> &mut super::master::RunStepResponse {
        if let ::std::option::Option::Some(ReplayOp_oneof_response::run_step_response(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(ReplayOp_oneof_response::run_step_response(super::master::RunStepResponse::new()));
        }
        match self.response {
            ::std::option::Option::Some(ReplayOp_oneof_response::run_step_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_run_step_response(&mut self) -> super::master::RunStepResponse {
        if self.has_run_step_response() {
            match self.response.take() {
                ::std::option::Option::Some(ReplayOp_oneof_response::run_step_response(v)) => v,
                _ => panic!(),
            }
        } else {
            super::master::RunStepResponse::new()
        }
    }

    // .tensorflow.CloseSessionResponse close_session_response = 25;


    pub fn get_close_session_response(&self) -> &super::master::CloseSessionResponse {
        match self.response {
            ::std::option::Option::Some(ReplayOp_oneof_response::close_session_response(ref v)) => v,
            _ => <super::master::CloseSessionResponse as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_close_session_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_close_session_response(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(ReplayOp_oneof_response::close_session_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_close_session_response(&mut self, v: super::master::CloseSessionResponse) {
        self.response = ::std::option::Option::Some(ReplayOp_oneof_response::close_session_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_close_session_response(&mut self) -> &mut super::master::CloseSessionResponse {
        if let ::std::option::Option::Some(ReplayOp_oneof_response::close_session_response(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(ReplayOp_oneof_response::close_session_response(super::master::CloseSessionResponse::new()));
        }
        match self.response {
            ::std::option::Option::Some(ReplayOp_oneof_response::close_session_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_close_session_response(&mut self) -> super::master::CloseSessionResponse {
        if self.has_close_session_response() {
            match self.response.take() {
                ::std::option::Option::Some(ReplayOp_oneof_response::close_session_response(v)) => v,
                _ => panic!(),
            }
        } else {
            super::master::CloseSessionResponse::new()
        }
    }

    // .tensorflow.ListDevicesResponse list_devices_response = 26;


    pub fn get_list_devices_response(&self) -> &super::master::ListDevicesResponse {
        match self.response {
            ::std::option::Option::Some(ReplayOp_oneof_response::list_devices_response(ref v)) => v,
            _ => <super::master::ListDevicesResponse as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_list_devices_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_list_devices_response(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(ReplayOp_oneof_response::list_devices_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_list_devices_response(&mut self, v: super::master::ListDevicesResponse) {
        self.response = ::std::option::Option::Some(ReplayOp_oneof_response::list_devices_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_list_devices_response(&mut self) -> &mut super::master::ListDevicesResponse {
        if let ::std::option::Option::Some(ReplayOp_oneof_response::list_devices_response(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(ReplayOp_oneof_response::list_devices_response(super::master::ListDevicesResponse::new()));
        }
        match self.response {
            ::std::option::Option::Some(ReplayOp_oneof_response::list_devices_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_list_devices_response(&mut self) -> super::master::ListDevicesResponse {
        if self.has_list_devices_response() {
            match self.response.take() {
                ::std::option::Option::Some(ReplayOp_oneof_response::list_devices_response(v)) => v,
                _ => panic!(),
            }
        } else {
            super::master::ListDevicesResponse::new()
        }
    }

    // .tensorflow.ResetResponse reset_request_response = 27;


    pub fn get_reset_request_response(&self) -> &super::master::ResetResponse {
        match self.response {
            ::std::option::Option::Some(ReplayOp_oneof_response::reset_request_response(ref v)) => v,
            _ => <super::master::ResetResponse as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_reset_request_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_reset_request_response(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(ReplayOp_oneof_response::reset_request_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_reset_request_response(&mut self, v: super::master::ResetResponse) {
        self.response = ::std::option::Option::Some(ReplayOp_oneof_response::reset_request_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_reset_request_response(&mut self) -> &mut super::master::ResetResponse {
        if let ::std::option::Option::Some(ReplayOp_oneof_response::reset_request_response(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(ReplayOp_oneof_response::reset_request_response(super::master::ResetResponse::new()));
        }
        match self.response {
            ::std::option::Option::Some(ReplayOp_oneof_response::reset_request_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_reset_request_response(&mut self) -> super::master::ResetResponse {
        if self.has_reset_request_response() {
            match self.response.take() {
                ::std::option::Option::Some(ReplayOp_oneof_response::reset_request_response(v)) => v,
                _ => panic!(),
            }
        } else {
            super::master::ResetResponse::new()
        }
    }

    // .tensorflow.MakeCallableResponse make_callable_response = 28;


    pub fn get_make_callable_response(&self) -> &super::master::MakeCallableResponse {
        match self.response {
            ::std::option::Option::Some(ReplayOp_oneof_response::make_callable_response(ref v)) => v,
            _ => <super::master::MakeCallableResponse as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_make_callable_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_make_callable_response(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(ReplayOp_oneof_response::make_callable_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_make_callable_response(&mut self, v: super::master::MakeCallableResponse) {
        self.response = ::std::option::Option::Some(ReplayOp_oneof_response::make_callable_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_make_callable_response(&mut self) -> &mut super::master::MakeCallableResponse {
        if let ::std::option::Option::Some(ReplayOp_oneof_response::make_callable_response(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(ReplayOp_oneof_response::make_callable_response(super::master::MakeCallableResponse::new()));
        }
        match self.response {
            ::std::option::Option::Some(ReplayOp_oneof_response::make_callable_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_make_callable_response(&mut self) -> super::master::MakeCallableResponse {
        if self.has_make_callable_response() {
            match self.response.take() {
                ::std::option::Option::Some(ReplayOp_oneof_response::make_callable_response(v)) => v,
                _ => panic!(),
            }
        } else {
            super::master::MakeCallableResponse::new()
        }
    }

    // .tensorflow.RunCallableResponse run_callable_response = 29;


    pub fn get_run_callable_response(&self) -> &super::master::RunCallableResponse {
        match self.response {
            ::std::option::Option::Some(ReplayOp_oneof_response::run_callable_response(ref v)) => v,
            _ => <super::master::RunCallableResponse as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_run_callable_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_run_callable_response(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(ReplayOp_oneof_response::run_callable_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_run_callable_response(&mut self, v: super::master::RunCallableResponse) {
        self.response = ::std::option::Option::Some(ReplayOp_oneof_response::run_callable_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_run_callable_response(&mut self) -> &mut super::master::RunCallableResponse {
        if let ::std::option::Option::Some(ReplayOp_oneof_response::run_callable_response(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(ReplayOp_oneof_response::run_callable_response(super::master::RunCallableResponse::new()));
        }
        match self.response {
            ::std::option::Option::Some(ReplayOp_oneof_response::run_callable_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_run_callable_response(&mut self) -> super::master::RunCallableResponse {
        if self.has_run_callable_response() {
            match self.response.take() {
                ::std::option::Option::Some(ReplayOp_oneof_response::run_callable_response(v)) => v,
                _ => panic!(),
            }
        } else {
            super::master::RunCallableResponse::new()
        }
    }

    // .tensorflow.ReleaseCallableResponse release_callable_response = 30;


    pub fn get_release_callable_response(&self) -> &super::master::ReleaseCallableResponse {
        match self.response {
            ::std::option::Option::Some(ReplayOp_oneof_response::release_callable_response(ref v)) => v,
            _ => <super::master::ReleaseCallableResponse as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_release_callable_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_release_callable_response(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(ReplayOp_oneof_response::release_callable_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_release_callable_response(&mut self, v: super::master::ReleaseCallableResponse) {
        self.response = ::std::option::Option::Some(ReplayOp_oneof_response::release_callable_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_release_callable_response(&mut self) -> &mut super::master::ReleaseCallableResponse {
        if let ::std::option::Option::Some(ReplayOp_oneof_response::release_callable_response(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(ReplayOp_oneof_response::release_callable_response(super::master::ReleaseCallableResponse::new()));
        }
        match self.response {
            ::std::option::Option::Some(ReplayOp_oneof_response::release_callable_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_release_callable_response(&mut self) -> super::master::ReleaseCallableResponse {
        if self.has_release_callable_response() {
            match self.response.take() {
                ::std::option::Option::Some(ReplayOp_oneof_response::release_callable_response(v)) => v,
                _ => panic!(),
            }
        } else {
            super::master::ReleaseCallableResponse::new()
        }
    }
}

impl ::protobuf::Message for ReplayOp {
    fn is_initialized(&self) -> bool {
        if let Some(ReplayOp_oneof_op::create_session(ref v)) = self.op {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReplayOp_oneof_op::extend_session(ref v)) = self.op {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReplayOp_oneof_op::partial_run_setup(ref v)) = self.op {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReplayOp_oneof_op::run_step(ref v)) = self.op {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReplayOp_oneof_op::close_session(ref v)) = self.op {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReplayOp_oneof_op::list_devices(ref v)) = self.op {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReplayOp_oneof_op::reset_request(ref v)) = self.op {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReplayOp_oneof_op::make_callable(ref v)) = self.op {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReplayOp_oneof_op::run_callable(ref v)) = self.op {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReplayOp_oneof_op::release_callable(ref v)) = self.op {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReplayOp_oneof_op::new_replay_session(ref v)) = self.op {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReplayOp_oneof_response::create_session_response(ref v)) = self.response {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReplayOp_oneof_response::extend_session_response(ref v)) = self.response {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReplayOp_oneof_response::partial_run_setup_response(ref v)) = self.response {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReplayOp_oneof_response::run_step_response(ref v)) = self.response {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReplayOp_oneof_response::close_session_response(ref v)) = self.response {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReplayOp_oneof_response::list_devices_response(ref v)) = self.response {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReplayOp_oneof_response::reset_request_response(ref v)) = self.response {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReplayOp_oneof_response::make_callable_response(ref v)) = self.response {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReplayOp_oneof_response::run_callable_response(ref v)) = self.response {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReplayOp_oneof_response::release_callable_response(ref v)) = self.response {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.start_time_us = tmp;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.end_time_us = tmp;
                },
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.op = ::std::option::Option::Some(ReplayOp_oneof_op::create_session(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.op = ::std::option::Option::Some(ReplayOp_oneof_op::extend_session(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.op = ::std::option::Option::Some(ReplayOp_oneof_op::partial_run_setup(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.op = ::std::option::Option::Some(ReplayOp_oneof_op::run_step(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.op = ::std::option::Option::Some(ReplayOp_oneof_op::close_session(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.op = ::std::option::Option::Some(ReplayOp_oneof_op::list_devices(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.op = ::std::option::Option::Some(ReplayOp_oneof_op::reset_request(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.op = ::std::option::Option::Some(ReplayOp_oneof_op::make_callable(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.op = ::std::option::Option::Some(ReplayOp_oneof_op::run_callable(is.read_message()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.op = ::std::option::Option::Some(ReplayOp_oneof_op::release_callable(is.read_message()?));
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.op = ::std::option::Option::Some(ReplayOp_oneof_op::new_replay_session(is.read_message()?));
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(ReplayOp_oneof_response::create_session_response(is.read_message()?));
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(ReplayOp_oneof_response::extend_session_response(is.read_message()?));
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(ReplayOp_oneof_response::partial_run_setup_response(is.read_message()?));
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(ReplayOp_oneof_response::run_step_response(is.read_message()?));
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(ReplayOp_oneof_response::close_session_response(is.read_message()?));
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(ReplayOp_oneof_response::list_devices_response(is.read_message()?));
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(ReplayOp_oneof_response::reset_request_response(is.read_message()?));
                },
                28 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(ReplayOp_oneof_response::make_callable_response(is.read_message()?));
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(ReplayOp_oneof_response::run_callable_response(is.read_message()?));
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(ReplayOp_oneof_response::release_callable_response(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.start_time_us != 0. {
            my_size += 10;
        }
        if self.end_time_us != 0. {
            my_size += 10;
        }
        if let ::std::option::Option::Some(ref v) = self.op {
            match v {
                &ReplayOp_oneof_op::create_session(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReplayOp_oneof_op::extend_session(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReplayOp_oneof_op::partial_run_setup(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReplayOp_oneof_op::run_step(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReplayOp_oneof_op::close_session(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReplayOp_oneof_op::list_devices(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReplayOp_oneof_op::reset_request(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReplayOp_oneof_op::make_callable(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReplayOp_oneof_op::run_callable(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReplayOp_oneof_op::release_callable(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReplayOp_oneof_op::new_replay_session(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.response {
            match v {
                &ReplayOp_oneof_response::create_session_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReplayOp_oneof_response::extend_session_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReplayOp_oneof_response::partial_run_setup_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReplayOp_oneof_response::run_step_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReplayOp_oneof_response::close_session_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReplayOp_oneof_response::list_devices_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReplayOp_oneof_response::reset_request_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReplayOp_oneof_response::make_callable_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReplayOp_oneof_response::run_callable_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReplayOp_oneof_response::release_callable_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.start_time_us != 0. {
            os.write_double(31, self.start_time_us)?;
        }
        if self.end_time_us != 0. {
            os.write_double(32, self.end_time_us)?;
        }
        if let ::std::option::Option::Some(ref v) = self.op {
            match v {
                &ReplayOp_oneof_op::create_session(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReplayOp_oneof_op::extend_session(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReplayOp_oneof_op::partial_run_setup(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReplayOp_oneof_op::run_step(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReplayOp_oneof_op::close_session(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReplayOp_oneof_op::list_devices(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReplayOp_oneof_op::reset_request(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReplayOp_oneof_op::make_callable(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReplayOp_oneof_op::run_callable(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReplayOp_oneof_op::release_callable(ref v) => {
                    os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReplayOp_oneof_op::new_replay_session(ref v) => {
                    os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.response {
            match v {
                &ReplayOp_oneof_response::create_session_response(ref v) => {
                    os.write_tag(21, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReplayOp_oneof_response::extend_session_response(ref v) => {
                    os.write_tag(22, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReplayOp_oneof_response::partial_run_setup_response(ref v) => {
                    os.write_tag(23, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReplayOp_oneof_response::run_step_response(ref v) => {
                    os.write_tag(24, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReplayOp_oneof_response::close_session_response(ref v) => {
                    os.write_tag(25, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReplayOp_oneof_response::list_devices_response(ref v) => {
                    os.write_tag(26, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReplayOp_oneof_response::reset_request_response(ref v) => {
                    os.write_tag(27, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReplayOp_oneof_response::make_callable_response(ref v) => {
                    os.write_tag(28, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReplayOp_oneof_response::run_callable_response(ref v) => {
                    os.write_tag(29, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReplayOp_oneof_response::release_callable_response(ref v) => {
                    os.write_tag(30, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReplayOp {
        ReplayOp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "start_time_us",
                |m: &ReplayOp| { &m.start_time_us },
                |m: &mut ReplayOp| { &mut m.start_time_us },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "end_time_us",
                |m: &ReplayOp| { &m.end_time_us },
                |m: &mut ReplayOp| { &mut m.end_time_us },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::master::CreateSessionRequest>(
                "create_session",
                ReplayOp::has_create_session,
                ReplayOp::get_create_session,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::master::ExtendSessionRequest>(
                "extend_session",
                ReplayOp::has_extend_session,
                ReplayOp::get_extend_session,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::master::PartialRunSetupRequest>(
                "partial_run_setup",
                ReplayOp::has_partial_run_setup,
                ReplayOp::get_partial_run_setup,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::master::RunStepRequest>(
                "run_step",
                ReplayOp::has_run_step,
                ReplayOp::get_run_step,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::master::CloseSessionRequest>(
                "close_session",
                ReplayOp::has_close_session,
                ReplayOp::get_close_session,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::master::ListDevicesRequest>(
                "list_devices",
                ReplayOp::has_list_devices,
                ReplayOp::get_list_devices,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::master::ResetRequest>(
                "reset_request",
                ReplayOp::has_reset_request,
                ReplayOp::get_reset_request,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::master::MakeCallableRequest>(
                "make_callable",
                ReplayOp::has_make_callable,
                ReplayOp::get_make_callable,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::master::RunCallableRequest>(
                "run_callable",
                ReplayOp::has_run_callable,
                ReplayOp::get_run_callable,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::master::ReleaseCallableRequest>(
                "release_callable",
                ReplayOp::has_release_callable,
                ReplayOp::get_release_callable,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, NewReplaySession>(
                "new_replay_session",
                ReplayOp::has_new_replay_session,
                ReplayOp::get_new_replay_session,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::master::CreateSessionResponse>(
                "create_session_response",
                ReplayOp::has_create_session_response,
                ReplayOp::get_create_session_response,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::master::ExtendSessionResponse>(
                "extend_session_response",
                ReplayOp::has_extend_session_response,
                ReplayOp::get_extend_session_response,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::master::PartialRunSetupResponse>(
                "partial_run_setup_response",
                ReplayOp::has_partial_run_setup_response,
                ReplayOp::get_partial_run_setup_response,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::master::RunStepResponse>(
                "run_step_response",
                ReplayOp::has_run_step_response,
                ReplayOp::get_run_step_response,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::master::CloseSessionResponse>(
                "close_session_response",
                ReplayOp::has_close_session_response,
                ReplayOp::get_close_session_response,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::master::ListDevicesResponse>(
                "list_devices_response",
                ReplayOp::has_list_devices_response,
                ReplayOp::get_list_devices_response,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::master::ResetResponse>(
                "reset_request_response",
                ReplayOp::has_reset_request_response,
                ReplayOp::get_reset_request_response,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::master::MakeCallableResponse>(
                "make_callable_response",
                ReplayOp::has_make_callable_response,
                ReplayOp::get_make_callable_response,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::master::RunCallableResponse>(
                "run_callable_response",
                ReplayOp::has_run_callable_response,
                ReplayOp::get_run_callable_response,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::master::ReleaseCallableResponse>(
                "release_callable_response",
                ReplayOp::has_release_callable_response,
                ReplayOp::get_release_callable_response,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReplayOp>(
                "ReplayOp",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReplayOp {
        static instance: ::protobuf::rt::LazyV2<ReplayOp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReplayOp::new)
    }
}

impl ::protobuf::Clear for ReplayOp {
    fn clear(&mut self) {
        self.start_time_us = 0.;
        self.end_time_us = 0.;
        self.op = ::std::option::Option::None;
        self.op = ::std::option::Option::None;
        self.op = ::std::option::Option::None;
        self.op = ::std::option::Option::None;
        self.op = ::std::option::Option::None;
        self.op = ::std::option::Option::None;
        self.op = ::std::option::Option::None;
        self.op = ::std::option::Option::None;
        self.op = ::std::option::Option::None;
        self.op = ::std::option::Option::None;
        self.op = ::std::option::Option::None;
        self.response = ::std::option::Option::None;
        self.response = ::std::option::Option::None;
        self.response = ::std::option::Option::None;
        self.response = ::std::option::Option::None;
        self.response = ::std::option::Option::None;
        self.response = ::std::option::Option::None;
        self.response = ::std::option::Option::None;
        self.response = ::std::option::Option::None;
        self.response = ::std::option::Option::None;
        self.response = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReplayOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReplayOp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)tensorflow/core/protobuf/replay_log.proto\x12\ntensorflow\x1a%tensorf\
    low/core/protobuf/master.proto\"t\n\x10NewReplaySession\x129\n\x07device\
    s\x18\x01\x20\x01(\x0b2\x1f.tensorflow.ListDevicesResponseR\x07devices\
    \x12%\n\x0esession_handle\x18\x02\x20\x01(\tR\rsessionHandle\"\xfc\r\n\
    \x08ReplayOp\x12\"\n\rstart_time_us\x18\x1f\x20\x01(\x01R\x0bstartTimeUs\
    \x12\x1e\n\x0bend_time_us\x18\x20\x20\x01(\x01R\tendTimeUs\x12I\n\x0ecre\
    ate_session\x18\x01\x20\x01(\x0b2\x20.tensorflow.CreateSessionRequestH\0\
    R\rcreateSession\x12I\n\x0eextend_session\x18\x02\x20\x01(\x0b2\x20.tens\
    orflow.ExtendSessionRequestH\0R\rextendSession\x12P\n\x11partial_run_set\
    up\x18\x03\x20\x01(\x0b2\".tensorflow.PartialRunSetupRequestH\0R\x0fpart\
    ialRunSetup\x127\n\x08run_step\x18\x04\x20\x01(\x0b2\x1a.tensorflow.RunS\
    tepRequestH\0R\x07runStep\x12F\n\rclose_session\x18\x05\x20\x01(\x0b2\
    \x1f.tensorflow.CloseSessionRequestH\0R\x0ccloseSession\x12C\n\x0clist_d\
    evices\x18\x06\x20\x01(\x0b2\x1e.tensorflow.ListDevicesRequestH\0R\x0bli\
    stDevices\x12?\n\rreset_request\x18\x07\x20\x01(\x0b2\x18.tensorflow.Res\
    etRequestH\0R\x0cresetRequest\x12F\n\rmake_callable\x18\x08\x20\x01(\x0b\
    2\x1f.tensorflow.MakeCallableRequestH\0R\x0cmakeCallable\x12C\n\x0crun_c\
    allable\x18\t\x20\x01(\x0b2\x1e.tensorflow.RunCallableRequestH\0R\x0brun\
    Callable\x12O\n\x10release_callable\x18\n\x20\x01(\x0b2\".tensorflow.Rel\
    easeCallableRequestH\0R\x0freleaseCallable\x12L\n\x12new_replay_session\
    \x18\x0b\x20\x01(\x0b2\x1c.tensorflow.NewReplaySessionH\0R\x10newReplayS\
    ession\x12[\n\x17create_session_response\x18\x15\x20\x01(\x0b2!.tensorfl\
    ow.CreateSessionResponseH\x01R\x15createSessionResponse\x12[\n\x17extend\
    _session_response\x18\x16\x20\x01(\x0b2!.tensorflow.ExtendSessionRespons\
    eH\x01R\x15extendSessionResponse\x12b\n\x1apartial_run_setup_response\
    \x18\x17\x20\x01(\x0b2#.tensorflow.PartialRunSetupResponseH\x01R\x17part\
    ialRunSetupResponse\x12I\n\x11run_step_response\x18\x18\x20\x01(\x0b2\
    \x1b.tensorflow.RunStepResponseH\x01R\x0frunStepResponse\x12X\n\x16close\
    _session_response\x18\x19\x20\x01(\x0b2\x20.tensorflow.CloseSessionRespo\
    nseH\x01R\x14closeSessionResponse\x12U\n\x15list_devices_response\x18\
    \x1a\x20\x01(\x0b2\x1f.tensorflow.ListDevicesResponseH\x01R\x13listDevic\
    esResponse\x12Q\n\x16reset_request_response\x18\x1b\x20\x01(\x0b2\x19.te\
    nsorflow.ResetResponseH\x01R\x14resetRequestResponse\x12X\n\x16make_call\
    able_response\x18\x1c\x20\x01(\x0b2\x20.tensorflow.MakeCallableResponseH\
    \x01R\x14makeCallableResponse\x12U\n\x15run_callable_response\x18\x1d\
    \x20\x01(\x0b2\x1f.tensorflow.RunCallableResponseH\x01R\x13runCallableRe\
    sponse\x12a\n\x19release_callable_response\x18\x1e\x20\x01(\x0b2#.tensor\
    flow.ReleaseCallableResponseH\x01R\x17releaseCallableResponseB\x04\n\x02\
    opB\n\n\x08responseB\x03\xf8\x01\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
