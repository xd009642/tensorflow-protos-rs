// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow/core/profiler/op_profile.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct Profile {
    // message fields
    pub by_category: ::protobuf::SingularPtrField<Node>,
    pub by_program: ::protobuf::SingularPtrField<Node>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Profile {
    fn default() -> &'a Profile {
        <Profile as ::protobuf::Message>::default_instance()
    }
}

impl Profile {
    pub fn new() -> Profile {
        ::std::default::Default::default()
    }

    // .tensorflow.profiler.op_profile.Node by_category = 1;


    pub fn get_by_category(&self) -> &Node {
        self.by_category.as_ref().unwrap_or_else(|| <Node as ::protobuf::Message>::default_instance())
    }
    pub fn clear_by_category(&mut self) {
        self.by_category.clear();
    }

    pub fn has_by_category(&self) -> bool {
        self.by_category.is_some()
    }

    // Param is passed by value, moved
    pub fn set_by_category(&mut self, v: Node) {
        self.by_category = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_by_category(&mut self) -> &mut Node {
        if self.by_category.is_none() {
            self.by_category.set_default();
        }
        self.by_category.as_mut().unwrap()
    }

    // Take field
    pub fn take_by_category(&mut self) -> Node {
        self.by_category.take().unwrap_or_else(|| Node::new())
    }

    // .tensorflow.profiler.op_profile.Node by_program = 4;


    pub fn get_by_program(&self) -> &Node {
        self.by_program.as_ref().unwrap_or_else(|| <Node as ::protobuf::Message>::default_instance())
    }
    pub fn clear_by_program(&mut self) {
        self.by_program.clear();
    }

    pub fn has_by_program(&self) -> bool {
        self.by_program.is_some()
    }

    // Param is passed by value, moved
    pub fn set_by_program(&mut self, v: Node) {
        self.by_program = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_by_program(&mut self) -> &mut Node {
        if self.by_program.is_none() {
            self.by_program.set_default();
        }
        self.by_program.as_mut().unwrap()
    }

    // Take field
    pub fn take_by_program(&mut self) -> Node {
        self.by_program.take().unwrap_or_else(|| Node::new())
    }
}

impl ::protobuf::Message for Profile {
    fn is_initialized(&self) -> bool {
        for v in &self.by_category {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.by_program {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.by_category)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.by_program)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.by_category.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.by_program.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.by_category.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.by_program.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Profile {
        Profile::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Node>>(
                "by_category",
                |m: &Profile| { &m.by_category },
                |m: &mut Profile| { &mut m.by_category },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Node>>(
                "by_program",
                |m: &Profile| { &m.by_program },
                |m: &mut Profile| { &mut m.by_program },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Profile>(
                "Profile",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Profile {
        static instance: ::protobuf::rt::LazyV2<Profile> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Profile::new)
    }
}

impl ::protobuf::Clear for Profile {
    fn clear(&mut self) {
        self.by_category.clear();
        self.by_program.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Profile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Profile {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Node {
    // message fields
    pub name: ::std::string::String,
    pub metrics: ::protobuf::SingularPtrField<Metrics>,
    pub children: ::protobuf::RepeatedField<Node>,
    pub num_children: i32,
    // message oneof groups
    pub contents: ::std::option::Option<Node_oneof_contents>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Node {
    fn default() -> &'a Node {
        <Node as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Node_oneof_contents {
    category(Node_InstructionCategory),
    xla(Node_XLAInstruction),
}

impl Node {
    pub fn new() -> Node {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .tensorflow.profiler.op_profile.Metrics metrics = 2;


    pub fn get_metrics(&self) -> &Metrics {
        self.metrics.as_ref().unwrap_or_else(|| <Metrics as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metrics(&mut self) {
        self.metrics.clear();
    }

    pub fn has_metrics(&self) -> bool {
        self.metrics.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metrics(&mut self, v: Metrics) {
        self.metrics = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metrics(&mut self) -> &mut Metrics {
        if self.metrics.is_none() {
            self.metrics.set_default();
        }
        self.metrics.as_mut().unwrap()
    }

    // Take field
    pub fn take_metrics(&mut self) -> Metrics {
        self.metrics.take().unwrap_or_else(|| Metrics::new())
    }

    // repeated .tensorflow.profiler.op_profile.Node children = 3;


    pub fn get_children(&self) -> &[Node] {
        &self.children
    }
    pub fn clear_children(&mut self) {
        self.children.clear();
    }

    // Param is passed by value, moved
    pub fn set_children(&mut self, v: ::protobuf::RepeatedField<Node>) {
        self.children = v;
    }

    // Mutable pointer to the field.
    pub fn mut_children(&mut self) -> &mut ::protobuf::RepeatedField<Node> {
        &mut self.children
    }

    // Take field
    pub fn take_children(&mut self) -> ::protobuf::RepeatedField<Node> {
        ::std::mem::replace(&mut self.children, ::protobuf::RepeatedField::new())
    }

    // .tensorflow.profiler.op_profile.Node.InstructionCategory category = 4;


    pub fn get_category(&self) -> &Node_InstructionCategory {
        match self.contents {
            ::std::option::Option::Some(Node_oneof_contents::category(ref v)) => v,
            _ => <Node_InstructionCategory as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_category(&mut self) {
        self.contents = ::std::option::Option::None;
    }

    pub fn has_category(&self) -> bool {
        match self.contents {
            ::std::option::Option::Some(Node_oneof_contents::category(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_category(&mut self, v: Node_InstructionCategory) {
        self.contents = ::std::option::Option::Some(Node_oneof_contents::category(v))
    }

    // Mutable pointer to the field.
    pub fn mut_category(&mut self) -> &mut Node_InstructionCategory {
        if let ::std::option::Option::Some(Node_oneof_contents::category(_)) = self.contents {
        } else {
            self.contents = ::std::option::Option::Some(Node_oneof_contents::category(Node_InstructionCategory::new()));
        }
        match self.contents {
            ::std::option::Option::Some(Node_oneof_contents::category(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_category(&mut self) -> Node_InstructionCategory {
        if self.has_category() {
            match self.contents.take() {
                ::std::option::Option::Some(Node_oneof_contents::category(v)) => v,
                _ => panic!(),
            }
        } else {
            Node_InstructionCategory::new()
        }
    }

    // .tensorflow.profiler.op_profile.Node.XLAInstruction xla = 5;


    pub fn get_xla(&self) -> &Node_XLAInstruction {
        match self.contents {
            ::std::option::Option::Some(Node_oneof_contents::xla(ref v)) => v,
            _ => <Node_XLAInstruction as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_xla(&mut self) {
        self.contents = ::std::option::Option::None;
    }

    pub fn has_xla(&self) -> bool {
        match self.contents {
            ::std::option::Option::Some(Node_oneof_contents::xla(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_xla(&mut self, v: Node_XLAInstruction) {
        self.contents = ::std::option::Option::Some(Node_oneof_contents::xla(v))
    }

    // Mutable pointer to the field.
    pub fn mut_xla(&mut self) -> &mut Node_XLAInstruction {
        if let ::std::option::Option::Some(Node_oneof_contents::xla(_)) = self.contents {
        } else {
            self.contents = ::std::option::Option::Some(Node_oneof_contents::xla(Node_XLAInstruction::new()));
        }
        match self.contents {
            ::std::option::Option::Some(Node_oneof_contents::xla(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_xla(&mut self) -> Node_XLAInstruction {
        if self.has_xla() {
            match self.contents.take() {
                ::std::option::Option::Some(Node_oneof_contents::xla(v)) => v,
                _ => panic!(),
            }
        } else {
            Node_XLAInstruction::new()
        }
    }

    // int32 num_children = 6;


    pub fn get_num_children(&self) -> i32 {
        self.num_children
    }
    pub fn clear_num_children(&mut self) {
        self.num_children = 0;
    }

    // Param is passed by value, moved
    pub fn set_num_children(&mut self, v: i32) {
        self.num_children = v;
    }
}

impl ::protobuf::Message for Node {
    fn is_initialized(&self) -> bool {
        for v in &self.metrics {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.children {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(Node_oneof_contents::category(ref v)) = self.contents {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Node_oneof_contents::xla(ref v)) = self.contents {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metrics)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.children)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.contents = ::std::option::Option::Some(Node_oneof_contents::category(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.contents = ::std::option::Option::Some(Node_oneof_contents::xla(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.num_children = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(ref v) = self.metrics.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.children {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.num_children != 0 {
            my_size += ::protobuf::rt::value_size(6, self.num_children, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.contents {
            match v {
                &Node_oneof_contents::category(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Node_oneof_contents::xla(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(ref v) = self.metrics.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.children {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.num_children != 0 {
            os.write_int32(6, self.num_children)?;
        }
        if let ::std::option::Option::Some(ref v) = self.contents {
            match v {
                &Node_oneof_contents::category(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Node_oneof_contents::xla(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Node {
        Node::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Node| { &m.name },
                |m: &mut Node| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Metrics>>(
                "metrics",
                |m: &Node| { &m.metrics },
                |m: &mut Node| { &mut m.metrics },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Node>>(
                "children",
                |m: &Node| { &m.children },
                |m: &mut Node| { &mut m.children },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Node_InstructionCategory>(
                "category",
                Node::has_category,
                Node::get_category,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Node_XLAInstruction>(
                "xla",
                Node::has_xla,
                Node::get_xla,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "num_children",
                |m: &Node| { &m.num_children },
                |m: &mut Node| { &mut m.num_children },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Node>(
                "Node",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Node {
        static instance: ::protobuf::rt::LazyV2<Node> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Node::new)
    }
}

impl ::protobuf::Clear for Node {
    fn clear(&mut self) {
        self.name.clear();
        self.metrics.clear();
        self.children.clear();
        self.contents = ::std::option::Option::None;
        self.contents = ::std::option::Option::None;
        self.num_children = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Node {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Node {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Node_InstructionCategory {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Node_InstructionCategory {
    fn default() -> &'a Node_InstructionCategory {
        <Node_InstructionCategory as ::protobuf::Message>::default_instance()
    }
}

impl Node_InstructionCategory {
    pub fn new() -> Node_InstructionCategory {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Node_InstructionCategory {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Node_InstructionCategory {
        Node_InstructionCategory::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Node_InstructionCategory>(
                "Node.InstructionCategory",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Node_InstructionCategory {
        static instance: ::protobuf::rt::LazyV2<Node_InstructionCategory> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Node_InstructionCategory::new)
    }
}

impl ::protobuf::Clear for Node_InstructionCategory {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Node_InstructionCategory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Node_InstructionCategory {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Node_XLAInstruction {
    // message fields
    pub op: ::std::string::String,
    pub expression: ::std::string::String,
    pub provenance: ::std::string::String,
    pub category: ::std::string::String,
    pub layout: ::protobuf::SingularPtrField<Node_XLAInstruction_LayoutAnalysis>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Node_XLAInstruction {
    fn default() -> &'a Node_XLAInstruction {
        <Node_XLAInstruction as ::protobuf::Message>::default_instance()
    }
}

impl Node_XLAInstruction {
    pub fn new() -> Node_XLAInstruction {
        ::std::default::Default::default()
    }

    // string op = 1;


    pub fn get_op(&self) -> &str {
        &self.op
    }
    pub fn clear_op(&mut self) {
        self.op.clear();
    }

    // Param is passed by value, moved
    pub fn set_op(&mut self, v: ::std::string::String) {
        self.op = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_op(&mut self) -> &mut ::std::string::String {
        &mut self.op
    }

    // Take field
    pub fn take_op(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.op, ::std::string::String::new())
    }

    // string expression = 2;


    pub fn get_expression(&self) -> &str {
        &self.expression
    }
    pub fn clear_expression(&mut self) {
        self.expression.clear();
    }

    // Param is passed by value, moved
    pub fn set_expression(&mut self, v: ::std::string::String) {
        self.expression = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_expression(&mut self) -> &mut ::std::string::String {
        &mut self.expression
    }

    // Take field
    pub fn take_expression(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.expression, ::std::string::String::new())
    }

    // string provenance = 3;


    pub fn get_provenance(&self) -> &str {
        &self.provenance
    }
    pub fn clear_provenance(&mut self) {
        self.provenance.clear();
    }

    // Param is passed by value, moved
    pub fn set_provenance(&mut self, v: ::std::string::String) {
        self.provenance = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_provenance(&mut self) -> &mut ::std::string::String {
        &mut self.provenance
    }

    // Take field
    pub fn take_provenance(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.provenance, ::std::string::String::new())
    }

    // string category = 4;


    pub fn get_category(&self) -> &str {
        &self.category
    }
    pub fn clear_category(&mut self) {
        self.category.clear();
    }

    // Param is passed by value, moved
    pub fn set_category(&mut self, v: ::std::string::String) {
        self.category = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_category(&mut self) -> &mut ::std::string::String {
        &mut self.category
    }

    // Take field
    pub fn take_category(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.category, ::std::string::String::new())
    }

    // .tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis layout = 5;


    pub fn get_layout(&self) -> &Node_XLAInstruction_LayoutAnalysis {
        self.layout.as_ref().unwrap_or_else(|| <Node_XLAInstruction_LayoutAnalysis as ::protobuf::Message>::default_instance())
    }
    pub fn clear_layout(&mut self) {
        self.layout.clear();
    }

    pub fn has_layout(&self) -> bool {
        self.layout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_layout(&mut self, v: Node_XLAInstruction_LayoutAnalysis) {
        self.layout = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_layout(&mut self) -> &mut Node_XLAInstruction_LayoutAnalysis {
        if self.layout.is_none() {
            self.layout.set_default();
        }
        self.layout.as_mut().unwrap()
    }

    // Take field
    pub fn take_layout(&mut self) -> Node_XLAInstruction_LayoutAnalysis {
        self.layout.take().unwrap_or_else(|| Node_XLAInstruction_LayoutAnalysis::new())
    }
}

impl ::protobuf::Message for Node_XLAInstruction {
    fn is_initialized(&self) -> bool {
        for v in &self.layout {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.op)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.expression)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.provenance)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.category)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.layout)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.op.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.op);
        }
        if !self.expression.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.expression);
        }
        if !self.provenance.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.provenance);
        }
        if !self.category.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.category);
        }
        if let Some(ref v) = self.layout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.op.is_empty() {
            os.write_string(1, &self.op)?;
        }
        if !self.expression.is_empty() {
            os.write_string(2, &self.expression)?;
        }
        if !self.provenance.is_empty() {
            os.write_string(3, &self.provenance)?;
        }
        if !self.category.is_empty() {
            os.write_string(4, &self.category)?;
        }
        if let Some(ref v) = self.layout.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Node_XLAInstruction {
        Node_XLAInstruction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "op",
                |m: &Node_XLAInstruction| { &m.op },
                |m: &mut Node_XLAInstruction| { &mut m.op },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "expression",
                |m: &Node_XLAInstruction| { &m.expression },
                |m: &mut Node_XLAInstruction| { &mut m.expression },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "provenance",
                |m: &Node_XLAInstruction| { &m.provenance },
                |m: &mut Node_XLAInstruction| { &mut m.provenance },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "category",
                |m: &Node_XLAInstruction| { &m.category },
                |m: &mut Node_XLAInstruction| { &mut m.category },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Node_XLAInstruction_LayoutAnalysis>>(
                "layout",
                |m: &Node_XLAInstruction| { &m.layout },
                |m: &mut Node_XLAInstruction| { &mut m.layout },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Node_XLAInstruction>(
                "Node.XLAInstruction",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Node_XLAInstruction {
        static instance: ::protobuf::rt::LazyV2<Node_XLAInstruction> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Node_XLAInstruction::new)
    }
}

impl ::protobuf::Clear for Node_XLAInstruction {
    fn clear(&mut self) {
        self.op.clear();
        self.expression.clear();
        self.provenance.clear();
        self.category.clear();
        self.layout.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Node_XLAInstruction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Node_XLAInstruction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Node_XLAInstruction_LayoutAnalysis {
    // message fields
    pub dimensions: ::protobuf::RepeatedField<Node_XLAInstruction_LayoutAnalysis_Dimension>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Node_XLAInstruction_LayoutAnalysis {
    fn default() -> &'a Node_XLAInstruction_LayoutAnalysis {
        <Node_XLAInstruction_LayoutAnalysis as ::protobuf::Message>::default_instance()
    }
}

impl Node_XLAInstruction_LayoutAnalysis {
    pub fn new() -> Node_XLAInstruction_LayoutAnalysis {
        ::std::default::Default::default()
    }

    // repeated .tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis.Dimension dimensions = 1;


    pub fn get_dimensions(&self) -> &[Node_XLAInstruction_LayoutAnalysis_Dimension] {
        &self.dimensions
    }
    pub fn clear_dimensions(&mut self) {
        self.dimensions.clear();
    }

    // Param is passed by value, moved
    pub fn set_dimensions(&mut self, v: ::protobuf::RepeatedField<Node_XLAInstruction_LayoutAnalysis_Dimension>) {
        self.dimensions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_dimensions(&mut self) -> &mut ::protobuf::RepeatedField<Node_XLAInstruction_LayoutAnalysis_Dimension> {
        &mut self.dimensions
    }

    // Take field
    pub fn take_dimensions(&mut self) -> ::protobuf::RepeatedField<Node_XLAInstruction_LayoutAnalysis_Dimension> {
        ::std::mem::replace(&mut self.dimensions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Node_XLAInstruction_LayoutAnalysis {
    fn is_initialized(&self) -> bool {
        for v in &self.dimensions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.dimensions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.dimensions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.dimensions {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Node_XLAInstruction_LayoutAnalysis {
        Node_XLAInstruction_LayoutAnalysis::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Node_XLAInstruction_LayoutAnalysis_Dimension>>(
                "dimensions",
                |m: &Node_XLAInstruction_LayoutAnalysis| { &m.dimensions },
                |m: &mut Node_XLAInstruction_LayoutAnalysis| { &mut m.dimensions },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Node_XLAInstruction_LayoutAnalysis>(
                "Node.XLAInstruction.LayoutAnalysis",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Node_XLAInstruction_LayoutAnalysis {
        static instance: ::protobuf::rt::LazyV2<Node_XLAInstruction_LayoutAnalysis> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Node_XLAInstruction_LayoutAnalysis::new)
    }
}

impl ::protobuf::Clear for Node_XLAInstruction_LayoutAnalysis {
    fn clear(&mut self) {
        self.dimensions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Node_XLAInstruction_LayoutAnalysis {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Node_XLAInstruction_LayoutAnalysis {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Node_XLAInstruction_LayoutAnalysis_Dimension {
    // message fields
    pub size: i32,
    pub alignment: i32,
    pub semantics: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Node_XLAInstruction_LayoutAnalysis_Dimension {
    fn default() -> &'a Node_XLAInstruction_LayoutAnalysis_Dimension {
        <Node_XLAInstruction_LayoutAnalysis_Dimension as ::protobuf::Message>::default_instance()
    }
}

impl Node_XLAInstruction_LayoutAnalysis_Dimension {
    pub fn new() -> Node_XLAInstruction_LayoutAnalysis_Dimension {
        ::std::default::Default::default()
    }

    // int32 size = 1;


    pub fn get_size(&self) -> i32 {
        self.size
    }
    pub fn clear_size(&mut self) {
        self.size = 0;
    }

    // Param is passed by value, moved
    pub fn set_size(&mut self, v: i32) {
        self.size = v;
    }

    // int32 alignment = 2;


    pub fn get_alignment(&self) -> i32 {
        self.alignment
    }
    pub fn clear_alignment(&mut self) {
        self.alignment = 0;
    }

    // Param is passed by value, moved
    pub fn set_alignment(&mut self, v: i32) {
        self.alignment = v;
    }

    // string semantics = 3;


    pub fn get_semantics(&self) -> &str {
        &self.semantics
    }
    pub fn clear_semantics(&mut self) {
        self.semantics.clear();
    }

    // Param is passed by value, moved
    pub fn set_semantics(&mut self, v: ::std::string::String) {
        self.semantics = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_semantics(&mut self) -> &mut ::std::string::String {
        &mut self.semantics
    }

    // Take field
    pub fn take_semantics(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.semantics, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Node_XLAInstruction_LayoutAnalysis_Dimension {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.size = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.alignment = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.semantics)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.size != 0 {
            my_size += ::protobuf::rt::value_size(1, self.size, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.alignment != 0 {
            my_size += ::protobuf::rt::value_size(2, self.alignment, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.semantics.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.semantics);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.size != 0 {
            os.write_int32(1, self.size)?;
        }
        if self.alignment != 0 {
            os.write_int32(2, self.alignment)?;
        }
        if !self.semantics.is_empty() {
            os.write_string(3, &self.semantics)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Node_XLAInstruction_LayoutAnalysis_Dimension {
        Node_XLAInstruction_LayoutAnalysis_Dimension::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "size",
                |m: &Node_XLAInstruction_LayoutAnalysis_Dimension| { &m.size },
                |m: &mut Node_XLAInstruction_LayoutAnalysis_Dimension| { &mut m.size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "alignment",
                |m: &Node_XLAInstruction_LayoutAnalysis_Dimension| { &m.alignment },
                |m: &mut Node_XLAInstruction_LayoutAnalysis_Dimension| { &mut m.alignment },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "semantics",
                |m: &Node_XLAInstruction_LayoutAnalysis_Dimension| { &m.semantics },
                |m: &mut Node_XLAInstruction_LayoutAnalysis_Dimension| { &mut m.semantics },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Node_XLAInstruction_LayoutAnalysis_Dimension>(
                "Node.XLAInstruction.LayoutAnalysis.Dimension",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Node_XLAInstruction_LayoutAnalysis_Dimension {
        static instance: ::protobuf::rt::LazyV2<Node_XLAInstruction_LayoutAnalysis_Dimension> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Node_XLAInstruction_LayoutAnalysis_Dimension::new)
    }
}

impl ::protobuf::Clear for Node_XLAInstruction_LayoutAnalysis_Dimension {
    fn clear(&mut self) {
        self.size = 0;
        self.alignment = 0;
        self.semantics.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Node_XLAInstruction_LayoutAnalysis_Dimension {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Node_XLAInstruction_LayoutAnalysis_Dimension {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Metrics {
    // message fields
    pub time: f64,
    pub flops: f64,
    pub memory_bandwidth: f64,
    pub raw_time: f64,
    pub raw_flops: f64,
    pub raw_bytes_accessed: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Metrics {
    fn default() -> &'a Metrics {
        <Metrics as ::protobuf::Message>::default_instance()
    }
}

impl Metrics {
    pub fn new() -> Metrics {
        ::std::default::Default::default()
    }

    // double time = 1;


    pub fn get_time(&self) -> f64 {
        self.time
    }
    pub fn clear_time(&mut self) {
        self.time = 0.;
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: f64) {
        self.time = v;
    }

    // double flops = 2;


    pub fn get_flops(&self) -> f64 {
        self.flops
    }
    pub fn clear_flops(&mut self) {
        self.flops = 0.;
    }

    // Param is passed by value, moved
    pub fn set_flops(&mut self, v: f64) {
        self.flops = v;
    }

    // double memory_bandwidth = 3;


    pub fn get_memory_bandwidth(&self) -> f64 {
        self.memory_bandwidth
    }
    pub fn clear_memory_bandwidth(&mut self) {
        self.memory_bandwidth = 0.;
    }

    // Param is passed by value, moved
    pub fn set_memory_bandwidth(&mut self, v: f64) {
        self.memory_bandwidth = v;
    }

    // double raw_time = 11;


    pub fn get_raw_time(&self) -> f64 {
        self.raw_time
    }
    pub fn clear_raw_time(&mut self) {
        self.raw_time = 0.;
    }

    // Param is passed by value, moved
    pub fn set_raw_time(&mut self, v: f64) {
        self.raw_time = v;
    }

    // double raw_flops = 12;


    pub fn get_raw_flops(&self) -> f64 {
        self.raw_flops
    }
    pub fn clear_raw_flops(&mut self) {
        self.raw_flops = 0.;
    }

    // Param is passed by value, moved
    pub fn set_raw_flops(&mut self, v: f64) {
        self.raw_flops = v;
    }

    // double raw_bytes_accessed = 13;


    pub fn get_raw_bytes_accessed(&self) -> f64 {
        self.raw_bytes_accessed
    }
    pub fn clear_raw_bytes_accessed(&mut self) {
        self.raw_bytes_accessed = 0.;
    }

    // Param is passed by value, moved
    pub fn set_raw_bytes_accessed(&mut self, v: f64) {
        self.raw_bytes_accessed = v;
    }
}

impl ::protobuf::Message for Metrics {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.time = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.flops = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.memory_bandwidth = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.raw_time = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.raw_flops = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.raw_bytes_accessed = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.time != 0. {
            my_size += 9;
        }
        if self.flops != 0. {
            my_size += 9;
        }
        if self.memory_bandwidth != 0. {
            my_size += 9;
        }
        if self.raw_time != 0. {
            my_size += 9;
        }
        if self.raw_flops != 0. {
            my_size += 9;
        }
        if self.raw_bytes_accessed != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.time != 0. {
            os.write_double(1, self.time)?;
        }
        if self.flops != 0. {
            os.write_double(2, self.flops)?;
        }
        if self.memory_bandwidth != 0. {
            os.write_double(3, self.memory_bandwidth)?;
        }
        if self.raw_time != 0. {
            os.write_double(11, self.raw_time)?;
        }
        if self.raw_flops != 0. {
            os.write_double(12, self.raw_flops)?;
        }
        if self.raw_bytes_accessed != 0. {
            os.write_double(13, self.raw_bytes_accessed)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Metrics {
        Metrics::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "time",
                |m: &Metrics| { &m.time },
                |m: &mut Metrics| { &mut m.time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "flops",
                |m: &Metrics| { &m.flops },
                |m: &mut Metrics| { &mut m.flops },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "memory_bandwidth",
                |m: &Metrics| { &m.memory_bandwidth },
                |m: &mut Metrics| { &mut m.memory_bandwidth },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "raw_time",
                |m: &Metrics| { &m.raw_time },
                |m: &mut Metrics| { &mut m.raw_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "raw_flops",
                |m: &Metrics| { &m.raw_flops },
                |m: &mut Metrics| { &mut m.raw_flops },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "raw_bytes_accessed",
                |m: &Metrics| { &m.raw_bytes_accessed },
                |m: &mut Metrics| { &mut m.raw_bytes_accessed },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Metrics>(
                "Metrics",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Metrics {
        static instance: ::protobuf::rt::LazyV2<Metrics> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Metrics::new)
    }
}

impl ::protobuf::Clear for Metrics {
    fn clear(&mut self) {
        self.time = 0.;
        self.flops = 0.;
        self.memory_bandwidth = 0.;
        self.raw_time = 0.;
        self.raw_flops = 0.;
        self.raw_bytes_accessed = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Metrics {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Metrics {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)tensorflow/core/profiler/op_profile.proto\x12\x1etensorflow.profiler.\
    op_profile\"\xc4\x01\n\x07Profile\x12E\n\x0bby_category\x18\x01\x20\x01(\
    \x0b2$.tensorflow.profiler.op_profile.NodeR\nbyCategory\x12C\n\nby_progr\
    am\x18\x04\x20\x01(\x0b2$.tensorflow.profiler.op_profile.NodeR\tbyProgra\
    mJ\x04\x08\x02\x10\x03J\x04\x08\x03\x10\x04R\x14by_program_structureR\
    \x0bper_program\"\xbf\x06\n\x04Node\x12\x12\n\x04name\x18\x01\x20\x01(\t\
    R\x04name\x12A\n\x07metrics\x18\x02\x20\x01(\x0b2'.tensorflow.profiler.o\
    p_profile.MetricsR\x07metrics\x12@\n\x08children\x18\x03\x20\x03(\x0b2$.\
    tensorflow.profiler.op_profile.NodeR\x08children\x12V\n\x08category\x18\
    \x04\x20\x01(\x0b28.tensorflow.profiler.op_profile.Node.InstructionCateg\
    oryH\0R\x08category\x12G\n\x03xla\x18\x05\x20\x01(\x0b23.tensorflow.prof\
    iler.op_profile.Node.XLAInstructionH\0R\x03xla\x12!\n\x0cnum_children\
    \x18\x06\x20\x01(\x05R\x0bnumChildren\x1a\x15\n\x13InstructionCategory\
    \x1a\xb6\x03\n\x0eXLAInstruction\x12\x0e\n\x02op\x18\x01\x20\x01(\tR\x02\
    op\x12\x1e\n\nexpression\x18\x02\x20\x01(\tR\nexpression\x12\x1e\n\nprov\
    enance\x18\x03\x20\x01(\tR\nprovenance\x12\x1a\n\x08category\x18\x04\x20\
    \x01(\tR\x08category\x12Z\n\x06layout\x18\x05\x20\x01(\x0b2B.tensorflow.\
    profiler.op_profile.Node.XLAInstruction.LayoutAnalysisR\x06layout\x1a\
    \xdb\x01\n\x0eLayoutAnalysis\x12l\n\ndimensions\x18\x01\x20\x03(\x0b2L.t\
    ensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis.Dimensi\
    onR\ndimensions\x1a[\n\tDimension\x12\x12\n\x04size\x18\x01\x20\x01(\x05\
    R\x04size\x12\x1c\n\talignment\x18\x02\x20\x01(\x05R\talignment\x12\x1c\
    \n\tsemantics\x18\x03\x20\x01(\tR\tsemanticsB\n\n\x08contents\"\xc4\x01\
    \n\x07Metrics\x12\x12\n\x04time\x18\x01\x20\x01(\x01R\x04time\x12\x14\n\
    \x05flops\x18\x02\x20\x01(\x01R\x05flops\x12)\n\x10memory_bandwidth\x18\
    \x03\x20\x01(\x01R\x0fmemoryBandwidth\x12\x19\n\x08raw_time\x18\x0b\x20\
    \x01(\x01R\x07rawTime\x12\x1b\n\traw_flops\x18\x0c\x20\x01(\x01R\x08rawF\
    lops\x12,\n\x12raw_bytes_accessed\x18\r\x20\x01(\x01R\x10rawBytesAccesse\
    db\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
