// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow/stream_executor/dnn.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct TensorDescriptorProto {
    // message fields
    pub dimensions: ::std::vec::Vec<i64>,
    pub data_type: DataType,
    // message oneof groups
    pub layout_oneof: ::std::option::Option<TensorDescriptorProto_oneof_layout_oneof>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TensorDescriptorProto {
    fn default() -> &'a TensorDescriptorProto {
        <TensorDescriptorProto as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum TensorDescriptorProto_oneof_layout_oneof {
    data_layout(DataLayout),
    filter_layout(FilterLayout),
}

impl TensorDescriptorProto {
    pub fn new() -> TensorDescriptorProto {
        ::std::default::Default::default()
    }

    // repeated int64 dimensions = 1;


    pub fn get_dimensions(&self) -> &[i64] {
        &self.dimensions
    }
    pub fn clear_dimensions(&mut self) {
        self.dimensions.clear();
    }

    // Param is passed by value, moved
    pub fn set_dimensions(&mut self, v: ::std::vec::Vec<i64>) {
        self.dimensions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_dimensions(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.dimensions
    }

    // Take field
    pub fn take_dimensions(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.dimensions, ::std::vec::Vec::new())
    }

    // .stream_executor.dnn.DataType data_type = 2;


    pub fn get_data_type(&self) -> DataType {
        self.data_type
    }
    pub fn clear_data_type(&mut self) {
        self.data_type = DataType::kFloat;
    }

    // Param is passed by value, moved
    pub fn set_data_type(&mut self, v: DataType) {
        self.data_type = v;
    }

    // .stream_executor.dnn.DataLayout data_layout = 3;


    pub fn get_data_layout(&self) -> DataLayout {
        match self.layout_oneof {
            ::std::option::Option::Some(TensorDescriptorProto_oneof_layout_oneof::data_layout(v)) => v,
            _ => DataLayout::kYXDepthBatch,
        }
    }
    pub fn clear_data_layout(&mut self) {
        self.layout_oneof = ::std::option::Option::None;
    }

    pub fn has_data_layout(&self) -> bool {
        match self.layout_oneof {
            ::std::option::Option::Some(TensorDescriptorProto_oneof_layout_oneof::data_layout(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_data_layout(&mut self, v: DataLayout) {
        self.layout_oneof = ::std::option::Option::Some(TensorDescriptorProto_oneof_layout_oneof::data_layout(v))
    }

    // .stream_executor.dnn.FilterLayout filter_layout = 4;


    pub fn get_filter_layout(&self) -> FilterLayout {
        match self.layout_oneof {
            ::std::option::Option::Some(TensorDescriptorProto_oneof_layout_oneof::filter_layout(v)) => v,
            _ => FilterLayout::kOutputInputYX,
        }
    }
    pub fn clear_filter_layout(&mut self) {
        self.layout_oneof = ::std::option::Option::None;
    }

    pub fn has_filter_layout(&self) -> bool {
        match self.layout_oneof {
            ::std::option::Option::Some(TensorDescriptorProto_oneof_layout_oneof::filter_layout(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_filter_layout(&mut self, v: FilterLayout) {
        self.layout_oneof = ::std::option::Option::Some(TensorDescriptorProto_oneof_layout_oneof::filter_layout(v))
    }
}

impl ::protobuf::Message for TensorDescriptorProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_int64_into(wire_type, is, &mut self.dimensions)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.data_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.layout_oneof = ::std::option::Option::Some(TensorDescriptorProto_oneof_layout_oneof::data_layout(is.read_enum()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.layout_oneof = ::std::option::Option::Some(TensorDescriptorProto_oneof_layout_oneof::filter_layout(is.read_enum()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.dimensions {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.data_type != DataType::kFloat {
            my_size += ::protobuf::rt::enum_size(2, self.data_type);
        }
        if let ::std::option::Option::Some(ref v) = self.layout_oneof {
            match v {
                &TensorDescriptorProto_oneof_layout_oneof::data_layout(v) => {
                    my_size += ::protobuf::rt::enum_size(3, v);
                },
                &TensorDescriptorProto_oneof_layout_oneof::filter_layout(v) => {
                    my_size += ::protobuf::rt::enum_size(4, v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.dimensions {
            os.write_int64(1, *v)?;
        };
        if self.data_type != DataType::kFloat {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.data_type))?;
        }
        if let ::std::option::Option::Some(ref v) = self.layout_oneof {
            match v {
                &TensorDescriptorProto_oneof_layout_oneof::data_layout(v) => {
                    os.write_enum(3, ::protobuf::ProtobufEnum::value(&v))?;
                },
                &TensorDescriptorProto_oneof_layout_oneof::filter_layout(v) => {
                    os.write_enum(4, ::protobuf::ProtobufEnum::value(&v))?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TensorDescriptorProto {
        TensorDescriptorProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "dimensions",
                |m: &TensorDescriptorProto| { &m.dimensions },
                |m: &mut TensorDescriptorProto| { &mut m.dimensions },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<DataType>>(
                "data_type",
                |m: &TensorDescriptorProto| { &m.data_type },
                |m: &mut TensorDescriptorProto| { &mut m.data_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor::<_, DataLayout>(
                "data_layout",
                TensorDescriptorProto::has_data_layout,
                TensorDescriptorProto::get_data_layout,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor::<_, FilterLayout>(
                "filter_layout",
                TensorDescriptorProto::has_filter_layout,
                TensorDescriptorProto::get_filter_layout,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TensorDescriptorProto>(
                "TensorDescriptorProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TensorDescriptorProto {
        static instance: ::protobuf::rt::LazyV2<TensorDescriptorProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TensorDescriptorProto::new)
    }
}

impl ::protobuf::Clear for TensorDescriptorProto {
    fn clear(&mut self) {
        self.dimensions.clear();
        self.data_type = DataType::kFloat;
        self.layout_oneof = ::std::option::Option::None;
        self.layout_oneof = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TensorDescriptorProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TensorDescriptorProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AlgorithmProto {
    // message fields
    pub algo_id: i64,
    pub math_type: AlgorithmProto_MathType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AlgorithmProto {
    fn default() -> &'a AlgorithmProto {
        <AlgorithmProto as ::protobuf::Message>::default_instance()
    }
}

impl AlgorithmProto {
    pub fn new() -> AlgorithmProto {
        ::std::default::Default::default()
    }

    // int64 algo_id = 1;


    pub fn get_algo_id(&self) -> i64 {
        self.algo_id
    }
    pub fn clear_algo_id(&mut self) {
        self.algo_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_algo_id(&mut self, v: i64) {
        self.algo_id = v;
    }

    // .stream_executor.dnn.AlgorithmProto.MathType math_type = 2;


    pub fn get_math_type(&self) -> AlgorithmProto_MathType {
        self.math_type
    }
    pub fn clear_math_type(&mut self) {
        self.math_type = AlgorithmProto_MathType::DEFAULT_MATH;
    }

    // Param is passed by value, moved
    pub fn set_math_type(&mut self, v: AlgorithmProto_MathType) {
        self.math_type = v;
    }
}

impl ::protobuf::Message for AlgorithmProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.algo_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.math_type, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.algo_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.algo_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.math_type != AlgorithmProto_MathType::DEFAULT_MATH {
            my_size += ::protobuf::rt::enum_size(2, self.math_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.algo_id != 0 {
            os.write_int64(1, self.algo_id)?;
        }
        if self.math_type != AlgorithmProto_MathType::DEFAULT_MATH {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.math_type))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AlgorithmProto {
        AlgorithmProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "algo_id",
                |m: &AlgorithmProto| { &m.algo_id },
                |m: &mut AlgorithmProto| { &mut m.algo_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<AlgorithmProto_MathType>>(
                "math_type",
                |m: &AlgorithmProto| { &m.math_type },
                |m: &mut AlgorithmProto| { &mut m.math_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AlgorithmProto>(
                "AlgorithmProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AlgorithmProto {
        static instance: ::protobuf::rt::LazyV2<AlgorithmProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AlgorithmProto::new)
    }
}

impl ::protobuf::Clear for AlgorithmProto {
    fn clear(&mut self) {
        self.algo_id = 0;
        self.math_type = AlgorithmProto_MathType::DEFAULT_MATH;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AlgorithmProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AlgorithmProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum AlgorithmProto_MathType {
    DEFAULT_MATH = 0,
    TENSOR_OP_MATH = 1,
}

impl ::protobuf::ProtobufEnum for AlgorithmProto_MathType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<AlgorithmProto_MathType> {
        match value {
            0 => ::std::option::Option::Some(AlgorithmProto_MathType::DEFAULT_MATH),
            1 => ::std::option::Option::Some(AlgorithmProto_MathType::TENSOR_OP_MATH),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [AlgorithmProto_MathType] = &[
            AlgorithmProto_MathType::DEFAULT_MATH,
            AlgorithmProto_MathType::TENSOR_OP_MATH,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<AlgorithmProto_MathType>("AlgorithmProto.MathType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for AlgorithmProto_MathType {
}

impl ::std::default::Default for AlgorithmProto_MathType {
    fn default() -> Self {
        AlgorithmProto_MathType::DEFAULT_MATH
    }
}

impl ::protobuf::reflect::ProtobufValue for AlgorithmProto_MathType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConvolutionDescriptorProto {
    // message fields
    pub paddings: ::std::vec::Vec<i64>,
    pub strides: ::std::vec::Vec<i64>,
    pub dilations: ::std::vec::Vec<i64>,
    pub compute_mode: DataType,
    pub group_count: i32,
    pub convolution_mode: ConvolutionMode,
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConvolutionDescriptorProto {
    fn default() -> &'a ConvolutionDescriptorProto {
        <ConvolutionDescriptorProto as ::protobuf::Message>::default_instance()
    }
}

impl ConvolutionDescriptorProto {
    pub fn new() -> ConvolutionDescriptorProto {
        ::std::default::Default::default()
    }

    // repeated int64 paddings = 1;


    pub fn get_paddings(&self) -> &[i64] {
        &self.paddings
    }
    pub fn clear_paddings(&mut self) {
        self.paddings.clear();
    }

    // Param is passed by value, moved
    pub fn set_paddings(&mut self, v: ::std::vec::Vec<i64>) {
        self.paddings = v;
    }

    // Mutable pointer to the field.
    pub fn mut_paddings(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.paddings
    }

    // Take field
    pub fn take_paddings(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.paddings, ::std::vec::Vec::new())
    }

    // repeated int64 strides = 2;


    pub fn get_strides(&self) -> &[i64] {
        &self.strides
    }
    pub fn clear_strides(&mut self) {
        self.strides.clear();
    }

    // Param is passed by value, moved
    pub fn set_strides(&mut self, v: ::std::vec::Vec<i64>) {
        self.strides = v;
    }

    // Mutable pointer to the field.
    pub fn mut_strides(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.strides
    }

    // Take field
    pub fn take_strides(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.strides, ::std::vec::Vec::new())
    }

    // repeated int64 dilations = 3;


    pub fn get_dilations(&self) -> &[i64] {
        &self.dilations
    }
    pub fn clear_dilations(&mut self) {
        self.dilations.clear();
    }

    // Param is passed by value, moved
    pub fn set_dilations(&mut self, v: ::std::vec::Vec<i64>) {
        self.dilations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_dilations(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.dilations
    }

    // Take field
    pub fn take_dilations(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.dilations, ::std::vec::Vec::new())
    }

    // .stream_executor.dnn.DataType compute_mode = 4;


    pub fn get_compute_mode(&self) -> DataType {
        self.compute_mode
    }
    pub fn clear_compute_mode(&mut self) {
        self.compute_mode = DataType::kFloat;
    }

    // Param is passed by value, moved
    pub fn set_compute_mode(&mut self, v: DataType) {
        self.compute_mode = v;
    }

    // int32 group_count = 5;


    pub fn get_group_count(&self) -> i32 {
        self.group_count
    }
    pub fn clear_group_count(&mut self) {
        self.group_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_group_count(&mut self, v: i32) {
        self.group_count = v;
    }

    // .stream_executor.dnn.ConvolutionMode convolution_mode = 6;


    pub fn get_convolution_mode(&self) -> ConvolutionMode {
        self.convolution_mode
    }
    pub fn clear_convolution_mode(&mut self) {
        self.convolution_mode = ConvolutionMode::CROSS_CORRELATION;
    }

    // Param is passed by value, moved
    pub fn set_convolution_mode(&mut self, v: ConvolutionMode) {
        self.convolution_mode = v;
    }

    // string name = 7;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ConvolutionDescriptorProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_int64_into(wire_type, is, &mut self.paddings)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_int64_into(wire_type, is, &mut self.strides)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_int64_into(wire_type, is, &mut self.dilations)?;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.compute_mode, 4, &mut self.unknown_fields)?
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.group_count = tmp;
                },
                6 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.convolution_mode, 6, &mut self.unknown_fields)?
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.paddings {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.strides {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.dilations {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.compute_mode != DataType::kFloat {
            my_size += ::protobuf::rt::enum_size(4, self.compute_mode);
        }
        if self.group_count != 0 {
            my_size += ::protobuf::rt::value_size(5, self.group_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.convolution_mode != ConvolutionMode::CROSS_CORRELATION {
            my_size += ::protobuf::rt::enum_size(6, self.convolution_mode);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.paddings {
            os.write_int64(1, *v)?;
        };
        for v in &self.strides {
            os.write_int64(2, *v)?;
        };
        for v in &self.dilations {
            os.write_int64(3, *v)?;
        };
        if self.compute_mode != DataType::kFloat {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.compute_mode))?;
        }
        if self.group_count != 0 {
            os.write_int32(5, self.group_count)?;
        }
        if self.convolution_mode != ConvolutionMode::CROSS_CORRELATION {
            os.write_enum(6, ::protobuf::ProtobufEnum::value(&self.convolution_mode))?;
        }
        if !self.name.is_empty() {
            os.write_string(7, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConvolutionDescriptorProto {
        ConvolutionDescriptorProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "paddings",
                |m: &ConvolutionDescriptorProto| { &m.paddings },
                |m: &mut ConvolutionDescriptorProto| { &mut m.paddings },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "strides",
                |m: &ConvolutionDescriptorProto| { &m.strides },
                |m: &mut ConvolutionDescriptorProto| { &mut m.strides },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "dilations",
                |m: &ConvolutionDescriptorProto| { &m.dilations },
                |m: &mut ConvolutionDescriptorProto| { &mut m.dilations },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<DataType>>(
                "compute_mode",
                |m: &ConvolutionDescriptorProto| { &m.compute_mode },
                |m: &mut ConvolutionDescriptorProto| { &mut m.compute_mode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "group_count",
                |m: &ConvolutionDescriptorProto| { &m.group_count },
                |m: &mut ConvolutionDescriptorProto| { &mut m.group_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ConvolutionMode>>(
                "convolution_mode",
                |m: &ConvolutionDescriptorProto| { &m.convolution_mode },
                |m: &mut ConvolutionDescriptorProto| { &mut m.convolution_mode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &ConvolutionDescriptorProto| { &m.name },
                |m: &mut ConvolutionDescriptorProto| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConvolutionDescriptorProto>(
                "ConvolutionDescriptorProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConvolutionDescriptorProto {
        static instance: ::protobuf::rt::LazyV2<ConvolutionDescriptorProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConvolutionDescriptorProto::new)
    }
}

impl ::protobuf::Clear for ConvolutionDescriptorProto {
    fn clear(&mut self) {
        self.paddings.clear();
        self.strides.clear();
        self.dilations.clear();
        self.compute_mode = DataType::kFloat;
        self.group_count = 0;
        self.convolution_mode = ConvolutionMode::CROSS_CORRELATION;
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConvolutionDescriptorProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConvolutionDescriptorProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum DataType {
    kFloat = 0,
    kDouble = 1,
    kHalf = 2,
    kInt8 = 3,
    kInt32 = 4,
}

impl ::protobuf::ProtobufEnum for DataType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DataType> {
        match value {
            0 => ::std::option::Option::Some(DataType::kFloat),
            1 => ::std::option::Option::Some(DataType::kDouble),
            2 => ::std::option::Option::Some(DataType::kHalf),
            3 => ::std::option::Option::Some(DataType::kInt8),
            4 => ::std::option::Option::Some(DataType::kInt32),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [DataType] = &[
            DataType::kFloat,
            DataType::kDouble,
            DataType::kHalf,
            DataType::kInt8,
            DataType::kInt32,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<DataType>("DataType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for DataType {
}

impl ::std::default::Default for DataType {
    fn default() -> Self {
        DataType::kFloat
    }
}

impl ::protobuf::reflect::ProtobufValue for DataType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum DataLayout {
    kYXDepthBatch = 0,
    kYXBatchDepth = 1,
    kBatchYXDepth = 2,
    kBatchDepthYX = 3,
    kBatchDepthYX4 = 4,
}

impl ::protobuf::ProtobufEnum for DataLayout {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DataLayout> {
        match value {
            0 => ::std::option::Option::Some(DataLayout::kYXDepthBatch),
            1 => ::std::option::Option::Some(DataLayout::kYXBatchDepth),
            2 => ::std::option::Option::Some(DataLayout::kBatchYXDepth),
            3 => ::std::option::Option::Some(DataLayout::kBatchDepthYX),
            4 => ::std::option::Option::Some(DataLayout::kBatchDepthYX4),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [DataLayout] = &[
            DataLayout::kYXDepthBatch,
            DataLayout::kYXBatchDepth,
            DataLayout::kBatchYXDepth,
            DataLayout::kBatchDepthYX,
            DataLayout::kBatchDepthYX4,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<DataLayout>("DataLayout", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for DataLayout {
}

impl ::std::default::Default for DataLayout {
    fn default() -> Self {
        DataLayout::kYXDepthBatch
    }
}

impl ::protobuf::reflect::ProtobufValue for DataLayout {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum FilterLayout {
    kOutputInputYX = 0,
    kOutputYXInput = 1,
    kOutputInputYX4 = 2,
    kInputYXOutput = 3,
    kYXInputOutput = 4,
}

impl ::protobuf::ProtobufEnum for FilterLayout {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FilterLayout> {
        match value {
            0 => ::std::option::Option::Some(FilterLayout::kOutputInputYX),
            1 => ::std::option::Option::Some(FilterLayout::kOutputYXInput),
            2 => ::std::option::Option::Some(FilterLayout::kOutputInputYX4),
            3 => ::std::option::Option::Some(FilterLayout::kInputYXOutput),
            4 => ::std::option::Option::Some(FilterLayout::kYXInputOutput),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [FilterLayout] = &[
            FilterLayout::kOutputInputYX,
            FilterLayout::kOutputYXInput,
            FilterLayout::kOutputInputYX4,
            FilterLayout::kInputYXOutput,
            FilterLayout::kYXInputOutput,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<FilterLayout>("FilterLayout", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for FilterLayout {
}

impl ::std::default::Default for FilterLayout {
    fn default() -> Self {
        FilterLayout::kOutputInputYX
    }
}

impl ::protobuf::reflect::ProtobufValue for FilterLayout {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ActivationMode {
    kNone = 0,
    kSigmoid = 1,
    kRelu = 2,
    kRelu6 = 3,
    kReluX = 4,
    kTanh = 5,
    kBandPass = 6,
}

impl ::protobuf::ProtobufEnum for ActivationMode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ActivationMode> {
        match value {
            0 => ::std::option::Option::Some(ActivationMode::kNone),
            1 => ::std::option::Option::Some(ActivationMode::kSigmoid),
            2 => ::std::option::Option::Some(ActivationMode::kRelu),
            3 => ::std::option::Option::Some(ActivationMode::kRelu6),
            4 => ::std::option::Option::Some(ActivationMode::kReluX),
            5 => ::std::option::Option::Some(ActivationMode::kTanh),
            6 => ::std::option::Option::Some(ActivationMode::kBandPass),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ActivationMode] = &[
            ActivationMode::kNone,
            ActivationMode::kSigmoid,
            ActivationMode::kRelu,
            ActivationMode::kRelu6,
            ActivationMode::kReluX,
            ActivationMode::kTanh,
            ActivationMode::kBandPass,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ActivationMode>("ActivationMode", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ActivationMode {
}

impl ::std::default::Default for ActivationMode {
    fn default() -> Self {
        ActivationMode::kNone
    }
}

impl ::protobuf::reflect::ProtobufValue for ActivationMode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ConvolutionMode {
    CROSS_CORRELATION = 0,
    CONVOLUTION = 1,
}

impl ::protobuf::ProtobufEnum for ConvolutionMode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ConvolutionMode> {
        match value {
            0 => ::std::option::Option::Some(ConvolutionMode::CROSS_CORRELATION),
            1 => ::std::option::Option::Some(ConvolutionMode::CONVOLUTION),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ConvolutionMode] = &[
            ConvolutionMode::CROSS_CORRELATION,
            ConvolutionMode::CONVOLUTION,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ConvolutionMode>("ConvolutionMode", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ConvolutionMode {
}

impl ::std::default::Default for ConvolutionMode {
    fn default() -> Self {
        ConvolutionMode::CROSS_CORRELATION
    }
}

impl ::protobuf::reflect::ProtobufValue for ConvolutionMode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ConvolutionKind {
    INVALID = 0,
    FORWARD = 1,
    BACKWARD_FILTER = 2,
    BACKWARD_DATA = 3,
    FORWARD_BIAS_ACTIVATION = 4,
}

impl ::protobuf::ProtobufEnum for ConvolutionKind {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ConvolutionKind> {
        match value {
            0 => ::std::option::Option::Some(ConvolutionKind::INVALID),
            1 => ::std::option::Option::Some(ConvolutionKind::FORWARD),
            2 => ::std::option::Option::Some(ConvolutionKind::BACKWARD_FILTER),
            3 => ::std::option::Option::Some(ConvolutionKind::BACKWARD_DATA),
            4 => ::std::option::Option::Some(ConvolutionKind::FORWARD_BIAS_ACTIVATION),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ConvolutionKind] = &[
            ConvolutionKind::INVALID,
            ConvolutionKind::FORWARD,
            ConvolutionKind::BACKWARD_FILTER,
            ConvolutionKind::BACKWARD_DATA,
            ConvolutionKind::FORWARD_BIAS_ACTIVATION,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ConvolutionKind>("ConvolutionKind", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ConvolutionKind {
}

impl ::std::default::Default for ConvolutionKind {
    fn default() -> Self {
        ConvolutionKind::INVALID
    }
}

impl ::protobuf::reflect::ProtobufValue for ConvolutionKind {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$tensorflow/stream_executor/dnn.proto\x12\x13stream_executor.dnn\"\x91\
    \x02\n\x15TensorDescriptorProto\x12\x1e\n\ndimensions\x18\x01\x20\x03(\
    \x03R\ndimensions\x12:\n\tdata_type\x18\x02\x20\x01(\x0e2\x1d.stream_exe\
    cutor.dnn.DataTypeR\x08dataType\x12B\n\x0bdata_layout\x18\x03\x20\x01(\
    \x0e2\x1f.stream_executor.dnn.DataLayoutH\0R\ndataLayout\x12H\n\rfilter_\
    layout\x18\x04\x20\x01(\x0e2!.stream_executor.dnn.FilterLayoutH\0R\x0cfi\
    lterLayoutB\x0e\n\x0clayout_oneof\"\xa6\x01\n\x0eAlgorithmProto\x12\x17\
    \n\x07algo_id\x18\x01\x20\x01(\x03R\x06algoId\x12I\n\tmath_type\x18\x02\
    \x20\x01(\x0e2,.stream_executor.dnn.AlgorithmProto.MathTypeR\x08mathType\
    \"0\n\x08MathType\x12\x10\n\x0cDEFAULT_MATH\x10\0\x12\x12\n\x0eTENSOR_OP\
    _MATH\x10\x01\"\xb8\x02\n\x1aConvolutionDescriptorProto\x12\x1a\n\x08pad\
    dings\x18\x01\x20\x03(\x03R\x08paddings\x12\x18\n\x07strides\x18\x02\x20\
    \x03(\x03R\x07strides\x12\x1c\n\tdilations\x18\x03\x20\x03(\x03R\tdilati\
    ons\x12@\n\x0ccompute_mode\x18\x04\x20\x01(\x0e2\x1d.stream_executor.dnn\
    .DataTypeR\x0bcomputeMode\x12\x1f\n\x0bgroup_count\x18\x05\x20\x01(\x05R\
    \ngroupCount\x12O\n\x10convolution_mode\x18\x06\x20\x01(\x0e2$.stream_ex\
    ecutor.dnn.ConvolutionModeR\x0fconvolutionMode\x12\x12\n\x04name\x18\x07\
    \x20\x01(\tR\x04name*E\n\x08DataType\x12\n\n\x06kFloat\x10\0\x12\x0b\n\
    \x07kDouble\x10\x01\x12\t\n\x05kHalf\x10\x02\x12\t\n\x05kInt8\x10\x03\
    \x12\n\n\x06kInt32\x10\x04*l\n\nDataLayout\x12\x11\n\rkYXDepthBatch\x10\
    \0\x12\x11\n\rkYXBatchDepth\x10\x01\x12\x11\n\rkBatchYXDepth\x10\x02\x12\
    \x11\n\rkBatchDepthYX\x10\x03\x12\x12\n\x0ekBatchDepthYX4\x10\x04*s\n\
    \x0cFilterLayout\x12\x12\n\x0ekOutputInputYX\x10\0\x12\x12\n\x0ekOutputY\
    XInput\x10\x01\x12\x13\n\x0fkOutputInputYX4\x10\x02\x12\x12\n\x0ekInputY\
    XOutput\x10\x03\x12\x12\n\x0ekYXInputOutput\x10\x04*f\n\x0eActivationMod\
    e\x12\t\n\x05kNone\x10\0\x12\x0c\n\x08kSigmoid\x10\x01\x12\t\n\x05kRelu\
    \x10\x02\x12\n\n\x06kRelu6\x10\x03\x12\n\n\x06kReluX\x10\x04\x12\t\n\x05\
    kTanh\x10\x05\x12\r\n\tkBandPass\x10\x06*9\n\x0fConvolutionMode\x12\x15\
    \n\x11CROSS_CORRELATION\x10\0\x12\x0f\n\x0bCONVOLUTION\x10\x01*p\n\x0fCo\
    nvolutionKind\x12\x0b\n\x07INVALID\x10\0\x12\x0b\n\x07FORWARD\x10\x01\
    \x12\x13\n\x0fBACKWARD_FILTER\x10\x02\x12\x11\n\rBACKWARD_DATA\x10\x03\
    \x12\x1b\n\x17FORWARD_BIAS_ACTIVATION\x10\x04b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
