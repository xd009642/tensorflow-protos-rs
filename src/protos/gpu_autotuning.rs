// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow/compiler/xla/service/gpu/gpu_autotuning.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct ConvInstructionLog {
    // message fields
    pub instruction: ::protobuf::SingularPtrField<super::hlo::HloInstructionProto>,
    pub operand_shapes: ::protobuf::RepeatedField<super::xla_data::ShapeProto>,
    pub result_address: u64,
    pub operand_addresses: ::std::vec::Vec<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConvInstructionLog {
    fn default() -> &'a ConvInstructionLog {
        <ConvInstructionLog as ::protobuf::Message>::default_instance()
    }
}

impl ConvInstructionLog {
    pub fn new() -> ConvInstructionLog {
        ::std::default::Default::default()
    }

    // .xla.HloInstructionProto instruction = 1;


    pub fn get_instruction(&self) -> &super::hlo::HloInstructionProto {
        self.instruction.as_ref().unwrap_or_else(|| <super::hlo::HloInstructionProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_instruction(&mut self) {
        self.instruction.clear();
    }

    pub fn has_instruction(&self) -> bool {
        self.instruction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_instruction(&mut self, v: super::hlo::HloInstructionProto) {
        self.instruction = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instruction(&mut self) -> &mut super::hlo::HloInstructionProto {
        if self.instruction.is_none() {
            self.instruction.set_default();
        }
        self.instruction.as_mut().unwrap()
    }

    // Take field
    pub fn take_instruction(&mut self) -> super::hlo::HloInstructionProto {
        self.instruction.take().unwrap_or_else(|| super::hlo::HloInstructionProto::new())
    }

    // repeated .xla.ShapeProto operand_shapes = 2;


    pub fn get_operand_shapes(&self) -> &[super::xla_data::ShapeProto] {
        &self.operand_shapes
    }
    pub fn clear_operand_shapes(&mut self) {
        self.operand_shapes.clear();
    }

    // Param is passed by value, moved
    pub fn set_operand_shapes(&mut self, v: ::protobuf::RepeatedField<super::xla_data::ShapeProto>) {
        self.operand_shapes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_operand_shapes(&mut self) -> &mut ::protobuf::RepeatedField<super::xla_data::ShapeProto> {
        &mut self.operand_shapes
    }

    // Take field
    pub fn take_operand_shapes(&mut self) -> ::protobuf::RepeatedField<super::xla_data::ShapeProto> {
        ::std::mem::replace(&mut self.operand_shapes, ::protobuf::RepeatedField::new())
    }

    // uint64 result_address = 3;


    pub fn get_result_address(&self) -> u64 {
        self.result_address
    }
    pub fn clear_result_address(&mut self) {
        self.result_address = 0;
    }

    // Param is passed by value, moved
    pub fn set_result_address(&mut self, v: u64) {
        self.result_address = v;
    }

    // repeated uint64 operand_addresses = 4;


    pub fn get_operand_addresses(&self) -> &[u64] {
        &self.operand_addresses
    }
    pub fn clear_operand_addresses(&mut self) {
        self.operand_addresses.clear();
    }

    // Param is passed by value, moved
    pub fn set_operand_addresses(&mut self, v: ::std::vec::Vec<u64>) {
        self.operand_addresses = v;
    }

    // Mutable pointer to the field.
    pub fn mut_operand_addresses(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.operand_addresses
    }

    // Take field
    pub fn take_operand_addresses(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.operand_addresses, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ConvInstructionLog {
    fn is_initialized(&self) -> bool {
        for v in &self.instruction {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.operand_shapes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.instruction)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.operand_shapes)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.result_address = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.operand_addresses)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.instruction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.operand_shapes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.result_address != 0 {
            my_size += ::protobuf::rt::value_size(3, self.result_address, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.operand_addresses {
            my_size += ::protobuf::rt::value_size(4, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.instruction.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.operand_shapes {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.result_address != 0 {
            os.write_uint64(3, self.result_address)?;
        }
        for v in &self.operand_addresses {
            os.write_uint64(4, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConvInstructionLog {
        ConvInstructionLog::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::hlo::HloInstructionProto>>(
                "instruction",
                |m: &ConvInstructionLog| { &m.instruction },
                |m: &mut ConvInstructionLog| { &mut m.instruction },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::xla_data::ShapeProto>>(
                "operand_shapes",
                |m: &ConvInstructionLog| { &m.operand_shapes },
                |m: &mut ConvInstructionLog| { &mut m.operand_shapes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "result_address",
                |m: &ConvInstructionLog| { &m.result_address },
                |m: &mut ConvInstructionLog| { &mut m.result_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "operand_addresses",
                |m: &ConvInstructionLog| { &m.operand_addresses },
                |m: &mut ConvInstructionLog| { &mut m.operand_addresses },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConvInstructionLog>(
                "ConvInstructionLog",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConvInstructionLog {
        static instance: ::protobuf::rt::LazyV2<ConvInstructionLog> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConvInstructionLog::new)
    }
}

impl ::protobuf::Clear for ConvInstructionLog {
    fn clear(&mut self) {
        self.instruction.clear();
        self.operand_shapes.clear();
        self.result_address = 0;
        self.operand_addresses.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConvInstructionLog {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConvInstructionLog {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BlacklistedAlgorithm {
    // message fields
    pub id: i64,
    pub tensor_ops: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BlacklistedAlgorithm {
    fn default() -> &'a BlacklistedAlgorithm {
        <BlacklistedAlgorithm as ::protobuf::Message>::default_instance()
    }
}

impl BlacklistedAlgorithm {
    pub fn new() -> BlacklistedAlgorithm {
        ::std::default::Default::default()
    }

    // int64 id = 1;


    pub fn get_id(&self) -> i64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i64) {
        self.id = v;
    }

    // bool tensor_ops = 2;


    pub fn get_tensor_ops(&self) -> bool {
        self.tensor_ops
    }
    pub fn clear_tensor_ops(&mut self) {
        self.tensor_ops = false;
    }

    // Param is passed by value, moved
    pub fn set_tensor_ops(&mut self, v: bool) {
        self.tensor_ops = v;
    }
}

impl ::protobuf::Message for BlacklistedAlgorithm {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.tensor_ops = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tensor_ops != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_int64(1, self.id)?;
        }
        if self.tensor_ops != false {
            os.write_bool(2, self.tensor_ops)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BlacklistedAlgorithm {
        BlacklistedAlgorithm::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "id",
                |m: &BlacklistedAlgorithm| { &m.id },
                |m: &mut BlacklistedAlgorithm| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "tensor_ops",
                |m: &BlacklistedAlgorithm| { &m.tensor_ops },
                |m: &mut BlacklistedAlgorithm| { &mut m.tensor_ops },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BlacklistedAlgorithm>(
                "BlacklistedAlgorithm",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BlacklistedAlgorithm {
        static instance: ::protobuf::rt::LazyV2<BlacklistedAlgorithm> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BlacklistedAlgorithm::new)
    }
}

impl ::protobuf::Clear for BlacklistedAlgorithm {
    fn clear(&mut self) {
        self.id = 0;
        self.tensor_ops = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BlacklistedAlgorithm {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlacklistedAlgorithm {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AlgorithmBlacklistEntry {
    // message fields
    pub hlo: ::std::string::String,
    pub cc: ::protobuf::SingularPtrField<super::autotuning::ComputeCapability>,
    pub cudnn_version: ::protobuf::SingularPtrField<super::autotuning::CudnnVersion>,
    pub blas_version: ::std::string::String,
    pub algos: ::protobuf::RepeatedField<BlacklistedAlgorithm>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AlgorithmBlacklistEntry {
    fn default() -> &'a AlgorithmBlacklistEntry {
        <AlgorithmBlacklistEntry as ::protobuf::Message>::default_instance()
    }
}

impl AlgorithmBlacklistEntry {
    pub fn new() -> AlgorithmBlacklistEntry {
        ::std::default::Default::default()
    }

    // string hlo = 1;


    pub fn get_hlo(&self) -> &str {
        &self.hlo
    }
    pub fn clear_hlo(&mut self) {
        self.hlo.clear();
    }

    // Param is passed by value, moved
    pub fn set_hlo(&mut self, v: ::std::string::String) {
        self.hlo = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hlo(&mut self) -> &mut ::std::string::String {
        &mut self.hlo
    }

    // Take field
    pub fn take_hlo(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hlo, ::std::string::String::new())
    }

    // .tensorflow.ComputeCapability cc = 2;


    pub fn get_cc(&self) -> &super::autotuning::ComputeCapability {
        self.cc.as_ref().unwrap_or_else(|| <super::autotuning::ComputeCapability as ::protobuf::Message>::default_instance())
    }
    pub fn clear_cc(&mut self) {
        self.cc.clear();
    }

    pub fn has_cc(&self) -> bool {
        self.cc.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cc(&mut self, v: super::autotuning::ComputeCapability) {
        self.cc = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cc(&mut self) -> &mut super::autotuning::ComputeCapability {
        if self.cc.is_none() {
            self.cc.set_default();
        }
        self.cc.as_mut().unwrap()
    }

    // Take field
    pub fn take_cc(&mut self) -> super::autotuning::ComputeCapability {
        self.cc.take().unwrap_or_else(|| super::autotuning::ComputeCapability::new())
    }

    // .tensorflow.CudnnVersion cudnn_version = 3;


    pub fn get_cudnn_version(&self) -> &super::autotuning::CudnnVersion {
        self.cudnn_version.as_ref().unwrap_or_else(|| <super::autotuning::CudnnVersion as ::protobuf::Message>::default_instance())
    }
    pub fn clear_cudnn_version(&mut self) {
        self.cudnn_version.clear();
    }

    pub fn has_cudnn_version(&self) -> bool {
        self.cudnn_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cudnn_version(&mut self, v: super::autotuning::CudnnVersion) {
        self.cudnn_version = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cudnn_version(&mut self) -> &mut super::autotuning::CudnnVersion {
        if self.cudnn_version.is_none() {
            self.cudnn_version.set_default();
        }
        self.cudnn_version.as_mut().unwrap()
    }

    // Take field
    pub fn take_cudnn_version(&mut self) -> super::autotuning::CudnnVersion {
        self.cudnn_version.take().unwrap_or_else(|| super::autotuning::CudnnVersion::new())
    }

    // string blas_version = 5;


    pub fn get_blas_version(&self) -> &str {
        &self.blas_version
    }
    pub fn clear_blas_version(&mut self) {
        self.blas_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_blas_version(&mut self, v: ::std::string::String) {
        self.blas_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_blas_version(&mut self) -> &mut ::std::string::String {
        &mut self.blas_version
    }

    // Take field
    pub fn take_blas_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.blas_version, ::std::string::String::new())
    }

    // repeated .xla.gpu.BlacklistedAlgorithm algos = 4;


    pub fn get_algos(&self) -> &[BlacklistedAlgorithm] {
        &self.algos
    }
    pub fn clear_algos(&mut self) {
        self.algos.clear();
    }

    // Param is passed by value, moved
    pub fn set_algos(&mut self, v: ::protobuf::RepeatedField<BlacklistedAlgorithm>) {
        self.algos = v;
    }

    // Mutable pointer to the field.
    pub fn mut_algos(&mut self) -> &mut ::protobuf::RepeatedField<BlacklistedAlgorithm> {
        &mut self.algos
    }

    // Take field
    pub fn take_algos(&mut self) -> ::protobuf::RepeatedField<BlacklistedAlgorithm> {
        ::std::mem::replace(&mut self.algos, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AlgorithmBlacklistEntry {
    fn is_initialized(&self) -> bool {
        for v in &self.cc {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.cudnn_version {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.algos {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hlo)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cc)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cudnn_version)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.blas_version)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.algos)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.hlo.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.hlo);
        }
        if let Some(ref v) = self.cc.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.cudnn_version.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.blas_version.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.blas_version);
        }
        for value in &self.algos {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.hlo.is_empty() {
            os.write_string(1, &self.hlo)?;
        }
        if let Some(ref v) = self.cc.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.cudnn_version.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.blas_version.is_empty() {
            os.write_string(5, &self.blas_version)?;
        }
        for v in &self.algos {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AlgorithmBlacklistEntry {
        AlgorithmBlacklistEntry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "hlo",
                |m: &AlgorithmBlacklistEntry| { &m.hlo },
                |m: &mut AlgorithmBlacklistEntry| { &mut m.hlo },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::autotuning::ComputeCapability>>(
                "cc",
                |m: &AlgorithmBlacklistEntry| { &m.cc },
                |m: &mut AlgorithmBlacklistEntry| { &mut m.cc },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::autotuning::CudnnVersion>>(
                "cudnn_version",
                |m: &AlgorithmBlacklistEntry| { &m.cudnn_version },
                |m: &mut AlgorithmBlacklistEntry| { &mut m.cudnn_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "blas_version",
                |m: &AlgorithmBlacklistEntry| { &m.blas_version },
                |m: &mut AlgorithmBlacklistEntry| { &mut m.blas_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BlacklistedAlgorithm>>(
                "algos",
                |m: &AlgorithmBlacklistEntry| { &m.algos },
                |m: &mut AlgorithmBlacklistEntry| { &mut m.algos },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AlgorithmBlacklistEntry>(
                "AlgorithmBlacklistEntry",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AlgorithmBlacklistEntry {
        static instance: ::protobuf::rt::LazyV2<AlgorithmBlacklistEntry> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AlgorithmBlacklistEntry::new)
    }
}

impl ::protobuf::Clear for AlgorithmBlacklistEntry {
    fn clear(&mut self) {
        self.hlo.clear();
        self.cc.clear();
        self.cudnn_version.clear();
        self.blas_version.clear();
        self.algos.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AlgorithmBlacklistEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AlgorithmBlacklistEntry {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AlgorithmBlacklist {
    // message fields
    pub entries: ::protobuf::RepeatedField<AlgorithmBlacklistEntry>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AlgorithmBlacklist {
    fn default() -> &'a AlgorithmBlacklist {
        <AlgorithmBlacklist as ::protobuf::Message>::default_instance()
    }
}

impl AlgorithmBlacklist {
    pub fn new() -> AlgorithmBlacklist {
        ::std::default::Default::default()
    }

    // repeated .xla.gpu.AlgorithmBlacklistEntry entries = 1;


    pub fn get_entries(&self) -> &[AlgorithmBlacklistEntry] {
        &self.entries
    }
    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<AlgorithmBlacklistEntry>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<AlgorithmBlacklistEntry> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<AlgorithmBlacklistEntry> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AlgorithmBlacklist {
    fn is_initialized(&self) -> bool {
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entries)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.entries {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AlgorithmBlacklist {
        AlgorithmBlacklist::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AlgorithmBlacklistEntry>>(
                "entries",
                |m: &AlgorithmBlacklist| { &m.entries },
                |m: &mut AlgorithmBlacklist| { &mut m.entries },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AlgorithmBlacklist>(
                "AlgorithmBlacklist",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AlgorithmBlacklist {
        static instance: ::protobuf::rt::LazyV2<AlgorithmBlacklist> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AlgorithmBlacklist::new)
    }
}

impl ::protobuf::Clear for AlgorithmBlacklist {
    fn clear(&mut self) {
        self.entries.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AlgorithmBlacklist {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AlgorithmBlacklist {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n8tensorflow/compiler/xla/service/gpu/gpu_autotuning.proto\x12\x07xla.g\
    pu\x1a)tensorflow/compiler/xla/service/hlo.proto\x1a&tensorflow/compiler\
    /xla/xla_data.proto\x1a)tensorflow/core/protobuf/autotuning.proto\"\xdc\
    \x01\n\x12ConvInstructionLog\x12:\n\x0binstruction\x18\x01\x20\x01(\x0b2\
    \x18.xla.HloInstructionProtoR\x0binstruction\x126\n\x0eoperand_shapes\
    \x18\x02\x20\x03(\x0b2\x0f.xla.ShapeProtoR\roperandShapes\x12%\n\x0eresu\
    lt_address\x18\x03\x20\x01(\x04R\rresultAddress\x12+\n\x11operand_addres\
    ses\x18\x04\x20\x03(\x04R\x10operandAddresses\"E\n\x14BlacklistedAlgorit\
    hm\x12\x0e\n\x02id\x18\x01\x20\x01(\x03R\x02id\x12\x1d\n\ntensor_ops\x18\
    \x02\x20\x01(\x08R\ttensorOps\"\xf1\x01\n\x17AlgorithmBlacklistEntry\x12\
    \x10\n\x03hlo\x18\x01\x20\x01(\tR\x03hlo\x12-\n\x02cc\x18\x02\x20\x01(\
    \x0b2\x1d.tensorflow.ComputeCapabilityR\x02cc\x12=\n\rcudnn_version\x18\
    \x03\x20\x01(\x0b2\x18.tensorflow.CudnnVersionR\x0ccudnnVersion\x12!\n\
    \x0cblas_version\x18\x05\x20\x01(\tR\x0bblasVersion\x123\n\x05algos\x18\
    \x04\x20\x03(\x0b2\x1d.xla.gpu.BlacklistedAlgorithmR\x05algos\"P\n\x12Al\
    gorithmBlacklist\x12:\n\x07entries\x18\x01\x20\x03(\x0b2\x20.xla.gpu.Alg\
    orithmBlacklistEntryR\x07entriesb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
