// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow/core/protobuf/tpu/tpu_embedding_output_layout.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct TPUEmbeddingOutputLayout {
    // message fields
    pub table: ::protobuf::RepeatedField<TPUEmbeddingOutputLayout_TableDescriptor>,
    pub output: ::protobuf::RepeatedField<TPUEmbeddingOutputLayout_EmbeddingOutputTensor>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TPUEmbeddingOutputLayout {
    fn default() -> &'a TPUEmbeddingOutputLayout {
        <TPUEmbeddingOutputLayout as ::protobuf::Message>::default_instance()
    }
}

impl TPUEmbeddingOutputLayout {
    pub fn new() -> TPUEmbeddingOutputLayout {
        ::std::default::Default::default()
    }

    // repeated .tensorflow.tpu.TPUEmbeddingOutputLayout.TableDescriptor table = 1;


    pub fn get_table(&self) -> &[TPUEmbeddingOutputLayout_TableDescriptor] {
        &self.table
    }
    pub fn clear_table(&mut self) {
        self.table.clear();
    }

    // Param is passed by value, moved
    pub fn set_table(&mut self, v: ::protobuf::RepeatedField<TPUEmbeddingOutputLayout_TableDescriptor>) {
        self.table = v;
    }

    // Mutable pointer to the field.
    pub fn mut_table(&mut self) -> &mut ::protobuf::RepeatedField<TPUEmbeddingOutputLayout_TableDescriptor> {
        &mut self.table
    }

    // Take field
    pub fn take_table(&mut self) -> ::protobuf::RepeatedField<TPUEmbeddingOutputLayout_TableDescriptor> {
        ::std::mem::replace(&mut self.table, ::protobuf::RepeatedField::new())
    }

    // repeated .tensorflow.tpu.TPUEmbeddingOutputLayout.EmbeddingOutputTensor output = 2;


    pub fn get_output(&self) -> &[TPUEmbeddingOutputLayout_EmbeddingOutputTensor] {
        &self.output
    }
    pub fn clear_output(&mut self) {
        self.output.clear();
    }

    // Param is passed by value, moved
    pub fn set_output(&mut self, v: ::protobuf::RepeatedField<TPUEmbeddingOutputLayout_EmbeddingOutputTensor>) {
        self.output = v;
    }

    // Mutable pointer to the field.
    pub fn mut_output(&mut self) -> &mut ::protobuf::RepeatedField<TPUEmbeddingOutputLayout_EmbeddingOutputTensor> {
        &mut self.output
    }

    // Take field
    pub fn take_output(&mut self) -> ::protobuf::RepeatedField<TPUEmbeddingOutputLayout_EmbeddingOutputTensor> {
        ::std::mem::replace(&mut self.output, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TPUEmbeddingOutputLayout {
    fn is_initialized(&self) -> bool {
        for v in &self.table {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.output {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.table)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.output)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.table {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.output {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.table {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.output {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TPUEmbeddingOutputLayout {
        TPUEmbeddingOutputLayout::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TPUEmbeddingOutputLayout_TableDescriptor>>(
                "table",
                |m: &TPUEmbeddingOutputLayout| { &m.table },
                |m: &mut TPUEmbeddingOutputLayout| { &mut m.table },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TPUEmbeddingOutputLayout_EmbeddingOutputTensor>>(
                "output",
                |m: &TPUEmbeddingOutputLayout| { &m.output },
                |m: &mut TPUEmbeddingOutputLayout| { &mut m.output },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TPUEmbeddingOutputLayout>(
                "TPUEmbeddingOutputLayout",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TPUEmbeddingOutputLayout {
        static instance: ::protobuf::rt::LazyV2<TPUEmbeddingOutputLayout> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TPUEmbeddingOutputLayout::new)
    }
}

impl ::protobuf::Clear for TPUEmbeddingOutputLayout {
    fn clear(&mut self) {
        self.table.clear();
        self.output.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TPUEmbeddingOutputLayout {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TPUEmbeddingOutputLayout {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TPUEmbeddingOutputLayout_OutputLocation {
    // message fields
    pub tensor_index: i32,
    pub dim0_offset: i32,
    pub dim1_offset: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TPUEmbeddingOutputLayout_OutputLocation {
    fn default() -> &'a TPUEmbeddingOutputLayout_OutputLocation {
        <TPUEmbeddingOutputLayout_OutputLocation as ::protobuf::Message>::default_instance()
    }
}

impl TPUEmbeddingOutputLayout_OutputLocation {
    pub fn new() -> TPUEmbeddingOutputLayout_OutputLocation {
        ::std::default::Default::default()
    }

    // int32 tensor_index = 1;


    pub fn get_tensor_index(&self) -> i32 {
        self.tensor_index
    }
    pub fn clear_tensor_index(&mut self) {
        self.tensor_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_tensor_index(&mut self, v: i32) {
        self.tensor_index = v;
    }

    // int32 dim0_offset = 2;


    pub fn get_dim0_offset(&self) -> i32 {
        self.dim0_offset
    }
    pub fn clear_dim0_offset(&mut self) {
        self.dim0_offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_dim0_offset(&mut self, v: i32) {
        self.dim0_offset = v;
    }

    // int32 dim1_offset = 3;


    pub fn get_dim1_offset(&self) -> i32 {
        self.dim1_offset
    }
    pub fn clear_dim1_offset(&mut self) {
        self.dim1_offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_dim1_offset(&mut self, v: i32) {
        self.dim1_offset = v;
    }
}

impl ::protobuf::Message for TPUEmbeddingOutputLayout_OutputLocation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.tensor_index = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.dim0_offset = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.dim1_offset = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.tensor_index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.tensor_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.dim0_offset != 0 {
            my_size += ::protobuf::rt::value_size(2, self.dim0_offset, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.dim1_offset != 0 {
            my_size += ::protobuf::rt::value_size(3, self.dim1_offset, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.tensor_index != 0 {
            os.write_int32(1, self.tensor_index)?;
        }
        if self.dim0_offset != 0 {
            os.write_int32(2, self.dim0_offset)?;
        }
        if self.dim1_offset != 0 {
            os.write_int32(3, self.dim1_offset)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TPUEmbeddingOutputLayout_OutputLocation {
        TPUEmbeddingOutputLayout_OutputLocation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "tensor_index",
                |m: &TPUEmbeddingOutputLayout_OutputLocation| { &m.tensor_index },
                |m: &mut TPUEmbeddingOutputLayout_OutputLocation| { &mut m.tensor_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "dim0_offset",
                |m: &TPUEmbeddingOutputLayout_OutputLocation| { &m.dim0_offset },
                |m: &mut TPUEmbeddingOutputLayout_OutputLocation| { &mut m.dim0_offset },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "dim1_offset",
                |m: &TPUEmbeddingOutputLayout_OutputLocation| { &m.dim1_offset },
                |m: &mut TPUEmbeddingOutputLayout_OutputLocation| { &mut m.dim1_offset },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TPUEmbeddingOutputLayout_OutputLocation>(
                "TPUEmbeddingOutputLayout.OutputLocation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TPUEmbeddingOutputLayout_OutputLocation {
        static instance: ::protobuf::rt::LazyV2<TPUEmbeddingOutputLayout_OutputLocation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TPUEmbeddingOutputLayout_OutputLocation::new)
    }
}

impl ::protobuf::Clear for TPUEmbeddingOutputLayout_OutputLocation {
    fn clear(&mut self) {
        self.tensor_index = 0;
        self.dim0_offset = 0;
        self.dim1_offset = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TPUEmbeddingOutputLayout_OutputLocation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TPUEmbeddingOutputLayout_OutputLocation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TPUEmbeddingOutputLayout_FeatureDescriptor {
    // message fields
    pub output_location: ::protobuf::RepeatedField<TPUEmbeddingOutputLayout_OutputLocation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TPUEmbeddingOutputLayout_FeatureDescriptor {
    fn default() -> &'a TPUEmbeddingOutputLayout_FeatureDescriptor {
        <TPUEmbeddingOutputLayout_FeatureDescriptor as ::protobuf::Message>::default_instance()
    }
}

impl TPUEmbeddingOutputLayout_FeatureDescriptor {
    pub fn new() -> TPUEmbeddingOutputLayout_FeatureDescriptor {
        ::std::default::Default::default()
    }

    // repeated .tensorflow.tpu.TPUEmbeddingOutputLayout.OutputLocation output_location = 1;


    pub fn get_output_location(&self) -> &[TPUEmbeddingOutputLayout_OutputLocation] {
        &self.output_location
    }
    pub fn clear_output_location(&mut self) {
        self.output_location.clear();
    }

    // Param is passed by value, moved
    pub fn set_output_location(&mut self, v: ::protobuf::RepeatedField<TPUEmbeddingOutputLayout_OutputLocation>) {
        self.output_location = v;
    }

    // Mutable pointer to the field.
    pub fn mut_output_location(&mut self) -> &mut ::protobuf::RepeatedField<TPUEmbeddingOutputLayout_OutputLocation> {
        &mut self.output_location
    }

    // Take field
    pub fn take_output_location(&mut self) -> ::protobuf::RepeatedField<TPUEmbeddingOutputLayout_OutputLocation> {
        ::std::mem::replace(&mut self.output_location, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TPUEmbeddingOutputLayout_FeatureDescriptor {
    fn is_initialized(&self) -> bool {
        for v in &self.output_location {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.output_location)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.output_location {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.output_location {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TPUEmbeddingOutputLayout_FeatureDescriptor {
        TPUEmbeddingOutputLayout_FeatureDescriptor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TPUEmbeddingOutputLayout_OutputLocation>>(
                "output_location",
                |m: &TPUEmbeddingOutputLayout_FeatureDescriptor| { &m.output_location },
                |m: &mut TPUEmbeddingOutputLayout_FeatureDescriptor| { &mut m.output_location },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TPUEmbeddingOutputLayout_FeatureDescriptor>(
                "TPUEmbeddingOutputLayout.FeatureDescriptor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TPUEmbeddingOutputLayout_FeatureDescriptor {
        static instance: ::protobuf::rt::LazyV2<TPUEmbeddingOutputLayout_FeatureDescriptor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TPUEmbeddingOutputLayout_FeatureDescriptor::new)
    }
}

impl ::protobuf::Clear for TPUEmbeddingOutputLayout_FeatureDescriptor {
    fn clear(&mut self) {
        self.output_location.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TPUEmbeddingOutputLayout_FeatureDescriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TPUEmbeddingOutputLayout_FeatureDescriptor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TPUEmbeddingOutputLayout_TableDescriptor {
    // message fields
    pub feature: ::protobuf::RepeatedField<TPUEmbeddingOutputLayout_FeatureDescriptor>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TPUEmbeddingOutputLayout_TableDescriptor {
    fn default() -> &'a TPUEmbeddingOutputLayout_TableDescriptor {
        <TPUEmbeddingOutputLayout_TableDescriptor as ::protobuf::Message>::default_instance()
    }
}

impl TPUEmbeddingOutputLayout_TableDescriptor {
    pub fn new() -> TPUEmbeddingOutputLayout_TableDescriptor {
        ::std::default::Default::default()
    }

    // repeated .tensorflow.tpu.TPUEmbeddingOutputLayout.FeatureDescriptor feature = 1;


    pub fn get_feature(&self) -> &[TPUEmbeddingOutputLayout_FeatureDescriptor] {
        &self.feature
    }
    pub fn clear_feature(&mut self) {
        self.feature.clear();
    }

    // Param is passed by value, moved
    pub fn set_feature(&mut self, v: ::protobuf::RepeatedField<TPUEmbeddingOutputLayout_FeatureDescriptor>) {
        self.feature = v;
    }

    // Mutable pointer to the field.
    pub fn mut_feature(&mut self) -> &mut ::protobuf::RepeatedField<TPUEmbeddingOutputLayout_FeatureDescriptor> {
        &mut self.feature
    }

    // Take field
    pub fn take_feature(&mut self) -> ::protobuf::RepeatedField<TPUEmbeddingOutputLayout_FeatureDescriptor> {
        ::std::mem::replace(&mut self.feature, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TPUEmbeddingOutputLayout_TableDescriptor {
    fn is_initialized(&self) -> bool {
        for v in &self.feature {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.feature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.feature {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.feature {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TPUEmbeddingOutputLayout_TableDescriptor {
        TPUEmbeddingOutputLayout_TableDescriptor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TPUEmbeddingOutputLayout_FeatureDescriptor>>(
                "feature",
                |m: &TPUEmbeddingOutputLayout_TableDescriptor| { &m.feature },
                |m: &mut TPUEmbeddingOutputLayout_TableDescriptor| { &mut m.feature },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TPUEmbeddingOutputLayout_TableDescriptor>(
                "TPUEmbeddingOutputLayout.TableDescriptor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TPUEmbeddingOutputLayout_TableDescriptor {
        static instance: ::protobuf::rt::LazyV2<TPUEmbeddingOutputLayout_TableDescriptor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TPUEmbeddingOutputLayout_TableDescriptor::new)
    }
}

impl ::protobuf::Clear for TPUEmbeddingOutputLayout_TableDescriptor {
    fn clear(&mut self) {
        self.feature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TPUEmbeddingOutputLayout_TableDescriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TPUEmbeddingOutputLayout_TableDescriptor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TPUEmbeddingOutputLayout_TwoDOutputTensor {
    // message fields
    pub dim0_size_per_sample: i32,
    pub dim1_size: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TPUEmbeddingOutputLayout_TwoDOutputTensor {
    fn default() -> &'a TPUEmbeddingOutputLayout_TwoDOutputTensor {
        <TPUEmbeddingOutputLayout_TwoDOutputTensor as ::protobuf::Message>::default_instance()
    }
}

impl TPUEmbeddingOutputLayout_TwoDOutputTensor {
    pub fn new() -> TPUEmbeddingOutputLayout_TwoDOutputTensor {
        ::std::default::Default::default()
    }

    // int32 dim0_size_per_sample = 2;


    pub fn get_dim0_size_per_sample(&self) -> i32 {
        self.dim0_size_per_sample
    }
    pub fn clear_dim0_size_per_sample(&mut self) {
        self.dim0_size_per_sample = 0;
    }

    // Param is passed by value, moved
    pub fn set_dim0_size_per_sample(&mut self, v: i32) {
        self.dim0_size_per_sample = v;
    }

    // int32 dim1_size = 1;


    pub fn get_dim1_size(&self) -> i32 {
        self.dim1_size
    }
    pub fn clear_dim1_size(&mut self) {
        self.dim1_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_dim1_size(&mut self, v: i32) {
        self.dim1_size = v;
    }
}

impl ::protobuf::Message for TPUEmbeddingOutputLayout_TwoDOutputTensor {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.dim0_size_per_sample = tmp;
                },
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.dim1_size = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.dim0_size_per_sample != 0 {
            my_size += ::protobuf::rt::value_size(2, self.dim0_size_per_sample, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.dim1_size != 0 {
            my_size += ::protobuf::rt::value_size(1, self.dim1_size, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.dim0_size_per_sample != 0 {
            os.write_int32(2, self.dim0_size_per_sample)?;
        }
        if self.dim1_size != 0 {
            os.write_int32(1, self.dim1_size)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TPUEmbeddingOutputLayout_TwoDOutputTensor {
        TPUEmbeddingOutputLayout_TwoDOutputTensor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "dim0_size_per_sample",
                |m: &TPUEmbeddingOutputLayout_TwoDOutputTensor| { &m.dim0_size_per_sample },
                |m: &mut TPUEmbeddingOutputLayout_TwoDOutputTensor| { &mut m.dim0_size_per_sample },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "dim1_size",
                |m: &TPUEmbeddingOutputLayout_TwoDOutputTensor| { &m.dim1_size },
                |m: &mut TPUEmbeddingOutputLayout_TwoDOutputTensor| { &mut m.dim1_size },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TPUEmbeddingOutputLayout_TwoDOutputTensor>(
                "TPUEmbeddingOutputLayout.TwoDOutputTensor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TPUEmbeddingOutputLayout_TwoDOutputTensor {
        static instance: ::protobuf::rt::LazyV2<TPUEmbeddingOutputLayout_TwoDOutputTensor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TPUEmbeddingOutputLayout_TwoDOutputTensor::new)
    }
}

impl ::protobuf::Clear for TPUEmbeddingOutputLayout_TwoDOutputTensor {
    fn clear(&mut self) {
        self.dim0_size_per_sample = 0;
        self.dim1_size = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TPUEmbeddingOutputLayout_TwoDOutputTensor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TPUEmbeddingOutputLayout_TwoDOutputTensor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TPUEmbeddingOutputLayout_EmbeddingOutputTensor {
    // message oneof groups
    pub output_format: ::std::option::Option<TPUEmbeddingOutputLayout_EmbeddingOutputTensor_oneof_output_format>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TPUEmbeddingOutputLayout_EmbeddingOutputTensor {
    fn default() -> &'a TPUEmbeddingOutputLayout_EmbeddingOutputTensor {
        <TPUEmbeddingOutputLayout_EmbeddingOutputTensor as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum TPUEmbeddingOutputLayout_EmbeddingOutputTensor_oneof_output_format {
    two_d(TPUEmbeddingOutputLayout_TwoDOutputTensor),
}

impl TPUEmbeddingOutputLayout_EmbeddingOutputTensor {
    pub fn new() -> TPUEmbeddingOutputLayout_EmbeddingOutputTensor {
        ::std::default::Default::default()
    }

    // .tensorflow.tpu.TPUEmbeddingOutputLayout.TwoDOutputTensor two_d = 4;


    pub fn get_two_d(&self) -> &TPUEmbeddingOutputLayout_TwoDOutputTensor {
        match self.output_format {
            ::std::option::Option::Some(TPUEmbeddingOutputLayout_EmbeddingOutputTensor_oneof_output_format::two_d(ref v)) => v,
            _ => <TPUEmbeddingOutputLayout_TwoDOutputTensor as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_two_d(&mut self) {
        self.output_format = ::std::option::Option::None;
    }

    pub fn has_two_d(&self) -> bool {
        match self.output_format {
            ::std::option::Option::Some(TPUEmbeddingOutputLayout_EmbeddingOutputTensor_oneof_output_format::two_d(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_two_d(&mut self, v: TPUEmbeddingOutputLayout_TwoDOutputTensor) {
        self.output_format = ::std::option::Option::Some(TPUEmbeddingOutputLayout_EmbeddingOutputTensor_oneof_output_format::two_d(v))
    }

    // Mutable pointer to the field.
    pub fn mut_two_d(&mut self) -> &mut TPUEmbeddingOutputLayout_TwoDOutputTensor {
        if let ::std::option::Option::Some(TPUEmbeddingOutputLayout_EmbeddingOutputTensor_oneof_output_format::two_d(_)) = self.output_format {
        } else {
            self.output_format = ::std::option::Option::Some(TPUEmbeddingOutputLayout_EmbeddingOutputTensor_oneof_output_format::two_d(TPUEmbeddingOutputLayout_TwoDOutputTensor::new()));
        }
        match self.output_format {
            ::std::option::Option::Some(TPUEmbeddingOutputLayout_EmbeddingOutputTensor_oneof_output_format::two_d(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_two_d(&mut self) -> TPUEmbeddingOutputLayout_TwoDOutputTensor {
        if self.has_two_d() {
            match self.output_format.take() {
                ::std::option::Option::Some(TPUEmbeddingOutputLayout_EmbeddingOutputTensor_oneof_output_format::two_d(v)) => v,
                _ => panic!(),
            }
        } else {
            TPUEmbeddingOutputLayout_TwoDOutputTensor::new()
        }
    }
}

impl ::protobuf::Message for TPUEmbeddingOutputLayout_EmbeddingOutputTensor {
    fn is_initialized(&self) -> bool {
        if let Some(TPUEmbeddingOutputLayout_EmbeddingOutputTensor_oneof_output_format::two_d(ref v)) = self.output_format {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.output_format = ::std::option::Option::Some(TPUEmbeddingOutputLayout_EmbeddingOutputTensor_oneof_output_format::two_d(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.output_format {
            match v {
                &TPUEmbeddingOutputLayout_EmbeddingOutputTensor_oneof_output_format::two_d(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.output_format {
            match v {
                &TPUEmbeddingOutputLayout_EmbeddingOutputTensor_oneof_output_format::two_d(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TPUEmbeddingOutputLayout_EmbeddingOutputTensor {
        TPUEmbeddingOutputLayout_EmbeddingOutputTensor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, TPUEmbeddingOutputLayout_TwoDOutputTensor>(
                "two_d",
                TPUEmbeddingOutputLayout_EmbeddingOutputTensor::has_two_d,
                TPUEmbeddingOutputLayout_EmbeddingOutputTensor::get_two_d,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TPUEmbeddingOutputLayout_EmbeddingOutputTensor>(
                "TPUEmbeddingOutputLayout.EmbeddingOutputTensor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TPUEmbeddingOutputLayout_EmbeddingOutputTensor {
        static instance: ::protobuf::rt::LazyV2<TPUEmbeddingOutputLayout_EmbeddingOutputTensor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TPUEmbeddingOutputLayout_EmbeddingOutputTensor::new)
    }
}

impl ::protobuf::Clear for TPUEmbeddingOutputLayout_EmbeddingOutputTensor {
    fn clear(&mut self) {
        self.output_format = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TPUEmbeddingOutputLayout_EmbeddingOutputTensor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TPUEmbeddingOutputLayout_EmbeddingOutputTensor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n>tensorflow/core/protobuf/tpu/tpu_embedding_output_layout.proto\x12\
    \x0etensorflow.tpu\"\xf7\x05\n\x18TPUEmbeddingOutputLayout\x12N\n\x05tab\
    le\x18\x01\x20\x03(\x0b28.tensorflow.tpu.TPUEmbeddingOutputLayout.TableD\
    escriptorR\x05table\x12V\n\x06output\x18\x02\x20\x03(\x0b2>.tensorflow.t\
    pu.TPUEmbeddingOutputLayout.EmbeddingOutputTensorR\x06output\x1au\n\x0eO\
    utputLocation\x12!\n\x0ctensor_index\x18\x01\x20\x01(\x05R\x0btensorInde\
    x\x12\x1f\n\x0bdim0_offset\x18\x02\x20\x01(\x05R\ndim0Offset\x12\x1f\n\
    \x0bdim1_offset\x18\x03\x20\x01(\x05R\ndim1Offset\x1au\n\x11FeatureDescr\
    iptor\x12`\n\x0foutput_location\x18\x01\x20\x03(\x0b27.tensorflow.tpu.TP\
    UEmbeddingOutputLayout.OutputLocationR\x0eoutputLocation\x1ag\n\x0fTable\
    Descriptor\x12T\n\x07feature\x18\x01\x20\x03(\x0b2:.tensorflow.tpu.TPUEm\
    beddingOutputLayout.FeatureDescriptorR\x07feature\x1a`\n\x10TwoDOutputTe\
    nsor\x12/\n\x14dim0_size_per_sample\x18\x02\x20\x01(\x05R\x11dim0SizePer\
    Sample\x12\x1b\n\tdim1_size\x18\x01\x20\x01(\x05R\x08dim1Size\x1az\n\x15\
    EmbeddingOutputTensor\x12P\n\x05two_d\x18\x04\x20\x01(\x0b29.tensorflow.\
    tpu.TPUEmbeddingOutputLayout.TwoDOutputTensorH\0R\x04twoDB\x0f\n\routput\
    _formatb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
