// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow/core/framework/graph_transfer_info.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct GraphTransferNodeInput {
    // message fields
    pub node_id: i32,
    pub output_port: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GraphTransferNodeInput {
    fn default() -> &'a GraphTransferNodeInput {
        <GraphTransferNodeInput as ::protobuf::Message>::default_instance()
    }
}

impl GraphTransferNodeInput {
    pub fn new() -> GraphTransferNodeInput {
        ::std::default::Default::default()
    }

    // int32 node_id = 1;


    pub fn get_node_id(&self) -> i32 {
        self.node_id
    }
    pub fn clear_node_id(&mut self) {
        self.node_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_node_id(&mut self, v: i32) {
        self.node_id = v;
    }

    // int32 output_port = 2;


    pub fn get_output_port(&self) -> i32 {
        self.output_port
    }
    pub fn clear_output_port(&mut self) {
        self.output_port = 0;
    }

    // Param is passed by value, moved
    pub fn set_output_port(&mut self, v: i32) {
        self.output_port = v;
    }
}

impl ::protobuf::Message for GraphTransferNodeInput {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.node_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.output_port = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.node_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.node_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.output_port != 0 {
            my_size += ::protobuf::rt::value_size(2, self.output_port, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.node_id != 0 {
            os.write_int32(1, self.node_id)?;
        }
        if self.output_port != 0 {
            os.write_int32(2, self.output_port)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GraphTransferNodeInput {
        GraphTransferNodeInput::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "node_id",
                |m: &GraphTransferNodeInput| { &m.node_id },
                |m: &mut GraphTransferNodeInput| { &mut m.node_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "output_port",
                |m: &GraphTransferNodeInput| { &m.output_port },
                |m: &mut GraphTransferNodeInput| { &mut m.output_port },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GraphTransferNodeInput>(
                "GraphTransferNodeInput",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GraphTransferNodeInput {
        static instance: ::protobuf::rt::LazyV2<GraphTransferNodeInput> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GraphTransferNodeInput::new)
    }
}

impl ::protobuf::Clear for GraphTransferNodeInput {
    fn clear(&mut self) {
        self.node_id = 0;
        self.output_port = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GraphTransferNodeInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GraphTransferNodeInput {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GraphTransferNodeInfo {
    // message fields
    pub name: ::std::string::String,
    pub node_id: i32,
    pub type_name: ::std::string::String,
    pub soc_op_id: i32,
    pub padding_id: i32,
    pub input_count: i32,
    pub output_count: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GraphTransferNodeInfo {
    fn default() -> &'a GraphTransferNodeInfo {
        <GraphTransferNodeInfo as ::protobuf::Message>::default_instance()
    }
}

impl GraphTransferNodeInfo {
    pub fn new() -> GraphTransferNodeInfo {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // int32 node_id = 2;


    pub fn get_node_id(&self) -> i32 {
        self.node_id
    }
    pub fn clear_node_id(&mut self) {
        self.node_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_node_id(&mut self, v: i32) {
        self.node_id = v;
    }

    // string type_name = 3;


    pub fn get_type_name(&self) -> &str {
        &self.type_name
    }
    pub fn clear_type_name(&mut self) {
        self.type_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_type_name(&mut self, v: ::std::string::String) {
        self.type_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type_name(&mut self) -> &mut ::std::string::String {
        &mut self.type_name
    }

    // Take field
    pub fn take_type_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.type_name, ::std::string::String::new())
    }

    // int32 soc_op_id = 4;


    pub fn get_soc_op_id(&self) -> i32 {
        self.soc_op_id
    }
    pub fn clear_soc_op_id(&mut self) {
        self.soc_op_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_soc_op_id(&mut self, v: i32) {
        self.soc_op_id = v;
    }

    // int32 padding_id = 5;


    pub fn get_padding_id(&self) -> i32 {
        self.padding_id
    }
    pub fn clear_padding_id(&mut self) {
        self.padding_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_padding_id(&mut self, v: i32) {
        self.padding_id = v;
    }

    // int32 input_count = 6;


    pub fn get_input_count(&self) -> i32 {
        self.input_count
    }
    pub fn clear_input_count(&mut self) {
        self.input_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_input_count(&mut self, v: i32) {
        self.input_count = v;
    }

    // int32 output_count = 7;


    pub fn get_output_count(&self) -> i32 {
        self.output_count
    }
    pub fn clear_output_count(&mut self) {
        self.output_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_output_count(&mut self, v: i32) {
        self.output_count = v;
    }
}

impl ::protobuf::Message for GraphTransferNodeInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.node_id = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.type_name)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.soc_op_id = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.padding_id = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.input_count = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.output_count = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.node_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.node_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.type_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.type_name);
        }
        if self.soc_op_id != 0 {
            my_size += ::protobuf::rt::value_size(4, self.soc_op_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.padding_id != 0 {
            my_size += ::protobuf::rt::value_size(5, self.padding_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.input_count != 0 {
            my_size += ::protobuf::rt::value_size(6, self.input_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.output_count != 0 {
            my_size += ::protobuf::rt::value_size(7, self.output_count, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.node_id != 0 {
            os.write_int32(2, self.node_id)?;
        }
        if !self.type_name.is_empty() {
            os.write_string(3, &self.type_name)?;
        }
        if self.soc_op_id != 0 {
            os.write_int32(4, self.soc_op_id)?;
        }
        if self.padding_id != 0 {
            os.write_int32(5, self.padding_id)?;
        }
        if self.input_count != 0 {
            os.write_int32(6, self.input_count)?;
        }
        if self.output_count != 0 {
            os.write_int32(7, self.output_count)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GraphTransferNodeInfo {
        GraphTransferNodeInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GraphTransferNodeInfo| { &m.name },
                |m: &mut GraphTransferNodeInfo| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "node_id",
                |m: &GraphTransferNodeInfo| { &m.node_id },
                |m: &mut GraphTransferNodeInfo| { &mut m.node_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type_name",
                |m: &GraphTransferNodeInfo| { &m.type_name },
                |m: &mut GraphTransferNodeInfo| { &mut m.type_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "soc_op_id",
                |m: &GraphTransferNodeInfo| { &m.soc_op_id },
                |m: &mut GraphTransferNodeInfo| { &mut m.soc_op_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "padding_id",
                |m: &GraphTransferNodeInfo| { &m.padding_id },
                |m: &mut GraphTransferNodeInfo| { &mut m.padding_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "input_count",
                |m: &GraphTransferNodeInfo| { &m.input_count },
                |m: &mut GraphTransferNodeInfo| { &mut m.input_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "output_count",
                |m: &GraphTransferNodeInfo| { &m.output_count },
                |m: &mut GraphTransferNodeInfo| { &mut m.output_count },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GraphTransferNodeInfo>(
                "GraphTransferNodeInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GraphTransferNodeInfo {
        static instance: ::protobuf::rt::LazyV2<GraphTransferNodeInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GraphTransferNodeInfo::new)
    }
}

impl ::protobuf::Clear for GraphTransferNodeInfo {
    fn clear(&mut self) {
        self.name.clear();
        self.node_id = 0;
        self.type_name.clear();
        self.soc_op_id = 0;
        self.padding_id = 0;
        self.input_count = 0;
        self.output_count = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GraphTransferNodeInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GraphTransferNodeInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GraphTransferConstNodeInfo {
    // message fields
    pub name: ::std::string::String,
    pub node_id: i32,
    pub shape: ::std::vec::Vec<i64>,
    pub data: ::std::vec::Vec<u8>,
    pub dtype: super::types::DataType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GraphTransferConstNodeInfo {
    fn default() -> &'a GraphTransferConstNodeInfo {
        <GraphTransferConstNodeInfo as ::protobuf::Message>::default_instance()
    }
}

impl GraphTransferConstNodeInfo {
    pub fn new() -> GraphTransferConstNodeInfo {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // int32 node_id = 2;


    pub fn get_node_id(&self) -> i32 {
        self.node_id
    }
    pub fn clear_node_id(&mut self) {
        self.node_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_node_id(&mut self, v: i32) {
        self.node_id = v;
    }

    // repeated int64 shape = 3;


    pub fn get_shape(&self) -> &[i64] {
        &self.shape
    }
    pub fn clear_shape(&mut self) {
        self.shape.clear();
    }

    // Param is passed by value, moved
    pub fn set_shape(&mut self, v: ::std::vec::Vec<i64>) {
        self.shape = v;
    }

    // Mutable pointer to the field.
    pub fn mut_shape(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.shape
    }

    // Take field
    pub fn take_shape(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.shape, ::std::vec::Vec::new())
    }

    // bytes data = 4;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    // .tensorflow.DataType dtype = 5;


    pub fn get_dtype(&self) -> super::types::DataType {
        self.dtype
    }
    pub fn clear_dtype(&mut self) {
        self.dtype = super::types::DataType::DT_INVALID;
    }

    // Param is passed by value, moved
    pub fn set_dtype(&mut self, v: super::types::DataType) {
        self.dtype = v;
    }
}

impl ::protobuf::Message for GraphTransferConstNodeInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.node_id = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_int64_into(wire_type, is, &mut self.shape)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.dtype, 5, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.node_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.node_id, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.shape {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.data);
        }
        if self.dtype != super::types::DataType::DT_INVALID {
            my_size += ::protobuf::rt::enum_size(5, self.dtype);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.node_id != 0 {
            os.write_int32(2, self.node_id)?;
        }
        for v in &self.shape {
            os.write_int64(3, *v)?;
        };
        if !self.data.is_empty() {
            os.write_bytes(4, &self.data)?;
        }
        if self.dtype != super::types::DataType::DT_INVALID {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(&self.dtype))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GraphTransferConstNodeInfo {
        GraphTransferConstNodeInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GraphTransferConstNodeInfo| { &m.name },
                |m: &mut GraphTransferConstNodeInfo| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "node_id",
                |m: &GraphTransferConstNodeInfo| { &m.node_id },
                |m: &mut GraphTransferConstNodeInfo| { &mut m.node_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "shape",
                |m: &GraphTransferConstNodeInfo| { &m.shape },
                |m: &mut GraphTransferConstNodeInfo| { &mut m.shape },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &GraphTransferConstNodeInfo| { &m.data },
                |m: &mut GraphTransferConstNodeInfo| { &mut m.data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::types::DataType>>(
                "dtype",
                |m: &GraphTransferConstNodeInfo| { &m.dtype },
                |m: &mut GraphTransferConstNodeInfo| { &mut m.dtype },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GraphTransferConstNodeInfo>(
                "GraphTransferConstNodeInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GraphTransferConstNodeInfo {
        static instance: ::protobuf::rt::LazyV2<GraphTransferConstNodeInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GraphTransferConstNodeInfo::new)
    }
}

impl ::protobuf::Clear for GraphTransferConstNodeInfo {
    fn clear(&mut self) {
        self.name.clear();
        self.node_id = 0;
        self.shape.clear();
        self.data.clear();
        self.dtype = super::types::DataType::DT_INVALID;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GraphTransferConstNodeInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GraphTransferConstNodeInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GraphTransferNodeInputInfo {
    // message fields
    pub node_id: i32,
    pub node_input: ::protobuf::RepeatedField<GraphTransferNodeInput>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GraphTransferNodeInputInfo {
    fn default() -> &'a GraphTransferNodeInputInfo {
        <GraphTransferNodeInputInfo as ::protobuf::Message>::default_instance()
    }
}

impl GraphTransferNodeInputInfo {
    pub fn new() -> GraphTransferNodeInputInfo {
        ::std::default::Default::default()
    }

    // int32 node_id = 1;


    pub fn get_node_id(&self) -> i32 {
        self.node_id
    }
    pub fn clear_node_id(&mut self) {
        self.node_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_node_id(&mut self, v: i32) {
        self.node_id = v;
    }

    // repeated .tensorflow.GraphTransferNodeInput node_input = 2;


    pub fn get_node_input(&self) -> &[GraphTransferNodeInput] {
        &self.node_input
    }
    pub fn clear_node_input(&mut self) {
        self.node_input.clear();
    }

    // Param is passed by value, moved
    pub fn set_node_input(&mut self, v: ::protobuf::RepeatedField<GraphTransferNodeInput>) {
        self.node_input = v;
    }

    // Mutable pointer to the field.
    pub fn mut_node_input(&mut self) -> &mut ::protobuf::RepeatedField<GraphTransferNodeInput> {
        &mut self.node_input
    }

    // Take field
    pub fn take_node_input(&mut self) -> ::protobuf::RepeatedField<GraphTransferNodeInput> {
        ::std::mem::replace(&mut self.node_input, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GraphTransferNodeInputInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.node_input {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.node_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.node_input)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.node_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.node_id, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.node_input {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.node_id != 0 {
            os.write_int32(1, self.node_id)?;
        }
        for v in &self.node_input {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GraphTransferNodeInputInfo {
        GraphTransferNodeInputInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "node_id",
                |m: &GraphTransferNodeInputInfo| { &m.node_id },
                |m: &mut GraphTransferNodeInputInfo| { &mut m.node_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GraphTransferNodeInput>>(
                "node_input",
                |m: &GraphTransferNodeInputInfo| { &m.node_input },
                |m: &mut GraphTransferNodeInputInfo| { &mut m.node_input },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GraphTransferNodeInputInfo>(
                "GraphTransferNodeInputInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GraphTransferNodeInputInfo {
        static instance: ::protobuf::rt::LazyV2<GraphTransferNodeInputInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GraphTransferNodeInputInfo::new)
    }
}

impl ::protobuf::Clear for GraphTransferNodeInputInfo {
    fn clear(&mut self) {
        self.node_id = 0;
        self.node_input.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GraphTransferNodeInputInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GraphTransferNodeInputInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GraphTransferNodeOutputInfo {
    // message fields
    pub node_id: i32,
    pub max_byte_size: ::std::vec::Vec<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GraphTransferNodeOutputInfo {
    fn default() -> &'a GraphTransferNodeOutputInfo {
        <GraphTransferNodeOutputInfo as ::protobuf::Message>::default_instance()
    }
}

impl GraphTransferNodeOutputInfo {
    pub fn new() -> GraphTransferNodeOutputInfo {
        ::std::default::Default::default()
    }

    // int32 node_id = 1;


    pub fn get_node_id(&self) -> i32 {
        self.node_id
    }
    pub fn clear_node_id(&mut self) {
        self.node_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_node_id(&mut self, v: i32) {
        self.node_id = v;
    }

    // repeated int32 max_byte_size = 2;


    pub fn get_max_byte_size(&self) -> &[i32] {
        &self.max_byte_size
    }
    pub fn clear_max_byte_size(&mut self) {
        self.max_byte_size.clear();
    }

    // Param is passed by value, moved
    pub fn set_max_byte_size(&mut self, v: ::std::vec::Vec<i32>) {
        self.max_byte_size = v;
    }

    // Mutable pointer to the field.
    pub fn mut_max_byte_size(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.max_byte_size
    }

    // Take field
    pub fn take_max_byte_size(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.max_byte_size, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for GraphTransferNodeOutputInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.node_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.max_byte_size)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.node_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.node_id, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.max_byte_size {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.node_id != 0 {
            os.write_int32(1, self.node_id)?;
        }
        for v in &self.max_byte_size {
            os.write_int32(2, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GraphTransferNodeOutputInfo {
        GraphTransferNodeOutputInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "node_id",
                |m: &GraphTransferNodeOutputInfo| { &m.node_id },
                |m: &mut GraphTransferNodeOutputInfo| { &mut m.node_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "max_byte_size",
                |m: &GraphTransferNodeOutputInfo| { &m.max_byte_size },
                |m: &mut GraphTransferNodeOutputInfo| { &mut m.max_byte_size },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GraphTransferNodeOutputInfo>(
                "GraphTransferNodeOutputInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GraphTransferNodeOutputInfo {
        static instance: ::protobuf::rt::LazyV2<GraphTransferNodeOutputInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GraphTransferNodeOutputInfo::new)
    }
}

impl ::protobuf::Clear for GraphTransferNodeOutputInfo {
    fn clear(&mut self) {
        self.node_id = 0;
        self.max_byte_size.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GraphTransferNodeOutputInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GraphTransferNodeOutputInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GraphTransferGraphInputNodeInfo {
    // message fields
    pub name: ::std::string::String,
    pub shape: ::std::vec::Vec<i64>,
    pub dtype: super::types::DataType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GraphTransferGraphInputNodeInfo {
    fn default() -> &'a GraphTransferGraphInputNodeInfo {
        <GraphTransferGraphInputNodeInfo as ::protobuf::Message>::default_instance()
    }
}

impl GraphTransferGraphInputNodeInfo {
    pub fn new() -> GraphTransferGraphInputNodeInfo {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // repeated int64 shape = 2;


    pub fn get_shape(&self) -> &[i64] {
        &self.shape
    }
    pub fn clear_shape(&mut self) {
        self.shape.clear();
    }

    // Param is passed by value, moved
    pub fn set_shape(&mut self, v: ::std::vec::Vec<i64>) {
        self.shape = v;
    }

    // Mutable pointer to the field.
    pub fn mut_shape(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.shape
    }

    // Take field
    pub fn take_shape(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.shape, ::std::vec::Vec::new())
    }

    // .tensorflow.DataType dtype = 3;


    pub fn get_dtype(&self) -> super::types::DataType {
        self.dtype
    }
    pub fn clear_dtype(&mut self) {
        self.dtype = super::types::DataType::DT_INVALID;
    }

    // Param is passed by value, moved
    pub fn set_dtype(&mut self, v: super::types::DataType) {
        self.dtype = v;
    }
}

impl ::protobuf::Message for GraphTransferGraphInputNodeInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_int64_into(wire_type, is, &mut self.shape)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.dtype, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        for value in &self.shape {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.dtype != super::types::DataType::DT_INVALID {
            my_size += ::protobuf::rt::enum_size(3, self.dtype);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        for v in &self.shape {
            os.write_int64(2, *v)?;
        };
        if self.dtype != super::types::DataType::DT_INVALID {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.dtype))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GraphTransferGraphInputNodeInfo {
        GraphTransferGraphInputNodeInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GraphTransferGraphInputNodeInfo| { &m.name },
                |m: &mut GraphTransferGraphInputNodeInfo| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "shape",
                |m: &GraphTransferGraphInputNodeInfo| { &m.shape },
                |m: &mut GraphTransferGraphInputNodeInfo| { &mut m.shape },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::types::DataType>>(
                "dtype",
                |m: &GraphTransferGraphInputNodeInfo| { &m.dtype },
                |m: &mut GraphTransferGraphInputNodeInfo| { &mut m.dtype },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GraphTransferGraphInputNodeInfo>(
                "GraphTransferGraphInputNodeInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GraphTransferGraphInputNodeInfo {
        static instance: ::protobuf::rt::LazyV2<GraphTransferGraphInputNodeInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GraphTransferGraphInputNodeInfo::new)
    }
}

impl ::protobuf::Clear for GraphTransferGraphInputNodeInfo {
    fn clear(&mut self) {
        self.name.clear();
        self.shape.clear();
        self.dtype = super::types::DataType::DT_INVALID;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GraphTransferGraphInputNodeInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GraphTransferGraphInputNodeInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GraphTransferGraphOutputNodeInfo {
    // message fields
    pub name: ::std::string::String,
    pub shape: ::std::vec::Vec<i64>,
    pub dtype: super::types::DataType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GraphTransferGraphOutputNodeInfo {
    fn default() -> &'a GraphTransferGraphOutputNodeInfo {
        <GraphTransferGraphOutputNodeInfo as ::protobuf::Message>::default_instance()
    }
}

impl GraphTransferGraphOutputNodeInfo {
    pub fn new() -> GraphTransferGraphOutputNodeInfo {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // repeated int64 shape = 2;


    pub fn get_shape(&self) -> &[i64] {
        &self.shape
    }
    pub fn clear_shape(&mut self) {
        self.shape.clear();
    }

    // Param is passed by value, moved
    pub fn set_shape(&mut self, v: ::std::vec::Vec<i64>) {
        self.shape = v;
    }

    // Mutable pointer to the field.
    pub fn mut_shape(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.shape
    }

    // Take field
    pub fn take_shape(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.shape, ::std::vec::Vec::new())
    }

    // .tensorflow.DataType dtype = 3;


    pub fn get_dtype(&self) -> super::types::DataType {
        self.dtype
    }
    pub fn clear_dtype(&mut self) {
        self.dtype = super::types::DataType::DT_INVALID;
    }

    // Param is passed by value, moved
    pub fn set_dtype(&mut self, v: super::types::DataType) {
        self.dtype = v;
    }
}

impl ::protobuf::Message for GraphTransferGraphOutputNodeInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_int64_into(wire_type, is, &mut self.shape)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.dtype, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        for value in &self.shape {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.dtype != super::types::DataType::DT_INVALID {
            my_size += ::protobuf::rt::enum_size(3, self.dtype);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        for v in &self.shape {
            os.write_int64(2, *v)?;
        };
        if self.dtype != super::types::DataType::DT_INVALID {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.dtype))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GraphTransferGraphOutputNodeInfo {
        GraphTransferGraphOutputNodeInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GraphTransferGraphOutputNodeInfo| { &m.name },
                |m: &mut GraphTransferGraphOutputNodeInfo| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "shape",
                |m: &GraphTransferGraphOutputNodeInfo| { &m.shape },
                |m: &mut GraphTransferGraphOutputNodeInfo| { &mut m.shape },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::types::DataType>>(
                "dtype",
                |m: &GraphTransferGraphOutputNodeInfo| { &m.dtype },
                |m: &mut GraphTransferGraphOutputNodeInfo| { &mut m.dtype },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GraphTransferGraphOutputNodeInfo>(
                "GraphTransferGraphOutputNodeInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GraphTransferGraphOutputNodeInfo {
        static instance: ::protobuf::rt::LazyV2<GraphTransferGraphOutputNodeInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GraphTransferGraphOutputNodeInfo::new)
    }
}

impl ::protobuf::Clear for GraphTransferGraphOutputNodeInfo {
    fn clear(&mut self) {
        self.name.clear();
        self.shape.clear();
        self.dtype = super::types::DataType::DT_INVALID;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GraphTransferGraphOutputNodeInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GraphTransferGraphOutputNodeInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GraphTransferInfo {
    // message fields
    pub node_info: ::protobuf::RepeatedField<GraphTransferNodeInfo>,
    pub const_node_info: ::protobuf::RepeatedField<GraphTransferConstNodeInfo>,
    pub node_input_info: ::protobuf::RepeatedField<GraphTransferNodeInputInfo>,
    pub node_output_info: ::protobuf::RepeatedField<GraphTransferNodeOutputInfo>,
    pub graph_input_node_info: ::protobuf::RepeatedField<GraphTransferGraphInputNodeInfo>,
    pub graph_output_node_info: ::protobuf::RepeatedField<GraphTransferGraphOutputNodeInfo>,
    pub destination: GraphTransferInfo_Destination,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GraphTransferInfo {
    fn default() -> &'a GraphTransferInfo {
        <GraphTransferInfo as ::protobuf::Message>::default_instance()
    }
}

impl GraphTransferInfo {
    pub fn new() -> GraphTransferInfo {
        ::std::default::Default::default()
    }

    // repeated .tensorflow.GraphTransferNodeInfo node_info = 1;


    pub fn get_node_info(&self) -> &[GraphTransferNodeInfo] {
        &self.node_info
    }
    pub fn clear_node_info(&mut self) {
        self.node_info.clear();
    }

    // Param is passed by value, moved
    pub fn set_node_info(&mut self, v: ::protobuf::RepeatedField<GraphTransferNodeInfo>) {
        self.node_info = v;
    }

    // Mutable pointer to the field.
    pub fn mut_node_info(&mut self) -> &mut ::protobuf::RepeatedField<GraphTransferNodeInfo> {
        &mut self.node_info
    }

    // Take field
    pub fn take_node_info(&mut self) -> ::protobuf::RepeatedField<GraphTransferNodeInfo> {
        ::std::mem::replace(&mut self.node_info, ::protobuf::RepeatedField::new())
    }

    // repeated .tensorflow.GraphTransferConstNodeInfo const_node_info = 2;


    pub fn get_const_node_info(&self) -> &[GraphTransferConstNodeInfo] {
        &self.const_node_info
    }
    pub fn clear_const_node_info(&mut self) {
        self.const_node_info.clear();
    }

    // Param is passed by value, moved
    pub fn set_const_node_info(&mut self, v: ::protobuf::RepeatedField<GraphTransferConstNodeInfo>) {
        self.const_node_info = v;
    }

    // Mutable pointer to the field.
    pub fn mut_const_node_info(&mut self) -> &mut ::protobuf::RepeatedField<GraphTransferConstNodeInfo> {
        &mut self.const_node_info
    }

    // Take field
    pub fn take_const_node_info(&mut self) -> ::protobuf::RepeatedField<GraphTransferConstNodeInfo> {
        ::std::mem::replace(&mut self.const_node_info, ::protobuf::RepeatedField::new())
    }

    // repeated .tensorflow.GraphTransferNodeInputInfo node_input_info = 3;


    pub fn get_node_input_info(&self) -> &[GraphTransferNodeInputInfo] {
        &self.node_input_info
    }
    pub fn clear_node_input_info(&mut self) {
        self.node_input_info.clear();
    }

    // Param is passed by value, moved
    pub fn set_node_input_info(&mut self, v: ::protobuf::RepeatedField<GraphTransferNodeInputInfo>) {
        self.node_input_info = v;
    }

    // Mutable pointer to the field.
    pub fn mut_node_input_info(&mut self) -> &mut ::protobuf::RepeatedField<GraphTransferNodeInputInfo> {
        &mut self.node_input_info
    }

    // Take field
    pub fn take_node_input_info(&mut self) -> ::protobuf::RepeatedField<GraphTransferNodeInputInfo> {
        ::std::mem::replace(&mut self.node_input_info, ::protobuf::RepeatedField::new())
    }

    // repeated .tensorflow.GraphTransferNodeOutputInfo node_output_info = 4;


    pub fn get_node_output_info(&self) -> &[GraphTransferNodeOutputInfo] {
        &self.node_output_info
    }
    pub fn clear_node_output_info(&mut self) {
        self.node_output_info.clear();
    }

    // Param is passed by value, moved
    pub fn set_node_output_info(&mut self, v: ::protobuf::RepeatedField<GraphTransferNodeOutputInfo>) {
        self.node_output_info = v;
    }

    // Mutable pointer to the field.
    pub fn mut_node_output_info(&mut self) -> &mut ::protobuf::RepeatedField<GraphTransferNodeOutputInfo> {
        &mut self.node_output_info
    }

    // Take field
    pub fn take_node_output_info(&mut self) -> ::protobuf::RepeatedField<GraphTransferNodeOutputInfo> {
        ::std::mem::replace(&mut self.node_output_info, ::protobuf::RepeatedField::new())
    }

    // repeated .tensorflow.GraphTransferGraphInputNodeInfo graph_input_node_info = 5;


    pub fn get_graph_input_node_info(&self) -> &[GraphTransferGraphInputNodeInfo] {
        &self.graph_input_node_info
    }
    pub fn clear_graph_input_node_info(&mut self) {
        self.graph_input_node_info.clear();
    }

    // Param is passed by value, moved
    pub fn set_graph_input_node_info(&mut self, v: ::protobuf::RepeatedField<GraphTransferGraphInputNodeInfo>) {
        self.graph_input_node_info = v;
    }

    // Mutable pointer to the field.
    pub fn mut_graph_input_node_info(&mut self) -> &mut ::protobuf::RepeatedField<GraphTransferGraphInputNodeInfo> {
        &mut self.graph_input_node_info
    }

    // Take field
    pub fn take_graph_input_node_info(&mut self) -> ::protobuf::RepeatedField<GraphTransferGraphInputNodeInfo> {
        ::std::mem::replace(&mut self.graph_input_node_info, ::protobuf::RepeatedField::new())
    }

    // repeated .tensorflow.GraphTransferGraphOutputNodeInfo graph_output_node_info = 6;


    pub fn get_graph_output_node_info(&self) -> &[GraphTransferGraphOutputNodeInfo] {
        &self.graph_output_node_info
    }
    pub fn clear_graph_output_node_info(&mut self) {
        self.graph_output_node_info.clear();
    }

    // Param is passed by value, moved
    pub fn set_graph_output_node_info(&mut self, v: ::protobuf::RepeatedField<GraphTransferGraphOutputNodeInfo>) {
        self.graph_output_node_info = v;
    }

    // Mutable pointer to the field.
    pub fn mut_graph_output_node_info(&mut self) -> &mut ::protobuf::RepeatedField<GraphTransferGraphOutputNodeInfo> {
        &mut self.graph_output_node_info
    }

    // Take field
    pub fn take_graph_output_node_info(&mut self) -> ::protobuf::RepeatedField<GraphTransferGraphOutputNodeInfo> {
        ::std::mem::replace(&mut self.graph_output_node_info, ::protobuf::RepeatedField::new())
    }

    // .tensorflow.GraphTransferInfo.Destination destination = 7;


    pub fn get_destination(&self) -> GraphTransferInfo_Destination {
        self.destination
    }
    pub fn clear_destination(&mut self) {
        self.destination = GraphTransferInfo_Destination::NOP;
    }

    // Param is passed by value, moved
    pub fn set_destination(&mut self, v: GraphTransferInfo_Destination) {
        self.destination = v;
    }
}

impl ::protobuf::Message for GraphTransferInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.node_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.const_node_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.node_input_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.node_output_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.graph_input_node_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.graph_output_node_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.node_info)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.const_node_info)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.node_input_info)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.node_output_info)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.graph_input_node_info)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.graph_output_node_info)?;
                },
                7 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.destination, 7, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.node_info {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.const_node_info {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.node_input_info {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.node_output_info {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.graph_input_node_info {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.graph_output_node_info {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.destination != GraphTransferInfo_Destination::NOP {
            my_size += ::protobuf::rt::enum_size(7, self.destination);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.node_info {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.const_node_info {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.node_input_info {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.node_output_info {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.graph_input_node_info {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.graph_output_node_info {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.destination != GraphTransferInfo_Destination::NOP {
            os.write_enum(7, ::protobuf::ProtobufEnum::value(&self.destination))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GraphTransferInfo {
        GraphTransferInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GraphTransferNodeInfo>>(
                "node_info",
                |m: &GraphTransferInfo| { &m.node_info },
                |m: &mut GraphTransferInfo| { &mut m.node_info },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GraphTransferConstNodeInfo>>(
                "const_node_info",
                |m: &GraphTransferInfo| { &m.const_node_info },
                |m: &mut GraphTransferInfo| { &mut m.const_node_info },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GraphTransferNodeInputInfo>>(
                "node_input_info",
                |m: &GraphTransferInfo| { &m.node_input_info },
                |m: &mut GraphTransferInfo| { &mut m.node_input_info },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GraphTransferNodeOutputInfo>>(
                "node_output_info",
                |m: &GraphTransferInfo| { &m.node_output_info },
                |m: &mut GraphTransferInfo| { &mut m.node_output_info },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GraphTransferGraphInputNodeInfo>>(
                "graph_input_node_info",
                |m: &GraphTransferInfo| { &m.graph_input_node_info },
                |m: &mut GraphTransferInfo| { &mut m.graph_input_node_info },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GraphTransferGraphOutputNodeInfo>>(
                "graph_output_node_info",
                |m: &GraphTransferInfo| { &m.graph_output_node_info },
                |m: &mut GraphTransferInfo| { &mut m.graph_output_node_info },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<GraphTransferInfo_Destination>>(
                "destination",
                |m: &GraphTransferInfo| { &m.destination },
                |m: &mut GraphTransferInfo| { &mut m.destination },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GraphTransferInfo>(
                "GraphTransferInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GraphTransferInfo {
        static instance: ::protobuf::rt::LazyV2<GraphTransferInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GraphTransferInfo::new)
    }
}

impl ::protobuf::Clear for GraphTransferInfo {
    fn clear(&mut self) {
        self.node_info.clear();
        self.const_node_info.clear();
        self.node_input_info.clear();
        self.node_output_info.clear();
        self.graph_input_node_info.clear();
        self.graph_output_node_info.clear();
        self.destination = GraphTransferInfo_Destination::NOP;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GraphTransferInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GraphTransferInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum GraphTransferInfo_Destination {
    NOP = 0,
    HEXAGON = 1,
}

impl ::protobuf::ProtobufEnum for GraphTransferInfo_Destination {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<GraphTransferInfo_Destination> {
        match value {
            0 => ::std::option::Option::Some(GraphTransferInfo_Destination::NOP),
            1 => ::std::option::Option::Some(GraphTransferInfo_Destination::HEXAGON),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [GraphTransferInfo_Destination] = &[
            GraphTransferInfo_Destination::NOP,
            GraphTransferInfo_Destination::HEXAGON,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<GraphTransferInfo_Destination>("GraphTransferInfo.Destination", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for GraphTransferInfo_Destination {
}

impl ::std::default::Default for GraphTransferInfo_Destination {
    fn default() -> Self {
        GraphTransferInfo_Destination::NOP
    }
}

impl ::protobuf::reflect::ProtobufValue for GraphTransferInfo_Destination {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n3tensorflow/core/framework/graph_transfer_info.proto\x12\ntensorflow\
    \x1a%tensorflow/core/framework/types.proto\"R\n\x16GraphTransferNodeInpu\
    t\x12\x17\n\x07node_id\x18\x01\x20\x01(\x05R\x06nodeId\x12\x1f\n\x0boutp\
    ut_port\x18\x02\x20\x01(\x05R\noutputPort\"\xe0\x01\n\x15GraphTransferNo\
    deInfo\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x17\n\x07node_i\
    d\x18\x02\x20\x01(\x05R\x06nodeId\x12\x1b\n\ttype_name\x18\x03\x20\x01(\
    \tR\x08typeName\x12\x1a\n\tsoc_op_id\x18\x04\x20\x01(\x05R\x07socOpId\
    \x12\x1d\n\npadding_id\x18\x05\x20\x01(\x05R\tpaddingId\x12\x1f\n\x0binp\
    ut_count\x18\x06\x20\x01(\x05R\ninputCount\x12!\n\x0coutput_count\x18\
    \x07\x20\x01(\x05R\x0boutputCount\"\x9f\x01\n\x1aGraphTransferConstNodeI\
    nfo\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x17\n\x07node_id\
    \x18\x02\x20\x01(\x05R\x06nodeId\x12\x14\n\x05shape\x18\x03\x20\x03(\x03\
    R\x05shape\x12\x12\n\x04data\x18\x04\x20\x01(\x0cR\x04data\x12*\n\x05dty\
    pe\x18\x05\x20\x01(\x0e2\x14.tensorflow.DataTypeR\x05dtype\"x\n\x1aGraph\
    TransferNodeInputInfo\x12\x17\n\x07node_id\x18\x01\x20\x01(\x05R\x06node\
    Id\x12A\n\nnode_input\x18\x02\x20\x03(\x0b2\".tensorflow.GraphTransferNo\
    deInputR\tnodeInput\"Z\n\x1bGraphTransferNodeOutputInfo\x12\x17\n\x07nod\
    e_id\x18\x01\x20\x01(\x05R\x06nodeId\x12\"\n\rmax_byte_size\x18\x02\x20\
    \x03(\x05R\x0bmaxByteSize\"w\n\x1fGraphTransferGraphInputNodeInfo\x12\
    \x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x14\n\x05shape\x18\x02\
    \x20\x03(\x03R\x05shape\x12*\n\x05dtype\x18\x03\x20\x01(\x0e2\x14.tensor\
    flow.DataTypeR\x05dtype\"x\n\x20GraphTransferGraphOutputNodeInfo\x12\x12\
    \n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x14\n\x05shape\x18\x02\x20\
    \x03(\x03R\x05shape\x12*\n\x05dtype\x18\x03\x20\x01(\x0e2\x14.tensorflow\
    .DataTypeR\x05dtype\"\xfb\x04\n\x11GraphTransferInfo\x12>\n\tnode_info\
    \x18\x01\x20\x03(\x0b2!.tensorflow.GraphTransferNodeInfoR\x08nodeInfo\
    \x12N\n\x0fconst_node_info\x18\x02\x20\x03(\x0b2&.tensorflow.GraphTransf\
    erConstNodeInfoR\rconstNodeInfo\x12N\n\x0fnode_input_info\x18\x03\x20\
    \x03(\x0b2&.tensorflow.GraphTransferNodeInputInfoR\rnodeInputInfo\x12Q\n\
    \x10node_output_info\x18\x04\x20\x03(\x0b2'.tensorflow.GraphTransferNode\
    OutputInfoR\x0enodeOutputInfo\x12^\n\x15graph_input_node_info\x18\x05\
    \x20\x03(\x0b2+.tensorflow.GraphTransferGraphInputNodeInfoR\x12graphInpu\
    tNodeInfo\x12a\n\x16graph_output_node_info\x18\x06\x20\x03(\x0b2,.tensor\
    flow.GraphTransferGraphOutputNodeInfoR\x13graphOutputNodeInfo\x12K\n\x0b\
    destination\x18\x07\x20\x01(\x0e2).tensorflow.GraphTransferInfo.Destinat\
    ionR\x0bdestination\"#\n\x0bDestination\x12\x07\n\x03NOP\x10\0\x12\x0b\n\
    \x07HEXAGON\x10\x01Bv\n\x18org.tensorflow.frameworkB\x16GraphTransferInf\
    oProtoP\x01Z=github.com/tensorflow/tensorflow/tensorflow/go/core/framewo\
    rk\xf8\x01\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
