// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow/core/util/saved_tensor_slice.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct SavedSliceMeta {
    // message fields
    pub name: ::std::string::String,
    pub shape: ::protobuf::SingularPtrField<super::tensor_shape::TensorShapeProto>,
    pub field_type: super::types::DataType,
    pub slice: ::protobuf::RepeatedField<super::tensor_slice::TensorSliceProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SavedSliceMeta {
    fn default() -> &'a SavedSliceMeta {
        <SavedSliceMeta as ::protobuf::Message>::default_instance()
    }
}

impl SavedSliceMeta {
    pub fn new() -> SavedSliceMeta {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .tensorflow.TensorShapeProto shape = 2;


    pub fn get_shape(&self) -> &super::tensor_shape::TensorShapeProto {
        self.shape.as_ref().unwrap_or_else(|| <super::tensor_shape::TensorShapeProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_shape(&mut self) {
        self.shape.clear();
    }

    pub fn has_shape(&self) -> bool {
        self.shape.is_some()
    }

    // Param is passed by value, moved
    pub fn set_shape(&mut self, v: super::tensor_shape::TensorShapeProto) {
        self.shape = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_shape(&mut self) -> &mut super::tensor_shape::TensorShapeProto {
        if self.shape.is_none() {
            self.shape.set_default();
        }
        self.shape.as_mut().unwrap()
    }

    // Take field
    pub fn take_shape(&mut self) -> super::tensor_shape::TensorShapeProto {
        self.shape.take().unwrap_or_else(|| super::tensor_shape::TensorShapeProto::new())
    }

    // .tensorflow.DataType type = 3;


    pub fn get_field_type(&self) -> super::types::DataType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = super::types::DataType::DT_INVALID;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: super::types::DataType) {
        self.field_type = v;
    }

    // repeated .tensorflow.TensorSliceProto slice = 4;


    pub fn get_slice(&self) -> &[super::tensor_slice::TensorSliceProto] {
        &self.slice
    }
    pub fn clear_slice(&mut self) {
        self.slice.clear();
    }

    // Param is passed by value, moved
    pub fn set_slice(&mut self, v: ::protobuf::RepeatedField<super::tensor_slice::TensorSliceProto>) {
        self.slice = v;
    }

    // Mutable pointer to the field.
    pub fn mut_slice(&mut self) -> &mut ::protobuf::RepeatedField<super::tensor_slice::TensorSliceProto> {
        &mut self.slice
    }

    // Take field
    pub fn take_slice(&mut self) -> ::protobuf::RepeatedField<super::tensor_slice::TensorSliceProto> {
        ::std::mem::replace(&mut self.slice, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SavedSliceMeta {
    fn is_initialized(&self) -> bool {
        for v in &self.shape {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.slice {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.shape)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.slice)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(ref v) = self.shape.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.field_type != super::types::DataType::DT_INVALID {
            my_size += ::protobuf::rt::enum_size(3, self.field_type);
        }
        for value in &self.slice {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(ref v) = self.shape.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.field_type != super::types::DataType::DT_INVALID {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        for v in &self.slice {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SavedSliceMeta {
        SavedSliceMeta::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &SavedSliceMeta| { &m.name },
                |m: &mut SavedSliceMeta| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::tensor_shape::TensorShapeProto>>(
                "shape",
                |m: &SavedSliceMeta| { &m.shape },
                |m: &mut SavedSliceMeta| { &mut m.shape },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::types::DataType>>(
                "type",
                |m: &SavedSliceMeta| { &m.field_type },
                |m: &mut SavedSliceMeta| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::tensor_slice::TensorSliceProto>>(
                "slice",
                |m: &SavedSliceMeta| { &m.slice },
                |m: &mut SavedSliceMeta| { &mut m.slice },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SavedSliceMeta>(
                "SavedSliceMeta",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SavedSliceMeta {
        static instance: ::protobuf::rt::LazyV2<SavedSliceMeta> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SavedSliceMeta::new)
    }
}

impl ::protobuf::Clear for SavedSliceMeta {
    fn clear(&mut self) {
        self.name.clear();
        self.shape.clear();
        self.field_type = super::types::DataType::DT_INVALID;
        self.slice.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SavedSliceMeta {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SavedSliceMeta {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SavedTensorSliceMeta {
    // message fields
    pub tensor: ::protobuf::RepeatedField<SavedSliceMeta>,
    pub versions: ::protobuf::SingularPtrField<super::versions::VersionDef>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SavedTensorSliceMeta {
    fn default() -> &'a SavedTensorSliceMeta {
        <SavedTensorSliceMeta as ::protobuf::Message>::default_instance()
    }
}

impl SavedTensorSliceMeta {
    pub fn new() -> SavedTensorSliceMeta {
        ::std::default::Default::default()
    }

    // repeated .tensorflow.SavedSliceMeta tensor = 1;


    pub fn get_tensor(&self) -> &[SavedSliceMeta] {
        &self.tensor
    }
    pub fn clear_tensor(&mut self) {
        self.tensor.clear();
    }

    // Param is passed by value, moved
    pub fn set_tensor(&mut self, v: ::protobuf::RepeatedField<SavedSliceMeta>) {
        self.tensor = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tensor(&mut self) -> &mut ::protobuf::RepeatedField<SavedSliceMeta> {
        &mut self.tensor
    }

    // Take field
    pub fn take_tensor(&mut self) -> ::protobuf::RepeatedField<SavedSliceMeta> {
        ::std::mem::replace(&mut self.tensor, ::protobuf::RepeatedField::new())
    }

    // .tensorflow.VersionDef versions = 2;


    pub fn get_versions(&self) -> &super::versions::VersionDef {
        self.versions.as_ref().unwrap_or_else(|| <super::versions::VersionDef as ::protobuf::Message>::default_instance())
    }
    pub fn clear_versions(&mut self) {
        self.versions.clear();
    }

    pub fn has_versions(&self) -> bool {
        self.versions.is_some()
    }

    // Param is passed by value, moved
    pub fn set_versions(&mut self, v: super::versions::VersionDef) {
        self.versions = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_versions(&mut self) -> &mut super::versions::VersionDef {
        if self.versions.is_none() {
            self.versions.set_default();
        }
        self.versions.as_mut().unwrap()
    }

    // Take field
    pub fn take_versions(&mut self) -> super::versions::VersionDef {
        self.versions.take().unwrap_or_else(|| super::versions::VersionDef::new())
    }
}

impl ::protobuf::Message for SavedTensorSliceMeta {
    fn is_initialized(&self) -> bool {
        for v in &self.tensor {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.versions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tensor)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.versions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.tensor {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.versions.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.tensor {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.versions.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SavedTensorSliceMeta {
        SavedTensorSliceMeta::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SavedSliceMeta>>(
                "tensor",
                |m: &SavedTensorSliceMeta| { &m.tensor },
                |m: &mut SavedTensorSliceMeta| { &mut m.tensor },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::versions::VersionDef>>(
                "versions",
                |m: &SavedTensorSliceMeta| { &m.versions },
                |m: &mut SavedTensorSliceMeta| { &mut m.versions },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SavedTensorSliceMeta>(
                "SavedTensorSliceMeta",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SavedTensorSliceMeta {
        static instance: ::protobuf::rt::LazyV2<SavedTensorSliceMeta> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SavedTensorSliceMeta::new)
    }
}

impl ::protobuf::Clear for SavedTensorSliceMeta {
    fn clear(&mut self) {
        self.tensor.clear();
        self.versions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SavedTensorSliceMeta {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SavedTensorSliceMeta {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SavedSlice {
    // message fields
    pub name: ::std::string::String,
    pub slice: ::protobuf::SingularPtrField<super::tensor_slice::TensorSliceProto>,
    pub data: ::protobuf::SingularPtrField<super::tensor::TensorProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SavedSlice {
    fn default() -> &'a SavedSlice {
        <SavedSlice as ::protobuf::Message>::default_instance()
    }
}

impl SavedSlice {
    pub fn new() -> SavedSlice {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .tensorflow.TensorSliceProto slice = 2;


    pub fn get_slice(&self) -> &super::tensor_slice::TensorSliceProto {
        self.slice.as_ref().unwrap_or_else(|| <super::tensor_slice::TensorSliceProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_slice(&mut self) {
        self.slice.clear();
    }

    pub fn has_slice(&self) -> bool {
        self.slice.is_some()
    }

    // Param is passed by value, moved
    pub fn set_slice(&mut self, v: super::tensor_slice::TensorSliceProto) {
        self.slice = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_slice(&mut self) -> &mut super::tensor_slice::TensorSliceProto {
        if self.slice.is_none() {
            self.slice.set_default();
        }
        self.slice.as_mut().unwrap()
    }

    // Take field
    pub fn take_slice(&mut self) -> super::tensor_slice::TensorSliceProto {
        self.slice.take().unwrap_or_else(|| super::tensor_slice::TensorSliceProto::new())
    }

    // .tensorflow.TensorProto data = 3;


    pub fn get_data(&self) -> &super::tensor::TensorProto {
        self.data.as_ref().unwrap_or_else(|| <super::tensor::TensorProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: super::tensor::TensorProto) {
        self.data = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut super::tensor::TensorProto {
        if self.data.is_none() {
            self.data.set_default();
        }
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> super::tensor::TensorProto {
        self.data.take().unwrap_or_else(|| super::tensor::TensorProto::new())
    }
}

impl ::protobuf::Message for SavedSlice {
    fn is_initialized(&self) -> bool {
        for v in &self.slice {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.slice)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(ref v) = self.slice.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(ref v) = self.slice.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.data.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SavedSlice {
        SavedSlice::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &SavedSlice| { &m.name },
                |m: &mut SavedSlice| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::tensor_slice::TensorSliceProto>>(
                "slice",
                |m: &SavedSlice| { &m.slice },
                |m: &mut SavedSlice| { &mut m.slice },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::tensor::TensorProto>>(
                "data",
                |m: &SavedSlice| { &m.data },
                |m: &mut SavedSlice| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SavedSlice>(
                "SavedSlice",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SavedSlice {
        static instance: ::protobuf::rt::LazyV2<SavedSlice> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SavedSlice::new)
    }
}

impl ::protobuf::Clear for SavedSlice {
    fn clear(&mut self) {
        self.name.clear();
        self.slice.clear();
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SavedSlice {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SavedSlice {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SavedTensorSlices {
    // message fields
    pub meta: ::protobuf::SingularPtrField<SavedTensorSliceMeta>,
    pub data: ::protobuf::SingularPtrField<SavedSlice>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SavedTensorSlices {
    fn default() -> &'a SavedTensorSlices {
        <SavedTensorSlices as ::protobuf::Message>::default_instance()
    }
}

impl SavedTensorSlices {
    pub fn new() -> SavedTensorSlices {
        ::std::default::Default::default()
    }

    // .tensorflow.SavedTensorSliceMeta meta = 1;


    pub fn get_meta(&self) -> &SavedTensorSliceMeta {
        self.meta.as_ref().unwrap_or_else(|| <SavedTensorSliceMeta as ::protobuf::Message>::default_instance())
    }
    pub fn clear_meta(&mut self) {
        self.meta.clear();
    }

    pub fn has_meta(&self) -> bool {
        self.meta.is_some()
    }

    // Param is passed by value, moved
    pub fn set_meta(&mut self, v: SavedTensorSliceMeta) {
        self.meta = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_meta(&mut self) -> &mut SavedTensorSliceMeta {
        if self.meta.is_none() {
            self.meta.set_default();
        }
        self.meta.as_mut().unwrap()
    }

    // Take field
    pub fn take_meta(&mut self) -> SavedTensorSliceMeta {
        self.meta.take().unwrap_or_else(|| SavedTensorSliceMeta::new())
    }

    // .tensorflow.SavedSlice data = 2;


    pub fn get_data(&self) -> &SavedSlice {
        self.data.as_ref().unwrap_or_else(|| <SavedSlice as ::protobuf::Message>::default_instance())
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: SavedSlice) {
        self.data = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut SavedSlice {
        if self.data.is_none() {
            self.data.set_default();
        }
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> SavedSlice {
        self.data.take().unwrap_or_else(|| SavedSlice::new())
    }
}

impl ::protobuf::Message for SavedTensorSlices {
    fn is_initialized(&self) -> bool {
        for v in &self.meta {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.meta)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.meta.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.meta.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.data.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SavedTensorSlices {
        SavedTensorSlices::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SavedTensorSliceMeta>>(
                "meta",
                |m: &SavedTensorSlices| { &m.meta },
                |m: &mut SavedTensorSlices| { &mut m.meta },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SavedSlice>>(
                "data",
                |m: &SavedTensorSlices| { &m.data },
                |m: &mut SavedTensorSlices| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SavedTensorSlices>(
                "SavedTensorSlices",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SavedTensorSlices {
        static instance: ::protobuf::rt::LazyV2<SavedTensorSlices> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SavedTensorSlices::new)
    }
}

impl ::protobuf::Clear for SavedTensorSlices {
    fn clear(&mut self) {
        self.meta.clear();
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SavedTensorSlices {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SavedTensorSlices {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n-tensorflow/core/util/saved_tensor_slice.proto\x12\ntensorflow\x1a,ten\
    sorflow/core/framework/tensor_shape.proto\x1a,tensorflow/core/framework/\
    tensor_slice.proto\x1a&tensorflow/core/framework/tensor.proto\x1a%tensor\
    flow/core/framework/types.proto\x1a(tensorflow/core/framework/versions.p\
    roto\"\xb6\x01\n\x0eSavedSliceMeta\x12\x12\n\x04name\x18\x01\x20\x01(\tR\
    \x04name\x122\n\x05shape\x18\x02\x20\x01(\x0b2\x1c.tensorflow.TensorShap\
    eProtoR\x05shape\x12(\n\x04type\x18\x03\x20\x01(\x0e2\x14.tensorflow.Dat\
    aTypeR\x04type\x122\n\x05slice\x18\x04\x20\x03(\x0b2\x1c.tensorflow.Tens\
    orSliceProtoR\x05slice\"~\n\x14SavedTensorSliceMeta\x122\n\x06tensor\x18\
    \x01\x20\x03(\x0b2\x1a.tensorflow.SavedSliceMetaR\x06tensor\x122\n\x08ve\
    rsions\x18\x02\x20\x01(\x0b2\x16.tensorflow.VersionDefR\x08versions\"\
    \x81\x01\n\nSavedSlice\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\
    2\n\x05slice\x18\x02\x20\x01(\x0b2\x1c.tensorflow.TensorSliceProtoR\x05s\
    lice\x12+\n\x04data\x18\x03\x20\x01(\x0b2\x17.tensorflow.TensorProtoR\
    \x04data\"u\n\x11SavedTensorSlices\x124\n\x04meta\x18\x01\x20\x01(\x0b2\
    \x20.tensorflow.SavedTensorSliceMetaR\x04meta\x12*\n\x04data\x18\x02\x20\
    \x01(\x0b2\x16.tensorflow.SavedSliceR\x04dataB2\n\x13org.tensorflow.util\
    B\x16SavedTensorSliceProtosP\x01\xf8\x01\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
