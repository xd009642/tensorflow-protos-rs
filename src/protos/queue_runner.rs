// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow/core/protobuf/queue_runner.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct QueueRunnerDef {
    // message fields
    pub queue_name: ::std::string::String,
    pub enqueue_op_name: ::protobuf::RepeatedField<::std::string::String>,
    pub close_op_name: ::std::string::String,
    pub cancel_op_name: ::std::string::String,
    pub queue_closed_exception_types: ::std::vec::Vec<super::error_codes::Code>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueueRunnerDef {
    fn default() -> &'a QueueRunnerDef {
        <QueueRunnerDef as ::protobuf::Message>::default_instance()
    }
}

impl QueueRunnerDef {
    pub fn new() -> QueueRunnerDef {
        ::std::default::Default::default()
    }

    // string queue_name = 1;


    pub fn get_queue_name(&self) -> &str {
        &self.queue_name
    }
    pub fn clear_queue_name(&mut self) {
        self.queue_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_queue_name(&mut self, v: ::std::string::String) {
        self.queue_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_queue_name(&mut self) -> &mut ::std::string::String {
        &mut self.queue_name
    }

    // Take field
    pub fn take_queue_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.queue_name, ::std::string::String::new())
    }

    // repeated string enqueue_op_name = 2;


    pub fn get_enqueue_op_name(&self) -> &[::std::string::String] {
        &self.enqueue_op_name
    }
    pub fn clear_enqueue_op_name(&mut self) {
        self.enqueue_op_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_enqueue_op_name(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.enqueue_op_name = v;
    }

    // Mutable pointer to the field.
    pub fn mut_enqueue_op_name(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.enqueue_op_name
    }

    // Take field
    pub fn take_enqueue_op_name(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.enqueue_op_name, ::protobuf::RepeatedField::new())
    }

    // string close_op_name = 3;


    pub fn get_close_op_name(&self) -> &str {
        &self.close_op_name
    }
    pub fn clear_close_op_name(&mut self) {
        self.close_op_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_close_op_name(&mut self, v: ::std::string::String) {
        self.close_op_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_close_op_name(&mut self) -> &mut ::std::string::String {
        &mut self.close_op_name
    }

    // Take field
    pub fn take_close_op_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.close_op_name, ::std::string::String::new())
    }

    // string cancel_op_name = 4;


    pub fn get_cancel_op_name(&self) -> &str {
        &self.cancel_op_name
    }
    pub fn clear_cancel_op_name(&mut self) {
        self.cancel_op_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cancel_op_name(&mut self, v: ::std::string::String) {
        self.cancel_op_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cancel_op_name(&mut self) -> &mut ::std::string::String {
        &mut self.cancel_op_name
    }

    // Take field
    pub fn take_cancel_op_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cancel_op_name, ::std::string::String::new())
    }

    // repeated .tensorflow.error.Code queue_closed_exception_types = 5;


    pub fn get_queue_closed_exception_types(&self) -> &[super::error_codes::Code] {
        &self.queue_closed_exception_types
    }
    pub fn clear_queue_closed_exception_types(&mut self) {
        self.queue_closed_exception_types.clear();
    }

    // Param is passed by value, moved
    pub fn set_queue_closed_exception_types(&mut self, v: ::std::vec::Vec<super::error_codes::Code>) {
        self.queue_closed_exception_types = v;
    }

    // Mutable pointer to the field.
    pub fn mut_queue_closed_exception_types(&mut self) -> &mut ::std::vec::Vec<super::error_codes::Code> {
        &mut self.queue_closed_exception_types
    }

    // Take field
    pub fn take_queue_closed_exception_types(&mut self) -> ::std::vec::Vec<super::error_codes::Code> {
        ::std::mem::replace(&mut self.queue_closed_exception_types, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for QueueRunnerDef {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.queue_name)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.enqueue_op_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.close_op_name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cancel_op_name)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(wire_type, is, &mut self.queue_closed_exception_types, 5, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.queue_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.queue_name);
        }
        for value in &self.enqueue_op_name {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if !self.close_op_name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.close_op_name);
        }
        if !self.cancel_op_name.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.cancel_op_name);
        }
        for value in &self.queue_closed_exception_types {
            my_size += ::protobuf::rt::enum_size(5, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.queue_name.is_empty() {
            os.write_string(1, &self.queue_name)?;
        }
        for v in &self.enqueue_op_name {
            os.write_string(2, &v)?;
        };
        if !self.close_op_name.is_empty() {
            os.write_string(3, &self.close_op_name)?;
        }
        if !self.cancel_op_name.is_empty() {
            os.write_string(4, &self.cancel_op_name)?;
        }
        for v in &self.queue_closed_exception_types {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(v))?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueueRunnerDef {
        QueueRunnerDef::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "queue_name",
                |m: &QueueRunnerDef| { &m.queue_name },
                |m: &mut QueueRunnerDef| { &mut m.queue_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "enqueue_op_name",
                |m: &QueueRunnerDef| { &m.enqueue_op_name },
                |m: &mut QueueRunnerDef| { &mut m.enqueue_op_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "close_op_name",
                |m: &QueueRunnerDef| { &m.close_op_name },
                |m: &mut QueueRunnerDef| { &mut m.close_op_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cancel_op_name",
                |m: &QueueRunnerDef| { &m.cancel_op_name },
                |m: &mut QueueRunnerDef| { &mut m.cancel_op_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::error_codes::Code>>(
                "queue_closed_exception_types",
                |m: &QueueRunnerDef| { &m.queue_closed_exception_types },
                |m: &mut QueueRunnerDef| { &mut m.queue_closed_exception_types },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueueRunnerDef>(
                "QueueRunnerDef",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueueRunnerDef {
        static instance: ::protobuf::rt::LazyV2<QueueRunnerDef> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueueRunnerDef::new)
    }
}

impl ::protobuf::Clear for QueueRunnerDef {
    fn clear(&mut self) {
        self.queue_name.clear();
        self.enqueue_op_name.clear();
        self.close_op_name.clear();
        self.cancel_op_name.clear();
        self.queue_closed_exception_types.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueueRunnerDef {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueueRunnerDef {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n+tensorflow/core/protobuf/queue_runner.proto\x12\ntensorflow\x1a*tenso\
    rflow/core/lib/core/error_codes.proto\"\xfa\x01\n\x0eQueueRunnerDef\x12\
    \x1d\n\nqueue_name\x18\x01\x20\x01(\tR\tqueueName\x12&\n\x0fenqueue_op_n\
    ame\x18\x02\x20\x03(\tR\renqueueOpName\x12\"\n\rclose_op_name\x18\x03\
    \x20\x01(\tR\x0bcloseOpName\x12$\n\x0ecancel_op_name\x18\x04\x20\x01(\tR\
    \x0ccancelOpName\x12W\n\x1cqueue_closed_exception_types\x18\x05\x20\x03(\
    \x0e2\x16.tensorflow.error.CodeR\x19queueClosedExceptionTypesBp\n\x18org\
    .tensorflow.frameworkB\x11QueueRunnerProtosP\x01Z<github.com/tensorflow/\
    tensorflow/tensorflow/go/core/protobuf\xf8\x01\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
