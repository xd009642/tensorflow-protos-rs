// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow/core/lib/core/error_codes.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Code {
    OK = 0,
    CANCELLED = 1,
    UNKNOWN = 2,
    INVALID_ARGUMENT = 3,
    DEADLINE_EXCEEDED = 4,
    NOT_FOUND = 5,
    ALREADY_EXISTS = 6,
    PERMISSION_DENIED = 7,
    UNAUTHENTICATED = 16,
    RESOURCE_EXHAUSTED = 8,
    FAILED_PRECONDITION = 9,
    ABORTED = 10,
    OUT_OF_RANGE = 11,
    UNIMPLEMENTED = 12,
    INTERNAL = 13,
    UNAVAILABLE = 14,
    DATA_LOSS = 15,
    DO_NOT_USE_RESERVED_FOR_FUTURE_EXPANSION_USE_DEFAULT_IN_SWITCH_INSTEAD_ = 20,
}

impl ::protobuf::ProtobufEnum for Code {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Code> {
        match value {
            0 => ::std::option::Option::Some(Code::OK),
            1 => ::std::option::Option::Some(Code::CANCELLED),
            2 => ::std::option::Option::Some(Code::UNKNOWN),
            3 => ::std::option::Option::Some(Code::INVALID_ARGUMENT),
            4 => ::std::option::Option::Some(Code::DEADLINE_EXCEEDED),
            5 => ::std::option::Option::Some(Code::NOT_FOUND),
            6 => ::std::option::Option::Some(Code::ALREADY_EXISTS),
            7 => ::std::option::Option::Some(Code::PERMISSION_DENIED),
            16 => ::std::option::Option::Some(Code::UNAUTHENTICATED),
            8 => ::std::option::Option::Some(Code::RESOURCE_EXHAUSTED),
            9 => ::std::option::Option::Some(Code::FAILED_PRECONDITION),
            10 => ::std::option::Option::Some(Code::ABORTED),
            11 => ::std::option::Option::Some(Code::OUT_OF_RANGE),
            12 => ::std::option::Option::Some(Code::UNIMPLEMENTED),
            13 => ::std::option::Option::Some(Code::INTERNAL),
            14 => ::std::option::Option::Some(Code::UNAVAILABLE),
            15 => ::std::option::Option::Some(Code::DATA_LOSS),
            20 => ::std::option::Option::Some(Code::DO_NOT_USE_RESERVED_FOR_FUTURE_EXPANSION_USE_DEFAULT_IN_SWITCH_INSTEAD_),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Code] = &[
            Code::OK,
            Code::CANCELLED,
            Code::UNKNOWN,
            Code::INVALID_ARGUMENT,
            Code::DEADLINE_EXCEEDED,
            Code::NOT_FOUND,
            Code::ALREADY_EXISTS,
            Code::PERMISSION_DENIED,
            Code::UNAUTHENTICATED,
            Code::RESOURCE_EXHAUSTED,
            Code::FAILED_PRECONDITION,
            Code::ABORTED,
            Code::OUT_OF_RANGE,
            Code::UNIMPLEMENTED,
            Code::INTERNAL,
            Code::UNAVAILABLE,
            Code::DATA_LOSS,
            Code::DO_NOT_USE_RESERVED_FOR_FUTURE_EXPANSION_USE_DEFAULT_IN_SWITCH_INSTEAD_,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Code>("Code", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Code {
}

impl ::std::default::Default for Code {
    fn default() -> Self {
        Code::OK
    }
}

impl ::protobuf::reflect::ProtobufValue for Code {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n*tensorflow/core/lib/core/error_codes.proto\x12\x10tensorflow.error*\
    \x84\x03\n\x04Code\x12\x06\n\x02OK\x10\0\x12\r\n\tCANCELLED\x10\x01\x12\
    \x0b\n\x07UNKNOWN\x10\x02\x12\x14\n\x10INVALID_ARGUMENT\x10\x03\x12\x15\
    \n\x11DEADLINE_EXCEEDED\x10\x04\x12\r\n\tNOT_FOUND\x10\x05\x12\x12\n\x0e\
    ALREADY_EXISTS\x10\x06\x12\x15\n\x11PERMISSION_DENIED\x10\x07\x12\x13\n\
    \x0fUNAUTHENTICATED\x10\x10\x12\x16\n\x12RESOURCE_EXHAUSTED\x10\x08\x12\
    \x17\n\x13FAILED_PRECONDITION\x10\t\x12\x0b\n\x07ABORTED\x10\n\x12\x10\n\
    \x0cOUT_OF_RANGE\x10\x0b\x12\x11\n\rUNIMPLEMENTED\x10\x0c\x12\x0c\n\x08I\
    NTERNAL\x10\r\x12\x0f\n\x0bUNAVAILABLE\x10\x0e\x12\r\n\tDATA_LOSS\x10\
    \x0f\x12K\nGDO_NOT_USE_RESERVED_FOR_FUTURE_EXPANSION_USE_DEFAULT_IN_SWIT\
    CH_INSTEAD_\x10\x14Bo\n\x18org.tensorflow.frameworkB\x10ErrorCodesProtos\
    P\x01Z<github.com/tensorflow/tensorflow/tensorflow/go/core/lib/core\xf8\
    \x01\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
