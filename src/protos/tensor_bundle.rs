// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow/core/protobuf/tensor_bundle.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct BundleHeaderProto {
    // message fields
    pub num_shards: i32,
    pub endianness: BundleHeaderProto_Endianness,
    pub version: ::protobuf::SingularPtrField<super::versions::VersionDef>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BundleHeaderProto {
    fn default() -> &'a BundleHeaderProto {
        <BundleHeaderProto as ::protobuf::Message>::default_instance()
    }
}

impl BundleHeaderProto {
    pub fn new() -> BundleHeaderProto {
        ::std::default::Default::default()
    }

    // int32 num_shards = 1;


    pub fn get_num_shards(&self) -> i32 {
        self.num_shards
    }
    pub fn clear_num_shards(&mut self) {
        self.num_shards = 0;
    }

    // Param is passed by value, moved
    pub fn set_num_shards(&mut self, v: i32) {
        self.num_shards = v;
    }

    // .tensorflow.BundleHeaderProto.Endianness endianness = 2;


    pub fn get_endianness(&self) -> BundleHeaderProto_Endianness {
        self.endianness
    }
    pub fn clear_endianness(&mut self) {
        self.endianness = BundleHeaderProto_Endianness::LITTLE;
    }

    // Param is passed by value, moved
    pub fn set_endianness(&mut self, v: BundleHeaderProto_Endianness) {
        self.endianness = v;
    }

    // .tensorflow.VersionDef version = 3;


    pub fn get_version(&self) -> &super::versions::VersionDef {
        self.version.as_ref().unwrap_or_else(|| <super::versions::VersionDef as ::protobuf::Message>::default_instance())
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: super::versions::VersionDef) {
        self.version = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut super::versions::VersionDef {
        if self.version.is_none() {
            self.version.set_default();
        }
        self.version.as_mut().unwrap()
    }

    // Take field
    pub fn take_version(&mut self) -> super::versions::VersionDef {
        self.version.take().unwrap_or_else(|| super::versions::VersionDef::new())
    }
}

impl ::protobuf::Message for BundleHeaderProto {
    fn is_initialized(&self) -> bool {
        for v in &self.version {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.num_shards = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.endianness, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.version)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.num_shards != 0 {
            my_size += ::protobuf::rt::value_size(1, self.num_shards, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.endianness != BundleHeaderProto_Endianness::LITTLE {
            my_size += ::protobuf::rt::enum_size(2, self.endianness);
        }
        if let Some(ref v) = self.version.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.num_shards != 0 {
            os.write_int32(1, self.num_shards)?;
        }
        if self.endianness != BundleHeaderProto_Endianness::LITTLE {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.endianness))?;
        }
        if let Some(ref v) = self.version.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BundleHeaderProto {
        BundleHeaderProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "num_shards",
                |m: &BundleHeaderProto| { &m.num_shards },
                |m: &mut BundleHeaderProto| { &mut m.num_shards },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<BundleHeaderProto_Endianness>>(
                "endianness",
                |m: &BundleHeaderProto| { &m.endianness },
                |m: &mut BundleHeaderProto| { &mut m.endianness },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::versions::VersionDef>>(
                "version",
                |m: &BundleHeaderProto| { &m.version },
                |m: &mut BundleHeaderProto| { &mut m.version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BundleHeaderProto>(
                "BundleHeaderProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BundleHeaderProto {
        static instance: ::protobuf::rt::LazyV2<BundleHeaderProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BundleHeaderProto::new)
    }
}

impl ::protobuf::Clear for BundleHeaderProto {
    fn clear(&mut self) {
        self.num_shards = 0;
        self.endianness = BundleHeaderProto_Endianness::LITTLE;
        self.version.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BundleHeaderProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BundleHeaderProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum BundleHeaderProto_Endianness {
    LITTLE = 0,
    BIG = 1,
}

impl ::protobuf::ProtobufEnum for BundleHeaderProto_Endianness {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<BundleHeaderProto_Endianness> {
        match value {
            0 => ::std::option::Option::Some(BundleHeaderProto_Endianness::LITTLE),
            1 => ::std::option::Option::Some(BundleHeaderProto_Endianness::BIG),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [BundleHeaderProto_Endianness] = &[
            BundleHeaderProto_Endianness::LITTLE,
            BundleHeaderProto_Endianness::BIG,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<BundleHeaderProto_Endianness>("BundleHeaderProto.Endianness", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for BundleHeaderProto_Endianness {
}

impl ::std::default::Default for BundleHeaderProto_Endianness {
    fn default() -> Self {
        BundleHeaderProto_Endianness::LITTLE
    }
}

impl ::protobuf::reflect::ProtobufValue for BundleHeaderProto_Endianness {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BundleEntryProto {
    // message fields
    pub dtype: super::types::DataType,
    pub shape: ::protobuf::SingularPtrField<super::tensor_shape::TensorShapeProto>,
    pub shard_id: i32,
    pub offset: i64,
    pub size: i64,
    pub crc32c: u32,
    pub slices: ::protobuf::RepeatedField<super::tensor_slice::TensorSliceProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BundleEntryProto {
    fn default() -> &'a BundleEntryProto {
        <BundleEntryProto as ::protobuf::Message>::default_instance()
    }
}

impl BundleEntryProto {
    pub fn new() -> BundleEntryProto {
        ::std::default::Default::default()
    }

    // .tensorflow.DataType dtype = 1;


    pub fn get_dtype(&self) -> super::types::DataType {
        self.dtype
    }
    pub fn clear_dtype(&mut self) {
        self.dtype = super::types::DataType::DT_INVALID;
    }

    // Param is passed by value, moved
    pub fn set_dtype(&mut self, v: super::types::DataType) {
        self.dtype = v;
    }

    // .tensorflow.TensorShapeProto shape = 2;


    pub fn get_shape(&self) -> &super::tensor_shape::TensorShapeProto {
        self.shape.as_ref().unwrap_or_else(|| <super::tensor_shape::TensorShapeProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_shape(&mut self) {
        self.shape.clear();
    }

    pub fn has_shape(&self) -> bool {
        self.shape.is_some()
    }

    // Param is passed by value, moved
    pub fn set_shape(&mut self, v: super::tensor_shape::TensorShapeProto) {
        self.shape = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_shape(&mut self) -> &mut super::tensor_shape::TensorShapeProto {
        if self.shape.is_none() {
            self.shape.set_default();
        }
        self.shape.as_mut().unwrap()
    }

    // Take field
    pub fn take_shape(&mut self) -> super::tensor_shape::TensorShapeProto {
        self.shape.take().unwrap_or_else(|| super::tensor_shape::TensorShapeProto::new())
    }

    // int32 shard_id = 3;


    pub fn get_shard_id(&self) -> i32 {
        self.shard_id
    }
    pub fn clear_shard_id(&mut self) {
        self.shard_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_shard_id(&mut self, v: i32) {
        self.shard_id = v;
    }

    // int64 offset = 4;


    pub fn get_offset(&self) -> i64 {
        self.offset
    }
    pub fn clear_offset(&mut self) {
        self.offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: i64) {
        self.offset = v;
    }

    // int64 size = 5;


    pub fn get_size(&self) -> i64 {
        self.size
    }
    pub fn clear_size(&mut self) {
        self.size = 0;
    }

    // Param is passed by value, moved
    pub fn set_size(&mut self, v: i64) {
        self.size = v;
    }

    // fixed32 crc32c = 6;


    pub fn get_crc32c(&self) -> u32 {
        self.crc32c
    }
    pub fn clear_crc32c(&mut self) {
        self.crc32c = 0;
    }

    // Param is passed by value, moved
    pub fn set_crc32c(&mut self, v: u32) {
        self.crc32c = v;
    }

    // repeated .tensorflow.TensorSliceProto slices = 7;


    pub fn get_slices(&self) -> &[super::tensor_slice::TensorSliceProto] {
        &self.slices
    }
    pub fn clear_slices(&mut self) {
        self.slices.clear();
    }

    // Param is passed by value, moved
    pub fn set_slices(&mut self, v: ::protobuf::RepeatedField<super::tensor_slice::TensorSliceProto>) {
        self.slices = v;
    }

    // Mutable pointer to the field.
    pub fn mut_slices(&mut self) -> &mut ::protobuf::RepeatedField<super::tensor_slice::TensorSliceProto> {
        &mut self.slices
    }

    // Take field
    pub fn take_slices(&mut self) -> ::protobuf::RepeatedField<super::tensor_slice::TensorSliceProto> {
        ::std::mem::replace(&mut self.slices, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for BundleEntryProto {
    fn is_initialized(&self) -> bool {
        for v in &self.shape {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.slices {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.dtype, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.shape)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.shard_id = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.offset = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.size = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.crc32c = tmp;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.slices)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.dtype != super::types::DataType::DT_INVALID {
            my_size += ::protobuf::rt::enum_size(1, self.dtype);
        }
        if let Some(ref v) = self.shape.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.shard_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.shard_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.offset != 0 {
            my_size += ::protobuf::rt::value_size(4, self.offset, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.size != 0 {
            my_size += ::protobuf::rt::value_size(5, self.size, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.crc32c != 0 {
            my_size += 5;
        }
        for value in &self.slices {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.dtype != super::types::DataType::DT_INVALID {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.dtype))?;
        }
        if let Some(ref v) = self.shape.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.shard_id != 0 {
            os.write_int32(3, self.shard_id)?;
        }
        if self.offset != 0 {
            os.write_int64(4, self.offset)?;
        }
        if self.size != 0 {
            os.write_int64(5, self.size)?;
        }
        if self.crc32c != 0 {
            os.write_fixed32(6, self.crc32c)?;
        }
        for v in &self.slices {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BundleEntryProto {
        BundleEntryProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::types::DataType>>(
                "dtype",
                |m: &BundleEntryProto| { &m.dtype },
                |m: &mut BundleEntryProto| { &mut m.dtype },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::tensor_shape::TensorShapeProto>>(
                "shape",
                |m: &BundleEntryProto| { &m.shape },
                |m: &mut BundleEntryProto| { &mut m.shape },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "shard_id",
                |m: &BundleEntryProto| { &m.shard_id },
                |m: &mut BundleEntryProto| { &mut m.shard_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "offset",
                |m: &BundleEntryProto| { &m.offset },
                |m: &mut BundleEntryProto| { &mut m.offset },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "size",
                |m: &BundleEntryProto| { &m.size },
                |m: &mut BundleEntryProto| { &mut m.size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "crc32c",
                |m: &BundleEntryProto| { &m.crc32c },
                |m: &mut BundleEntryProto| { &mut m.crc32c },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::tensor_slice::TensorSliceProto>>(
                "slices",
                |m: &BundleEntryProto| { &m.slices },
                |m: &mut BundleEntryProto| { &mut m.slices },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BundleEntryProto>(
                "BundleEntryProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BundleEntryProto {
        static instance: ::protobuf::rt::LazyV2<BundleEntryProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BundleEntryProto::new)
    }
}

impl ::protobuf::Clear for BundleEntryProto {
    fn clear(&mut self) {
        self.dtype = super::types::DataType::DT_INVALID;
        self.shape.clear();
        self.shard_id = 0;
        self.offset = 0;
        self.size = 0;
        self.crc32c = 0;
        self.slices.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BundleEntryProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BundleEntryProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n,tensorflow/core/protobuf/tensor_bundle.proto\x12\ntensorflow\x1a,tens\
    orflow/core/framework/tensor_shape.proto\x1a,tensorflow/core/framework/t\
    ensor_slice.proto\x1a%tensorflow/core/framework/types.proto\x1a(tensorfl\
    ow/core/framework/versions.proto\"\xd1\x01\n\x11BundleHeaderProto\x12\
    \x1d\n\nnum_shards\x18\x01\x20\x01(\x05R\tnumShards\x12H\n\nendianness\
    \x18\x02\x20\x01(\x0e2(.tensorflow.BundleHeaderProto.EndiannessR\nendian\
    ness\x120\n\x07version\x18\x03\x20\x01(\x0b2\x16.tensorflow.VersionDefR\
    \x07version\"!\n\nEndianness\x12\n\n\x06LITTLE\x10\0\x12\x07\n\x03BIG\
    \x10\x01\"\x87\x02\n\x10BundleEntryProto\x12*\n\x05dtype\x18\x01\x20\x01\
    (\x0e2\x14.tensorflow.DataTypeR\x05dtype\x122\n\x05shape\x18\x02\x20\x01\
    (\x0b2\x1c.tensorflow.TensorShapeProtoR\x05shape\x12\x19\n\x08shard_id\
    \x18\x03\x20\x01(\x05R\x07shardId\x12\x16\n\x06offset\x18\x04\x20\x01(\
    \x03R\x06offset\x12\x12\n\x04size\x18\x05\x20\x01(\x03R\x04size\x12\x16\
    \n\x06crc32c\x18\x06\x20\x01(\x07R\x06crc32c\x124\n\x06slices\x18\x07\
    \x20\x03(\x0b2\x1c.tensorflow.TensorSliceProtoR\x06slicesBl\n\x13org.ten\
    sorflow.utilB\x12TensorBundleProtosP\x01Z<github.com/tensorflow/tensorfl\
    ow/tensorflow/go/core/protobuf\xf8\x01\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
