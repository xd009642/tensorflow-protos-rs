// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow/core/protobuf/master.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct CreateSessionRequest {
    // message fields
    pub graph_def: ::protobuf::SingularPtrField<super::graph::GraphDef>,
    pub config: ::protobuf::SingularPtrField<super::config::ConfigProto>,
    pub target: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateSessionRequest {
    fn default() -> &'a CreateSessionRequest {
        <CreateSessionRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateSessionRequest {
    pub fn new() -> CreateSessionRequest {
        ::std::default::Default::default()
    }

    // .tensorflow.GraphDef graph_def = 1;


    pub fn get_graph_def(&self) -> &super::graph::GraphDef {
        self.graph_def.as_ref().unwrap_or_else(|| <super::graph::GraphDef as ::protobuf::Message>::default_instance())
    }
    pub fn clear_graph_def(&mut self) {
        self.graph_def.clear();
    }

    pub fn has_graph_def(&self) -> bool {
        self.graph_def.is_some()
    }

    // Param is passed by value, moved
    pub fn set_graph_def(&mut self, v: super::graph::GraphDef) {
        self.graph_def = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_graph_def(&mut self) -> &mut super::graph::GraphDef {
        if self.graph_def.is_none() {
            self.graph_def.set_default();
        }
        self.graph_def.as_mut().unwrap()
    }

    // Take field
    pub fn take_graph_def(&mut self) -> super::graph::GraphDef {
        self.graph_def.take().unwrap_or_else(|| super::graph::GraphDef::new())
    }

    // .tensorflow.ConfigProto config = 2;


    pub fn get_config(&self) -> &super::config::ConfigProto {
        self.config.as_ref().unwrap_or_else(|| <super::config::ConfigProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_config(&mut self) {
        self.config.clear();
    }

    pub fn has_config(&self) -> bool {
        self.config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_config(&mut self, v: super::config::ConfigProto) {
        self.config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_config(&mut self) -> &mut super::config::ConfigProto {
        if self.config.is_none() {
            self.config.set_default();
        }
        self.config.as_mut().unwrap()
    }

    // Take field
    pub fn take_config(&mut self) -> super::config::ConfigProto {
        self.config.take().unwrap_or_else(|| super::config::ConfigProto::new())
    }

    // string target = 3;


    pub fn get_target(&self) -> &str {
        &self.target
    }
    pub fn clear_target(&mut self) {
        self.target.clear();
    }

    // Param is passed by value, moved
    pub fn set_target(&mut self, v: ::std::string::String) {
        self.target = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_target(&mut self) -> &mut ::std::string::String {
        &mut self.target
    }

    // Take field
    pub fn take_target(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.target, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CreateSessionRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.graph_def {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.config {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.graph_def)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.config)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.target)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.graph_def.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.target.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.target);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.graph_def.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.config.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.target.is_empty() {
            os.write_string(3, &self.target)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateSessionRequest {
        CreateSessionRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::graph::GraphDef>>(
                "graph_def",
                |m: &CreateSessionRequest| { &m.graph_def },
                |m: &mut CreateSessionRequest| { &mut m.graph_def },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::config::ConfigProto>>(
                "config",
                |m: &CreateSessionRequest| { &m.config },
                |m: &mut CreateSessionRequest| { &mut m.config },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "target",
                |m: &CreateSessionRequest| { &m.target },
                |m: &mut CreateSessionRequest| { &mut m.target },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateSessionRequest>(
                "CreateSessionRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateSessionRequest {
        static instance: ::protobuf::rt::LazyV2<CreateSessionRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateSessionRequest::new)
    }
}

impl ::protobuf::Clear for CreateSessionRequest {
    fn clear(&mut self) {
        self.graph_def.clear();
        self.config.clear();
        self.target.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateSessionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateSessionRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateSessionResponse {
    // message fields
    pub session_handle: ::std::string::String,
    pub graph_version: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateSessionResponse {
    fn default() -> &'a CreateSessionResponse {
        <CreateSessionResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateSessionResponse {
    pub fn new() -> CreateSessionResponse {
        ::std::default::Default::default()
    }

    // string session_handle = 1;


    pub fn get_session_handle(&self) -> &str {
        &self.session_handle
    }
    pub fn clear_session_handle(&mut self) {
        self.session_handle.clear();
    }

    // Param is passed by value, moved
    pub fn set_session_handle(&mut self, v: ::std::string::String) {
        self.session_handle = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_session_handle(&mut self) -> &mut ::std::string::String {
        &mut self.session_handle
    }

    // Take field
    pub fn take_session_handle(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.session_handle, ::std::string::String::new())
    }

    // int64 graph_version = 2;


    pub fn get_graph_version(&self) -> i64 {
        self.graph_version
    }
    pub fn clear_graph_version(&mut self) {
        self.graph_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_graph_version(&mut self, v: i64) {
        self.graph_version = v;
    }
}

impl ::protobuf::Message for CreateSessionResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.session_handle)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.graph_version = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.session_handle.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.session_handle);
        }
        if self.graph_version != 0 {
            my_size += ::protobuf::rt::value_size(2, self.graph_version, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.session_handle.is_empty() {
            os.write_string(1, &self.session_handle)?;
        }
        if self.graph_version != 0 {
            os.write_int64(2, self.graph_version)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateSessionResponse {
        CreateSessionResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "session_handle",
                |m: &CreateSessionResponse| { &m.session_handle },
                |m: &mut CreateSessionResponse| { &mut m.session_handle },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "graph_version",
                |m: &CreateSessionResponse| { &m.graph_version },
                |m: &mut CreateSessionResponse| { &mut m.graph_version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateSessionResponse>(
                "CreateSessionResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateSessionResponse {
        static instance: ::protobuf::rt::LazyV2<CreateSessionResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateSessionResponse::new)
    }
}

impl ::protobuf::Clear for CreateSessionResponse {
    fn clear(&mut self) {
        self.session_handle.clear();
        self.graph_version = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateSessionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateSessionResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExtendSessionRequest {
    // message fields
    pub session_handle: ::std::string::String,
    pub graph_def: ::protobuf::SingularPtrField<super::graph::GraphDef>,
    pub current_graph_version: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExtendSessionRequest {
    fn default() -> &'a ExtendSessionRequest {
        <ExtendSessionRequest as ::protobuf::Message>::default_instance()
    }
}

impl ExtendSessionRequest {
    pub fn new() -> ExtendSessionRequest {
        ::std::default::Default::default()
    }

    // string session_handle = 1;


    pub fn get_session_handle(&self) -> &str {
        &self.session_handle
    }
    pub fn clear_session_handle(&mut self) {
        self.session_handle.clear();
    }

    // Param is passed by value, moved
    pub fn set_session_handle(&mut self, v: ::std::string::String) {
        self.session_handle = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_session_handle(&mut self) -> &mut ::std::string::String {
        &mut self.session_handle
    }

    // Take field
    pub fn take_session_handle(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.session_handle, ::std::string::String::new())
    }

    // .tensorflow.GraphDef graph_def = 2;


    pub fn get_graph_def(&self) -> &super::graph::GraphDef {
        self.graph_def.as_ref().unwrap_or_else(|| <super::graph::GraphDef as ::protobuf::Message>::default_instance())
    }
    pub fn clear_graph_def(&mut self) {
        self.graph_def.clear();
    }

    pub fn has_graph_def(&self) -> bool {
        self.graph_def.is_some()
    }

    // Param is passed by value, moved
    pub fn set_graph_def(&mut self, v: super::graph::GraphDef) {
        self.graph_def = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_graph_def(&mut self) -> &mut super::graph::GraphDef {
        if self.graph_def.is_none() {
            self.graph_def.set_default();
        }
        self.graph_def.as_mut().unwrap()
    }

    // Take field
    pub fn take_graph_def(&mut self) -> super::graph::GraphDef {
        self.graph_def.take().unwrap_or_else(|| super::graph::GraphDef::new())
    }

    // int64 current_graph_version = 3;


    pub fn get_current_graph_version(&self) -> i64 {
        self.current_graph_version
    }
    pub fn clear_current_graph_version(&mut self) {
        self.current_graph_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_current_graph_version(&mut self, v: i64) {
        self.current_graph_version = v;
    }
}

impl ::protobuf::Message for ExtendSessionRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.graph_def {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.session_handle)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.graph_def)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.current_graph_version = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.session_handle.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.session_handle);
        }
        if let Some(ref v) = self.graph_def.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.current_graph_version != 0 {
            my_size += ::protobuf::rt::value_size(3, self.current_graph_version, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.session_handle.is_empty() {
            os.write_string(1, &self.session_handle)?;
        }
        if let Some(ref v) = self.graph_def.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.current_graph_version != 0 {
            os.write_int64(3, self.current_graph_version)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExtendSessionRequest {
        ExtendSessionRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "session_handle",
                |m: &ExtendSessionRequest| { &m.session_handle },
                |m: &mut ExtendSessionRequest| { &mut m.session_handle },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::graph::GraphDef>>(
                "graph_def",
                |m: &ExtendSessionRequest| { &m.graph_def },
                |m: &mut ExtendSessionRequest| { &mut m.graph_def },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "current_graph_version",
                |m: &ExtendSessionRequest| { &m.current_graph_version },
                |m: &mut ExtendSessionRequest| { &mut m.current_graph_version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ExtendSessionRequest>(
                "ExtendSessionRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ExtendSessionRequest {
        static instance: ::protobuf::rt::LazyV2<ExtendSessionRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ExtendSessionRequest::new)
    }
}

impl ::protobuf::Clear for ExtendSessionRequest {
    fn clear(&mut self) {
        self.session_handle.clear();
        self.graph_def.clear();
        self.current_graph_version = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExtendSessionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExtendSessionRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExtendSessionResponse {
    // message fields
    pub new_graph_version: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExtendSessionResponse {
    fn default() -> &'a ExtendSessionResponse {
        <ExtendSessionResponse as ::protobuf::Message>::default_instance()
    }
}

impl ExtendSessionResponse {
    pub fn new() -> ExtendSessionResponse {
        ::std::default::Default::default()
    }

    // int64 new_graph_version = 4;


    pub fn get_new_graph_version(&self) -> i64 {
        self.new_graph_version
    }
    pub fn clear_new_graph_version(&mut self) {
        self.new_graph_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_new_graph_version(&mut self, v: i64) {
        self.new_graph_version = v;
    }
}

impl ::protobuf::Message for ExtendSessionResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.new_graph_version = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.new_graph_version != 0 {
            my_size += ::protobuf::rt::value_size(4, self.new_graph_version, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.new_graph_version != 0 {
            os.write_int64(4, self.new_graph_version)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExtendSessionResponse {
        ExtendSessionResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "new_graph_version",
                |m: &ExtendSessionResponse| { &m.new_graph_version },
                |m: &mut ExtendSessionResponse| { &mut m.new_graph_version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ExtendSessionResponse>(
                "ExtendSessionResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ExtendSessionResponse {
        static instance: ::protobuf::rt::LazyV2<ExtendSessionResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ExtendSessionResponse::new)
    }
}

impl ::protobuf::Clear for ExtendSessionResponse {
    fn clear(&mut self) {
        self.new_graph_version = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExtendSessionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExtendSessionResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RunStepRequest {
    // message fields
    pub session_handle: ::std::string::String,
    pub feed: ::protobuf::RepeatedField<super::named_tensor::NamedTensorProto>,
    pub fetch: ::protobuf::RepeatedField<::std::string::String>,
    pub target: ::protobuf::RepeatedField<::std::string::String>,
    pub options: ::protobuf::SingularPtrField<super::config::RunOptions>,
    pub partial_run_handle: ::std::string::String,
    pub store_errors_in_response_body: bool,
    pub request_id: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RunStepRequest {
    fn default() -> &'a RunStepRequest {
        <RunStepRequest as ::protobuf::Message>::default_instance()
    }
}

impl RunStepRequest {
    pub fn new() -> RunStepRequest {
        ::std::default::Default::default()
    }

    // string session_handle = 1;


    pub fn get_session_handle(&self) -> &str {
        &self.session_handle
    }
    pub fn clear_session_handle(&mut self) {
        self.session_handle.clear();
    }

    // Param is passed by value, moved
    pub fn set_session_handle(&mut self, v: ::std::string::String) {
        self.session_handle = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_session_handle(&mut self) -> &mut ::std::string::String {
        &mut self.session_handle
    }

    // Take field
    pub fn take_session_handle(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.session_handle, ::std::string::String::new())
    }

    // repeated .tensorflow.NamedTensorProto feed = 2;


    pub fn get_feed(&self) -> &[super::named_tensor::NamedTensorProto] {
        &self.feed
    }
    pub fn clear_feed(&mut self) {
        self.feed.clear();
    }

    // Param is passed by value, moved
    pub fn set_feed(&mut self, v: ::protobuf::RepeatedField<super::named_tensor::NamedTensorProto>) {
        self.feed = v;
    }

    // Mutable pointer to the field.
    pub fn mut_feed(&mut self) -> &mut ::protobuf::RepeatedField<super::named_tensor::NamedTensorProto> {
        &mut self.feed
    }

    // Take field
    pub fn take_feed(&mut self) -> ::protobuf::RepeatedField<super::named_tensor::NamedTensorProto> {
        ::std::mem::replace(&mut self.feed, ::protobuf::RepeatedField::new())
    }

    // repeated string fetch = 3;


    pub fn get_fetch(&self) -> &[::std::string::String] {
        &self.fetch
    }
    pub fn clear_fetch(&mut self) {
        self.fetch.clear();
    }

    // Param is passed by value, moved
    pub fn set_fetch(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.fetch = v;
    }

    // Mutable pointer to the field.
    pub fn mut_fetch(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.fetch
    }

    // Take field
    pub fn take_fetch(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.fetch, ::protobuf::RepeatedField::new())
    }

    // repeated string target = 4;


    pub fn get_target(&self) -> &[::std::string::String] {
        &self.target
    }
    pub fn clear_target(&mut self) {
        self.target.clear();
    }

    // Param is passed by value, moved
    pub fn set_target(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.target = v;
    }

    // Mutable pointer to the field.
    pub fn mut_target(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.target
    }

    // Take field
    pub fn take_target(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.target, ::protobuf::RepeatedField::new())
    }

    // .tensorflow.RunOptions options = 5;


    pub fn get_options(&self) -> &super::config::RunOptions {
        self.options.as_ref().unwrap_or_else(|| <super::config::RunOptions as ::protobuf::Message>::default_instance())
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    pub fn has_options(&self) -> bool {
        self.options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: super::config::RunOptions) {
        self.options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_options(&mut self) -> &mut super::config::RunOptions {
        if self.options.is_none() {
            self.options.set_default();
        }
        self.options.as_mut().unwrap()
    }

    // Take field
    pub fn take_options(&mut self) -> super::config::RunOptions {
        self.options.take().unwrap_or_else(|| super::config::RunOptions::new())
    }

    // string partial_run_handle = 6;


    pub fn get_partial_run_handle(&self) -> &str {
        &self.partial_run_handle
    }
    pub fn clear_partial_run_handle(&mut self) {
        self.partial_run_handle.clear();
    }

    // Param is passed by value, moved
    pub fn set_partial_run_handle(&mut self, v: ::std::string::String) {
        self.partial_run_handle = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_partial_run_handle(&mut self) -> &mut ::std::string::String {
        &mut self.partial_run_handle
    }

    // Take field
    pub fn take_partial_run_handle(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.partial_run_handle, ::std::string::String::new())
    }

    // bool store_errors_in_response_body = 7;


    pub fn get_store_errors_in_response_body(&self) -> bool {
        self.store_errors_in_response_body
    }
    pub fn clear_store_errors_in_response_body(&mut self) {
        self.store_errors_in_response_body = false;
    }

    // Param is passed by value, moved
    pub fn set_store_errors_in_response_body(&mut self, v: bool) {
        self.store_errors_in_response_body = v;
    }

    // int64 request_id = 8;


    pub fn get_request_id(&self) -> i64 {
        self.request_id
    }
    pub fn clear_request_id(&mut self) {
        self.request_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_request_id(&mut self, v: i64) {
        self.request_id = v;
    }
}

impl ::protobuf::Message for RunStepRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.feed {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.session_handle)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.feed)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.fetch)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.target)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.options)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.partial_run_handle)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.store_errors_in_response_body = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.request_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.session_handle.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.session_handle);
        }
        for value in &self.feed {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.fetch {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        for value in &self.target {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if let Some(ref v) = self.options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.partial_run_handle.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.partial_run_handle);
        }
        if self.store_errors_in_response_body != false {
            my_size += 2;
        }
        if self.request_id != 0 {
            my_size += ::protobuf::rt::value_size(8, self.request_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.session_handle.is_empty() {
            os.write_string(1, &self.session_handle)?;
        }
        for v in &self.feed {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.fetch {
            os.write_string(3, &v)?;
        };
        for v in &self.target {
            os.write_string(4, &v)?;
        };
        if let Some(ref v) = self.options.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.partial_run_handle.is_empty() {
            os.write_string(6, &self.partial_run_handle)?;
        }
        if self.store_errors_in_response_body != false {
            os.write_bool(7, self.store_errors_in_response_body)?;
        }
        if self.request_id != 0 {
            os.write_int64(8, self.request_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RunStepRequest {
        RunStepRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "session_handle",
                |m: &RunStepRequest| { &m.session_handle },
                |m: &mut RunStepRequest| { &mut m.session_handle },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::named_tensor::NamedTensorProto>>(
                "feed",
                |m: &RunStepRequest| { &m.feed },
                |m: &mut RunStepRequest| { &mut m.feed },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "fetch",
                |m: &RunStepRequest| { &m.fetch },
                |m: &mut RunStepRequest| { &mut m.fetch },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "target",
                |m: &RunStepRequest| { &m.target },
                |m: &mut RunStepRequest| { &mut m.target },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::config::RunOptions>>(
                "options",
                |m: &RunStepRequest| { &m.options },
                |m: &mut RunStepRequest| { &mut m.options },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "partial_run_handle",
                |m: &RunStepRequest| { &m.partial_run_handle },
                |m: &mut RunStepRequest| { &mut m.partial_run_handle },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "store_errors_in_response_body",
                |m: &RunStepRequest| { &m.store_errors_in_response_body },
                |m: &mut RunStepRequest| { &mut m.store_errors_in_response_body },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "request_id",
                |m: &RunStepRequest| { &m.request_id },
                |m: &mut RunStepRequest| { &mut m.request_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RunStepRequest>(
                "RunStepRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RunStepRequest {
        static instance: ::protobuf::rt::LazyV2<RunStepRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RunStepRequest::new)
    }
}

impl ::protobuf::Clear for RunStepRequest {
    fn clear(&mut self) {
        self.session_handle.clear();
        self.feed.clear();
        self.fetch.clear();
        self.target.clear();
        self.options.clear();
        self.partial_run_handle.clear();
        self.store_errors_in_response_body = false;
        self.request_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RunStepRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RunStepRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RunStepResponse {
    // message fields
    pub tensor: ::protobuf::RepeatedField<super::named_tensor::NamedTensorProto>,
    pub metadata: ::protobuf::SingularPtrField<super::config::RunMetadata>,
    pub status_code: super::error_codes::Code,
    pub status_error_message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RunStepResponse {
    fn default() -> &'a RunStepResponse {
        <RunStepResponse as ::protobuf::Message>::default_instance()
    }
}

impl RunStepResponse {
    pub fn new() -> RunStepResponse {
        ::std::default::Default::default()
    }

    // repeated .tensorflow.NamedTensorProto tensor = 1;


    pub fn get_tensor(&self) -> &[super::named_tensor::NamedTensorProto] {
        &self.tensor
    }
    pub fn clear_tensor(&mut self) {
        self.tensor.clear();
    }

    // Param is passed by value, moved
    pub fn set_tensor(&mut self, v: ::protobuf::RepeatedField<super::named_tensor::NamedTensorProto>) {
        self.tensor = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tensor(&mut self) -> &mut ::protobuf::RepeatedField<super::named_tensor::NamedTensorProto> {
        &mut self.tensor
    }

    // Take field
    pub fn take_tensor(&mut self) -> ::protobuf::RepeatedField<super::named_tensor::NamedTensorProto> {
        ::std::mem::replace(&mut self.tensor, ::protobuf::RepeatedField::new())
    }

    // .tensorflow.RunMetadata metadata = 2;


    pub fn get_metadata(&self) -> &super::config::RunMetadata {
        self.metadata.as_ref().unwrap_or_else(|| <super::config::RunMetadata as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: super::config::RunMetadata) {
        self.metadata = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut super::config::RunMetadata {
        if self.metadata.is_none() {
            self.metadata.set_default();
        }
        self.metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata(&mut self) -> super::config::RunMetadata {
        self.metadata.take().unwrap_or_else(|| super::config::RunMetadata::new())
    }

    // .tensorflow.error.Code status_code = 3;


    pub fn get_status_code(&self) -> super::error_codes::Code {
        self.status_code
    }
    pub fn clear_status_code(&mut self) {
        self.status_code = super::error_codes::Code::OK;
    }

    // Param is passed by value, moved
    pub fn set_status_code(&mut self, v: super::error_codes::Code) {
        self.status_code = v;
    }

    // string status_error_message = 4;


    pub fn get_status_error_message(&self) -> &str {
        &self.status_error_message
    }
    pub fn clear_status_error_message(&mut self) {
        self.status_error_message.clear();
    }

    // Param is passed by value, moved
    pub fn set_status_error_message(&mut self, v: ::std::string::String) {
        self.status_error_message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status_error_message(&mut self) -> &mut ::std::string::String {
        &mut self.status_error_message
    }

    // Take field
    pub fn take_status_error_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.status_error_message, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RunStepResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.tensor {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.metadata {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tensor)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metadata)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status_code, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.status_error_message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.tensor {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.status_code != super::error_codes::Code::OK {
            my_size += ::protobuf::rt::enum_size(3, self.status_code);
        }
        if !self.status_error_message.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.status_error_message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.tensor {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.metadata.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.status_code != super::error_codes::Code::OK {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.status_code))?;
        }
        if !self.status_error_message.is_empty() {
            os.write_string(4, &self.status_error_message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RunStepResponse {
        RunStepResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::named_tensor::NamedTensorProto>>(
                "tensor",
                |m: &RunStepResponse| { &m.tensor },
                |m: &mut RunStepResponse| { &mut m.tensor },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::config::RunMetadata>>(
                "metadata",
                |m: &RunStepResponse| { &m.metadata },
                |m: &mut RunStepResponse| { &mut m.metadata },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::error_codes::Code>>(
                "status_code",
                |m: &RunStepResponse| { &m.status_code },
                |m: &mut RunStepResponse| { &mut m.status_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "status_error_message",
                |m: &RunStepResponse| { &m.status_error_message },
                |m: &mut RunStepResponse| { &mut m.status_error_message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RunStepResponse>(
                "RunStepResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RunStepResponse {
        static instance: ::protobuf::rt::LazyV2<RunStepResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RunStepResponse::new)
    }
}

impl ::protobuf::Clear for RunStepResponse {
    fn clear(&mut self) {
        self.tensor.clear();
        self.metadata.clear();
        self.status_code = super::error_codes::Code::OK;
        self.status_error_message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RunStepResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RunStepResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PartialRunSetupRequest {
    // message fields
    pub session_handle: ::std::string::String,
    pub feed: ::protobuf::RepeatedField<::std::string::String>,
    pub fetch: ::protobuf::RepeatedField<::std::string::String>,
    pub target: ::protobuf::RepeatedField<::std::string::String>,
    pub request_id: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PartialRunSetupRequest {
    fn default() -> &'a PartialRunSetupRequest {
        <PartialRunSetupRequest as ::protobuf::Message>::default_instance()
    }
}

impl PartialRunSetupRequest {
    pub fn new() -> PartialRunSetupRequest {
        ::std::default::Default::default()
    }

    // string session_handle = 1;


    pub fn get_session_handle(&self) -> &str {
        &self.session_handle
    }
    pub fn clear_session_handle(&mut self) {
        self.session_handle.clear();
    }

    // Param is passed by value, moved
    pub fn set_session_handle(&mut self, v: ::std::string::String) {
        self.session_handle = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_session_handle(&mut self) -> &mut ::std::string::String {
        &mut self.session_handle
    }

    // Take field
    pub fn take_session_handle(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.session_handle, ::std::string::String::new())
    }

    // repeated string feed = 2;


    pub fn get_feed(&self) -> &[::std::string::String] {
        &self.feed
    }
    pub fn clear_feed(&mut self) {
        self.feed.clear();
    }

    // Param is passed by value, moved
    pub fn set_feed(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.feed = v;
    }

    // Mutable pointer to the field.
    pub fn mut_feed(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.feed
    }

    // Take field
    pub fn take_feed(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.feed, ::protobuf::RepeatedField::new())
    }

    // repeated string fetch = 3;


    pub fn get_fetch(&self) -> &[::std::string::String] {
        &self.fetch
    }
    pub fn clear_fetch(&mut self) {
        self.fetch.clear();
    }

    // Param is passed by value, moved
    pub fn set_fetch(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.fetch = v;
    }

    // Mutable pointer to the field.
    pub fn mut_fetch(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.fetch
    }

    // Take field
    pub fn take_fetch(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.fetch, ::protobuf::RepeatedField::new())
    }

    // repeated string target = 4;


    pub fn get_target(&self) -> &[::std::string::String] {
        &self.target
    }
    pub fn clear_target(&mut self) {
        self.target.clear();
    }

    // Param is passed by value, moved
    pub fn set_target(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.target = v;
    }

    // Mutable pointer to the field.
    pub fn mut_target(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.target
    }

    // Take field
    pub fn take_target(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.target, ::protobuf::RepeatedField::new())
    }

    // int64 request_id = 5;


    pub fn get_request_id(&self) -> i64 {
        self.request_id
    }
    pub fn clear_request_id(&mut self) {
        self.request_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_request_id(&mut self, v: i64) {
        self.request_id = v;
    }
}

impl ::protobuf::Message for PartialRunSetupRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.session_handle)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.feed)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.fetch)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.target)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.request_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.session_handle.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.session_handle);
        }
        for value in &self.feed {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        for value in &self.fetch {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        for value in &self.target {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if self.request_id != 0 {
            my_size += ::protobuf::rt::value_size(5, self.request_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.session_handle.is_empty() {
            os.write_string(1, &self.session_handle)?;
        }
        for v in &self.feed {
            os.write_string(2, &v)?;
        };
        for v in &self.fetch {
            os.write_string(3, &v)?;
        };
        for v in &self.target {
            os.write_string(4, &v)?;
        };
        if self.request_id != 0 {
            os.write_int64(5, self.request_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PartialRunSetupRequest {
        PartialRunSetupRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "session_handle",
                |m: &PartialRunSetupRequest| { &m.session_handle },
                |m: &mut PartialRunSetupRequest| { &mut m.session_handle },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "feed",
                |m: &PartialRunSetupRequest| { &m.feed },
                |m: &mut PartialRunSetupRequest| { &mut m.feed },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "fetch",
                |m: &PartialRunSetupRequest| { &m.fetch },
                |m: &mut PartialRunSetupRequest| { &mut m.fetch },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "target",
                |m: &PartialRunSetupRequest| { &m.target },
                |m: &mut PartialRunSetupRequest| { &mut m.target },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "request_id",
                |m: &PartialRunSetupRequest| { &m.request_id },
                |m: &mut PartialRunSetupRequest| { &mut m.request_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PartialRunSetupRequest>(
                "PartialRunSetupRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PartialRunSetupRequest {
        static instance: ::protobuf::rt::LazyV2<PartialRunSetupRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PartialRunSetupRequest::new)
    }
}

impl ::protobuf::Clear for PartialRunSetupRequest {
    fn clear(&mut self) {
        self.session_handle.clear();
        self.feed.clear();
        self.fetch.clear();
        self.target.clear();
        self.request_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PartialRunSetupRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PartialRunSetupRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PartialRunSetupResponse {
    // message fields
    pub partial_run_handle: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PartialRunSetupResponse {
    fn default() -> &'a PartialRunSetupResponse {
        <PartialRunSetupResponse as ::protobuf::Message>::default_instance()
    }
}

impl PartialRunSetupResponse {
    pub fn new() -> PartialRunSetupResponse {
        ::std::default::Default::default()
    }

    // string partial_run_handle = 1;


    pub fn get_partial_run_handle(&self) -> &str {
        &self.partial_run_handle
    }
    pub fn clear_partial_run_handle(&mut self) {
        self.partial_run_handle.clear();
    }

    // Param is passed by value, moved
    pub fn set_partial_run_handle(&mut self, v: ::std::string::String) {
        self.partial_run_handle = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_partial_run_handle(&mut self) -> &mut ::std::string::String {
        &mut self.partial_run_handle
    }

    // Take field
    pub fn take_partial_run_handle(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.partial_run_handle, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PartialRunSetupResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.partial_run_handle)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.partial_run_handle.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.partial_run_handle);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.partial_run_handle.is_empty() {
            os.write_string(1, &self.partial_run_handle)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PartialRunSetupResponse {
        PartialRunSetupResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "partial_run_handle",
                |m: &PartialRunSetupResponse| { &m.partial_run_handle },
                |m: &mut PartialRunSetupResponse| { &mut m.partial_run_handle },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PartialRunSetupResponse>(
                "PartialRunSetupResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PartialRunSetupResponse {
        static instance: ::protobuf::rt::LazyV2<PartialRunSetupResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PartialRunSetupResponse::new)
    }
}

impl ::protobuf::Clear for PartialRunSetupResponse {
    fn clear(&mut self) {
        self.partial_run_handle.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PartialRunSetupResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PartialRunSetupResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CloseSessionRequest {
    // message fields
    pub session_handle: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CloseSessionRequest {
    fn default() -> &'a CloseSessionRequest {
        <CloseSessionRequest as ::protobuf::Message>::default_instance()
    }
}

impl CloseSessionRequest {
    pub fn new() -> CloseSessionRequest {
        ::std::default::Default::default()
    }

    // string session_handle = 1;


    pub fn get_session_handle(&self) -> &str {
        &self.session_handle
    }
    pub fn clear_session_handle(&mut self) {
        self.session_handle.clear();
    }

    // Param is passed by value, moved
    pub fn set_session_handle(&mut self, v: ::std::string::String) {
        self.session_handle = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_session_handle(&mut self) -> &mut ::std::string::String {
        &mut self.session_handle
    }

    // Take field
    pub fn take_session_handle(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.session_handle, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CloseSessionRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.session_handle)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.session_handle.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.session_handle);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.session_handle.is_empty() {
            os.write_string(1, &self.session_handle)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CloseSessionRequest {
        CloseSessionRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "session_handle",
                |m: &CloseSessionRequest| { &m.session_handle },
                |m: &mut CloseSessionRequest| { &mut m.session_handle },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CloseSessionRequest>(
                "CloseSessionRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CloseSessionRequest {
        static instance: ::protobuf::rt::LazyV2<CloseSessionRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CloseSessionRequest::new)
    }
}

impl ::protobuf::Clear for CloseSessionRequest {
    fn clear(&mut self) {
        self.session_handle.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CloseSessionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CloseSessionRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CloseSessionResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CloseSessionResponse {
    fn default() -> &'a CloseSessionResponse {
        <CloseSessionResponse as ::protobuf::Message>::default_instance()
    }
}

impl CloseSessionResponse {
    pub fn new() -> CloseSessionResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CloseSessionResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CloseSessionResponse {
        CloseSessionResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CloseSessionResponse>(
                "CloseSessionResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CloseSessionResponse {
        static instance: ::protobuf::rt::LazyV2<CloseSessionResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CloseSessionResponse::new)
    }
}

impl ::protobuf::Clear for CloseSessionResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CloseSessionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CloseSessionResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ResetRequest {
    // message fields
    pub container: ::protobuf::RepeatedField<::std::string::String>,
    pub device_filters: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ResetRequest {
    fn default() -> &'a ResetRequest {
        <ResetRequest as ::protobuf::Message>::default_instance()
    }
}

impl ResetRequest {
    pub fn new() -> ResetRequest {
        ::std::default::Default::default()
    }

    // repeated string container = 1;


    pub fn get_container(&self) -> &[::std::string::String] {
        &self.container
    }
    pub fn clear_container(&mut self) {
        self.container.clear();
    }

    // Param is passed by value, moved
    pub fn set_container(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.container = v;
    }

    // Mutable pointer to the field.
    pub fn mut_container(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.container
    }

    // Take field
    pub fn take_container(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.container, ::protobuf::RepeatedField::new())
    }

    // repeated string device_filters = 2;


    pub fn get_device_filters(&self) -> &[::std::string::String] {
        &self.device_filters
    }
    pub fn clear_device_filters(&mut self) {
        self.device_filters.clear();
    }

    // Param is passed by value, moved
    pub fn set_device_filters(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.device_filters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_device_filters(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.device_filters
    }

    // Take field
    pub fn take_device_filters(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.device_filters, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ResetRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.container)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.device_filters)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.container {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        for value in &self.device_filters {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.container {
            os.write_string(1, &v)?;
        };
        for v in &self.device_filters {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResetRequest {
        ResetRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "container",
                |m: &ResetRequest| { &m.container },
                |m: &mut ResetRequest| { &mut m.container },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "device_filters",
                |m: &ResetRequest| { &m.device_filters },
                |m: &mut ResetRequest| { &mut m.device_filters },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ResetRequest>(
                "ResetRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ResetRequest {
        static instance: ::protobuf::rt::LazyV2<ResetRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ResetRequest::new)
    }
}

impl ::protobuf::Clear for ResetRequest {
    fn clear(&mut self) {
        self.container.clear();
        self.device_filters.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResetRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResetRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ResetResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ResetResponse {
    fn default() -> &'a ResetResponse {
        <ResetResponse as ::protobuf::Message>::default_instance()
    }
}

impl ResetResponse {
    pub fn new() -> ResetResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ResetResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResetResponse {
        ResetResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ResetResponse>(
                "ResetResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ResetResponse {
        static instance: ::protobuf::rt::LazyV2<ResetResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ResetResponse::new)
    }
}

impl ::protobuf::Clear for ResetResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResetResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResetResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListDevicesRequest {
    // message fields
    pub session_handle: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListDevicesRequest {
    fn default() -> &'a ListDevicesRequest {
        <ListDevicesRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListDevicesRequest {
    pub fn new() -> ListDevicesRequest {
        ::std::default::Default::default()
    }

    // string session_handle = 1;


    pub fn get_session_handle(&self) -> &str {
        &self.session_handle
    }
    pub fn clear_session_handle(&mut self) {
        self.session_handle.clear();
    }

    // Param is passed by value, moved
    pub fn set_session_handle(&mut self, v: ::std::string::String) {
        self.session_handle = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_session_handle(&mut self) -> &mut ::std::string::String {
        &mut self.session_handle
    }

    // Take field
    pub fn take_session_handle(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.session_handle, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ListDevicesRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.session_handle)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.session_handle.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.session_handle);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.session_handle.is_empty() {
            os.write_string(1, &self.session_handle)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListDevicesRequest {
        ListDevicesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "session_handle",
                |m: &ListDevicesRequest| { &m.session_handle },
                |m: &mut ListDevicesRequest| { &mut m.session_handle },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListDevicesRequest>(
                "ListDevicesRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListDevicesRequest {
        static instance: ::protobuf::rt::LazyV2<ListDevicesRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListDevicesRequest::new)
    }
}

impl ::protobuf::Clear for ListDevicesRequest {
    fn clear(&mut self) {
        self.session_handle.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListDevicesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListDevicesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListDevicesResponse {
    // message fields
    pub local_device: ::protobuf::RepeatedField<super::device_attributes::DeviceAttributes>,
    pub remote_device: ::protobuf::RepeatedField<super::device_attributes::DeviceAttributes>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListDevicesResponse {
    fn default() -> &'a ListDevicesResponse {
        <ListDevicesResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListDevicesResponse {
    pub fn new() -> ListDevicesResponse {
        ::std::default::Default::default()
    }

    // repeated .tensorflow.DeviceAttributes local_device = 1;


    pub fn get_local_device(&self) -> &[super::device_attributes::DeviceAttributes] {
        &self.local_device
    }
    pub fn clear_local_device(&mut self) {
        self.local_device.clear();
    }

    // Param is passed by value, moved
    pub fn set_local_device(&mut self, v: ::protobuf::RepeatedField<super::device_attributes::DeviceAttributes>) {
        self.local_device = v;
    }

    // Mutable pointer to the field.
    pub fn mut_local_device(&mut self) -> &mut ::protobuf::RepeatedField<super::device_attributes::DeviceAttributes> {
        &mut self.local_device
    }

    // Take field
    pub fn take_local_device(&mut self) -> ::protobuf::RepeatedField<super::device_attributes::DeviceAttributes> {
        ::std::mem::replace(&mut self.local_device, ::protobuf::RepeatedField::new())
    }

    // repeated .tensorflow.DeviceAttributes remote_device = 2;


    pub fn get_remote_device(&self) -> &[super::device_attributes::DeviceAttributes] {
        &self.remote_device
    }
    pub fn clear_remote_device(&mut self) {
        self.remote_device.clear();
    }

    // Param is passed by value, moved
    pub fn set_remote_device(&mut self, v: ::protobuf::RepeatedField<super::device_attributes::DeviceAttributes>) {
        self.remote_device = v;
    }

    // Mutable pointer to the field.
    pub fn mut_remote_device(&mut self) -> &mut ::protobuf::RepeatedField<super::device_attributes::DeviceAttributes> {
        &mut self.remote_device
    }

    // Take field
    pub fn take_remote_device(&mut self) -> ::protobuf::RepeatedField<super::device_attributes::DeviceAttributes> {
        ::std::mem::replace(&mut self.remote_device, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ListDevicesResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.local_device {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.remote_device {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.local_device)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.remote_device)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.local_device {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.remote_device {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.local_device {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.remote_device {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListDevicesResponse {
        ListDevicesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::device_attributes::DeviceAttributes>>(
                "local_device",
                |m: &ListDevicesResponse| { &m.local_device },
                |m: &mut ListDevicesResponse| { &mut m.local_device },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::device_attributes::DeviceAttributes>>(
                "remote_device",
                |m: &ListDevicesResponse| { &m.remote_device },
                |m: &mut ListDevicesResponse| { &mut m.remote_device },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListDevicesResponse>(
                "ListDevicesResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListDevicesResponse {
        static instance: ::protobuf::rt::LazyV2<ListDevicesResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListDevicesResponse::new)
    }
}

impl ::protobuf::Clear for ListDevicesResponse {
    fn clear(&mut self) {
        self.local_device.clear();
        self.remote_device.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListDevicesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListDevicesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MakeCallableRequest {
    // message fields
    pub session_handle: ::std::string::String,
    pub options: ::protobuf::SingularPtrField<super::config::CallableOptions>,
    pub request_id: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MakeCallableRequest {
    fn default() -> &'a MakeCallableRequest {
        <MakeCallableRequest as ::protobuf::Message>::default_instance()
    }
}

impl MakeCallableRequest {
    pub fn new() -> MakeCallableRequest {
        ::std::default::Default::default()
    }

    // string session_handle = 1;


    pub fn get_session_handle(&self) -> &str {
        &self.session_handle
    }
    pub fn clear_session_handle(&mut self) {
        self.session_handle.clear();
    }

    // Param is passed by value, moved
    pub fn set_session_handle(&mut self, v: ::std::string::String) {
        self.session_handle = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_session_handle(&mut self) -> &mut ::std::string::String {
        &mut self.session_handle
    }

    // Take field
    pub fn take_session_handle(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.session_handle, ::std::string::String::new())
    }

    // .tensorflow.CallableOptions options = 2;


    pub fn get_options(&self) -> &super::config::CallableOptions {
        self.options.as_ref().unwrap_or_else(|| <super::config::CallableOptions as ::protobuf::Message>::default_instance())
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    pub fn has_options(&self) -> bool {
        self.options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: super::config::CallableOptions) {
        self.options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_options(&mut self) -> &mut super::config::CallableOptions {
        if self.options.is_none() {
            self.options.set_default();
        }
        self.options.as_mut().unwrap()
    }

    // Take field
    pub fn take_options(&mut self) -> super::config::CallableOptions {
        self.options.take().unwrap_or_else(|| super::config::CallableOptions::new())
    }

    // int64 request_id = 3;


    pub fn get_request_id(&self) -> i64 {
        self.request_id
    }
    pub fn clear_request_id(&mut self) {
        self.request_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_request_id(&mut self, v: i64) {
        self.request_id = v;
    }
}

impl ::protobuf::Message for MakeCallableRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.session_handle)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.options)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.request_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.session_handle.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.session_handle);
        }
        if let Some(ref v) = self.options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.request_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.request_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.session_handle.is_empty() {
            os.write_string(1, &self.session_handle)?;
        }
        if let Some(ref v) = self.options.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.request_id != 0 {
            os.write_int64(3, self.request_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MakeCallableRequest {
        MakeCallableRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "session_handle",
                |m: &MakeCallableRequest| { &m.session_handle },
                |m: &mut MakeCallableRequest| { &mut m.session_handle },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::config::CallableOptions>>(
                "options",
                |m: &MakeCallableRequest| { &m.options },
                |m: &mut MakeCallableRequest| { &mut m.options },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "request_id",
                |m: &MakeCallableRequest| { &m.request_id },
                |m: &mut MakeCallableRequest| { &mut m.request_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MakeCallableRequest>(
                "MakeCallableRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MakeCallableRequest {
        static instance: ::protobuf::rt::LazyV2<MakeCallableRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MakeCallableRequest::new)
    }
}

impl ::protobuf::Clear for MakeCallableRequest {
    fn clear(&mut self) {
        self.session_handle.clear();
        self.options.clear();
        self.request_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MakeCallableRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MakeCallableRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MakeCallableResponse {
    // message fields
    pub handle: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MakeCallableResponse {
    fn default() -> &'a MakeCallableResponse {
        <MakeCallableResponse as ::protobuf::Message>::default_instance()
    }
}

impl MakeCallableResponse {
    pub fn new() -> MakeCallableResponse {
        ::std::default::Default::default()
    }

    // int64 handle = 1;


    pub fn get_handle(&self) -> i64 {
        self.handle
    }
    pub fn clear_handle(&mut self) {
        self.handle = 0;
    }

    // Param is passed by value, moved
    pub fn set_handle(&mut self, v: i64) {
        self.handle = v;
    }
}

impl ::protobuf::Message for MakeCallableResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.handle = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.handle != 0 {
            my_size += ::protobuf::rt::value_size(1, self.handle, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.handle != 0 {
            os.write_int64(1, self.handle)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MakeCallableResponse {
        MakeCallableResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "handle",
                |m: &MakeCallableResponse| { &m.handle },
                |m: &mut MakeCallableResponse| { &mut m.handle },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MakeCallableResponse>(
                "MakeCallableResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MakeCallableResponse {
        static instance: ::protobuf::rt::LazyV2<MakeCallableResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MakeCallableResponse::new)
    }
}

impl ::protobuf::Clear for MakeCallableResponse {
    fn clear(&mut self) {
        self.handle = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MakeCallableResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MakeCallableResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RunCallableRequest {
    // message fields
    pub session_handle: ::std::string::String,
    pub handle: i64,
    pub feed: ::protobuf::RepeatedField<super::tensor::TensorProto>,
    pub request_id: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RunCallableRequest {
    fn default() -> &'a RunCallableRequest {
        <RunCallableRequest as ::protobuf::Message>::default_instance()
    }
}

impl RunCallableRequest {
    pub fn new() -> RunCallableRequest {
        ::std::default::Default::default()
    }

    // string session_handle = 1;


    pub fn get_session_handle(&self) -> &str {
        &self.session_handle
    }
    pub fn clear_session_handle(&mut self) {
        self.session_handle.clear();
    }

    // Param is passed by value, moved
    pub fn set_session_handle(&mut self, v: ::std::string::String) {
        self.session_handle = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_session_handle(&mut self) -> &mut ::std::string::String {
        &mut self.session_handle
    }

    // Take field
    pub fn take_session_handle(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.session_handle, ::std::string::String::new())
    }

    // int64 handle = 2;


    pub fn get_handle(&self) -> i64 {
        self.handle
    }
    pub fn clear_handle(&mut self) {
        self.handle = 0;
    }

    // Param is passed by value, moved
    pub fn set_handle(&mut self, v: i64) {
        self.handle = v;
    }

    // repeated .tensorflow.TensorProto feed = 3;


    pub fn get_feed(&self) -> &[super::tensor::TensorProto] {
        &self.feed
    }
    pub fn clear_feed(&mut self) {
        self.feed.clear();
    }

    // Param is passed by value, moved
    pub fn set_feed(&mut self, v: ::protobuf::RepeatedField<super::tensor::TensorProto>) {
        self.feed = v;
    }

    // Mutable pointer to the field.
    pub fn mut_feed(&mut self) -> &mut ::protobuf::RepeatedField<super::tensor::TensorProto> {
        &mut self.feed
    }

    // Take field
    pub fn take_feed(&mut self) -> ::protobuf::RepeatedField<super::tensor::TensorProto> {
        ::std::mem::replace(&mut self.feed, ::protobuf::RepeatedField::new())
    }

    // int64 request_id = 4;


    pub fn get_request_id(&self) -> i64 {
        self.request_id
    }
    pub fn clear_request_id(&mut self) {
        self.request_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_request_id(&mut self, v: i64) {
        self.request_id = v;
    }
}

impl ::protobuf::Message for RunCallableRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.feed {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.session_handle)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.handle = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.feed)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.request_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.session_handle.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.session_handle);
        }
        if self.handle != 0 {
            my_size += ::protobuf::rt::value_size(2, self.handle, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.feed {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.request_id != 0 {
            my_size += ::protobuf::rt::value_size(4, self.request_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.session_handle.is_empty() {
            os.write_string(1, &self.session_handle)?;
        }
        if self.handle != 0 {
            os.write_int64(2, self.handle)?;
        }
        for v in &self.feed {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.request_id != 0 {
            os.write_int64(4, self.request_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RunCallableRequest {
        RunCallableRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "session_handle",
                |m: &RunCallableRequest| { &m.session_handle },
                |m: &mut RunCallableRequest| { &mut m.session_handle },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "handle",
                |m: &RunCallableRequest| { &m.handle },
                |m: &mut RunCallableRequest| { &mut m.handle },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::tensor::TensorProto>>(
                "feed",
                |m: &RunCallableRequest| { &m.feed },
                |m: &mut RunCallableRequest| { &mut m.feed },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "request_id",
                |m: &RunCallableRequest| { &m.request_id },
                |m: &mut RunCallableRequest| { &mut m.request_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RunCallableRequest>(
                "RunCallableRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RunCallableRequest {
        static instance: ::protobuf::rt::LazyV2<RunCallableRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RunCallableRequest::new)
    }
}

impl ::protobuf::Clear for RunCallableRequest {
    fn clear(&mut self) {
        self.session_handle.clear();
        self.handle = 0;
        self.feed.clear();
        self.request_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RunCallableRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RunCallableRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RunCallableResponse {
    // message fields
    pub fetch: ::protobuf::RepeatedField<super::tensor::TensorProto>,
    pub metadata: ::protobuf::SingularPtrField<super::config::RunMetadata>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RunCallableResponse {
    fn default() -> &'a RunCallableResponse {
        <RunCallableResponse as ::protobuf::Message>::default_instance()
    }
}

impl RunCallableResponse {
    pub fn new() -> RunCallableResponse {
        ::std::default::Default::default()
    }

    // repeated .tensorflow.TensorProto fetch = 1;


    pub fn get_fetch(&self) -> &[super::tensor::TensorProto] {
        &self.fetch
    }
    pub fn clear_fetch(&mut self) {
        self.fetch.clear();
    }

    // Param is passed by value, moved
    pub fn set_fetch(&mut self, v: ::protobuf::RepeatedField<super::tensor::TensorProto>) {
        self.fetch = v;
    }

    // Mutable pointer to the field.
    pub fn mut_fetch(&mut self) -> &mut ::protobuf::RepeatedField<super::tensor::TensorProto> {
        &mut self.fetch
    }

    // Take field
    pub fn take_fetch(&mut self) -> ::protobuf::RepeatedField<super::tensor::TensorProto> {
        ::std::mem::replace(&mut self.fetch, ::protobuf::RepeatedField::new())
    }

    // .tensorflow.RunMetadata metadata = 2;


    pub fn get_metadata(&self) -> &super::config::RunMetadata {
        self.metadata.as_ref().unwrap_or_else(|| <super::config::RunMetadata as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: super::config::RunMetadata) {
        self.metadata = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut super::config::RunMetadata {
        if self.metadata.is_none() {
            self.metadata.set_default();
        }
        self.metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata(&mut self) -> super::config::RunMetadata {
        self.metadata.take().unwrap_or_else(|| super::config::RunMetadata::new())
    }
}

impl ::protobuf::Message for RunCallableResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.fetch {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.metadata {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.fetch)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metadata)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.fetch {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.fetch {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.metadata.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RunCallableResponse {
        RunCallableResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::tensor::TensorProto>>(
                "fetch",
                |m: &RunCallableResponse| { &m.fetch },
                |m: &mut RunCallableResponse| { &mut m.fetch },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::config::RunMetadata>>(
                "metadata",
                |m: &RunCallableResponse| { &m.metadata },
                |m: &mut RunCallableResponse| { &mut m.metadata },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RunCallableResponse>(
                "RunCallableResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RunCallableResponse {
        static instance: ::protobuf::rt::LazyV2<RunCallableResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RunCallableResponse::new)
    }
}

impl ::protobuf::Clear for RunCallableResponse {
    fn clear(&mut self) {
        self.fetch.clear();
        self.metadata.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RunCallableResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RunCallableResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReleaseCallableRequest {
    // message fields
    pub session_handle: ::std::string::String,
    pub handle: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReleaseCallableRequest {
    fn default() -> &'a ReleaseCallableRequest {
        <ReleaseCallableRequest as ::protobuf::Message>::default_instance()
    }
}

impl ReleaseCallableRequest {
    pub fn new() -> ReleaseCallableRequest {
        ::std::default::Default::default()
    }

    // string session_handle = 1;


    pub fn get_session_handle(&self) -> &str {
        &self.session_handle
    }
    pub fn clear_session_handle(&mut self) {
        self.session_handle.clear();
    }

    // Param is passed by value, moved
    pub fn set_session_handle(&mut self, v: ::std::string::String) {
        self.session_handle = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_session_handle(&mut self) -> &mut ::std::string::String {
        &mut self.session_handle
    }

    // Take field
    pub fn take_session_handle(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.session_handle, ::std::string::String::new())
    }

    // int64 handle = 2;


    pub fn get_handle(&self) -> i64 {
        self.handle
    }
    pub fn clear_handle(&mut self) {
        self.handle = 0;
    }

    // Param is passed by value, moved
    pub fn set_handle(&mut self, v: i64) {
        self.handle = v;
    }
}

impl ::protobuf::Message for ReleaseCallableRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.session_handle)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.handle = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.session_handle.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.session_handle);
        }
        if self.handle != 0 {
            my_size += ::protobuf::rt::value_size(2, self.handle, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.session_handle.is_empty() {
            os.write_string(1, &self.session_handle)?;
        }
        if self.handle != 0 {
            os.write_int64(2, self.handle)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReleaseCallableRequest {
        ReleaseCallableRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "session_handle",
                |m: &ReleaseCallableRequest| { &m.session_handle },
                |m: &mut ReleaseCallableRequest| { &mut m.session_handle },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "handle",
                |m: &ReleaseCallableRequest| { &m.handle },
                |m: &mut ReleaseCallableRequest| { &mut m.handle },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReleaseCallableRequest>(
                "ReleaseCallableRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReleaseCallableRequest {
        static instance: ::protobuf::rt::LazyV2<ReleaseCallableRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReleaseCallableRequest::new)
    }
}

impl ::protobuf::Clear for ReleaseCallableRequest {
    fn clear(&mut self) {
        self.session_handle.clear();
        self.handle = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReleaseCallableRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReleaseCallableRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReleaseCallableResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReleaseCallableResponse {
    fn default() -> &'a ReleaseCallableResponse {
        <ReleaseCallableResponse as ::protobuf::Message>::default_instance()
    }
}

impl ReleaseCallableResponse {
    pub fn new() -> ReleaseCallableResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ReleaseCallableResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReleaseCallableResponse {
        ReleaseCallableResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReleaseCallableResponse>(
                "ReleaseCallableResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReleaseCallableResponse {
        static instance: ::protobuf::rt::LazyV2<ReleaseCallableResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReleaseCallableResponse::new)
    }
}

impl ::protobuf::Clear for ReleaseCallableResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReleaseCallableResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReleaseCallableResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%tensorflow/core/protobuf/master.proto\x12\ntensorflow\x1a1tensorflow/\
    core/framework/device_attributes.proto\x1a%tensorflow/core/framework/gra\
    ph.proto\x1a&tensorflow/core/framework/tensor.proto\x1a*tensorflow/core/\
    lib/core/error_codes.proto\x1a%tensorflow/core/protobuf/config.proto\x1a\
    +tensorflow/core/protobuf/named_tensor.proto\"\x92\x01\n\x14CreateSessio\
    nRequest\x121\n\tgraph_def\x18\x01\x20\x01(\x0b2\x14.tensorflow.GraphDef\
    R\x08graphDef\x12/\n\x06config\x18\x02\x20\x01(\x0b2\x17.tensorflow.Conf\
    igProtoR\x06config\x12\x16\n\x06target\x18\x03\x20\x01(\tR\x06target\"c\
    \n\x15CreateSessionResponse\x12%\n\x0esession_handle\x18\x01\x20\x01(\tR\
    \rsessionHandle\x12#\n\rgraph_version\x18\x02\x20\x01(\x03R\x0cgraphVers\
    ion\"\xa4\x01\n\x14ExtendSessionRequest\x12%\n\x0esession_handle\x18\x01\
    \x20\x01(\tR\rsessionHandle\x121\n\tgraph_def\x18\x02\x20\x01(\x0b2\x14.\
    tensorflow.GraphDefR\x08graphDef\x122\n\x15current_graph_version\x18\x03\
    \x20\x01(\x03R\x13currentGraphVersion\"C\n\x15ExtendSessionResponse\x12*\
    \n\x11new_graph_version\x18\x04\x20\x01(\x03R\x0fnewGraphVersion\"\xd8\
    \x02\n\x0eRunStepRequest\x12%\n\x0esession_handle\x18\x01\x20\x01(\tR\rs\
    essionHandle\x120\n\x04feed\x18\x02\x20\x03(\x0b2\x1c.tensorflow.NamedTe\
    nsorProtoR\x04feed\x12\x14\n\x05fetch\x18\x03\x20\x03(\tR\x05fetch\x12\
    \x16\n\x06target\x18\x04\x20\x03(\tR\x06target\x120\n\x07options\x18\x05\
    \x20\x01(\x0b2\x16.tensorflow.RunOptionsR\x07options\x12,\n\x12partial_r\
    un_handle\x18\x06\x20\x01(\tR\x10partialRunHandle\x12@\n\x1dstore_errors\
    _in_response_body\x18\x07\x20\x01(\x08R\x19storeErrorsInResponseBody\x12\
    \x1d\n\nrequest_id\x18\x08\x20\x01(\x03R\trequestId\"\xe7\x01\n\x0fRunSt\
    epResponse\x124\n\x06tensor\x18\x01\x20\x03(\x0b2\x1c.tensorflow.NamedTe\
    nsorProtoR\x06tensor\x123\n\x08metadata\x18\x02\x20\x01(\x0b2\x17.tensor\
    flow.RunMetadataR\x08metadata\x127\n\x0bstatus_code\x18\x03\x20\x01(\x0e\
    2\x16.tensorflow.error.CodeR\nstatusCode\x120\n\x14status_error_message\
    \x18\x04\x20\x01(\tR\x12statusErrorMessage\"\xa0\x01\n\x16PartialRunSetu\
    pRequest\x12%\n\x0esession_handle\x18\x01\x20\x01(\tR\rsessionHandle\x12\
    \x12\n\x04feed\x18\x02\x20\x03(\tR\x04feed\x12\x14\n\x05fetch\x18\x03\
    \x20\x03(\tR\x05fetch\x12\x16\n\x06target\x18\x04\x20\x03(\tR\x06target\
    \x12\x1d\n\nrequest_id\x18\x05\x20\x01(\x03R\trequestId\"G\n\x17PartialR\
    unSetupResponse\x12,\n\x12partial_run_handle\x18\x01\x20\x01(\tR\x10part\
    ialRunHandle\"<\n\x13CloseSessionRequest\x12%\n\x0esession_handle\x18\
    \x01\x20\x01(\tR\rsessionHandle\"\x16\n\x14CloseSessionResponse\"S\n\x0c\
    ResetRequest\x12\x1c\n\tcontainer\x18\x01\x20\x03(\tR\tcontainer\x12%\n\
    \x0edevice_filters\x18\x02\x20\x03(\tR\rdeviceFilters\"\x0f\n\rResetResp\
    onse\";\n\x12ListDevicesRequest\x12%\n\x0esession_handle\x18\x01\x20\x01\
    (\tR\rsessionHandle\"\x99\x01\n\x13ListDevicesResponse\x12?\n\x0clocal_d\
    evice\x18\x01\x20\x03(\x0b2\x1c.tensorflow.DeviceAttributesR\x0blocalDev\
    ice\x12A\n\rremote_device\x18\x02\x20\x03(\x0b2\x1c.tensorflow.DeviceAtt\
    ributesR\x0cremoteDevice\"\x92\x01\n\x13MakeCallableRequest\x12%\n\x0ese\
    ssion_handle\x18\x01\x20\x01(\tR\rsessionHandle\x125\n\x07options\x18\
    \x02\x20\x01(\x0b2\x1b.tensorflow.CallableOptionsR\x07options\x12\x1d\n\
    \nrequest_id\x18\x03\x20\x01(\x03R\trequestId\".\n\x14MakeCallableRespon\
    se\x12\x16\n\x06handle\x18\x01\x20\x01(\x03R\x06handle\"\x9f\x01\n\x12Ru\
    nCallableRequest\x12%\n\x0esession_handle\x18\x01\x20\x01(\tR\rsessionHa\
    ndle\x12\x16\n\x06handle\x18\x02\x20\x01(\x03R\x06handle\x12+\n\x04feed\
    \x18\x03\x20\x03(\x0b2\x17.tensorflow.TensorProtoR\x04feed\x12\x1d\n\nre\
    quest_id\x18\x04\x20\x01(\x03R\trequestId\"y\n\x13RunCallableResponse\
    \x12-\n\x05fetch\x18\x01\x20\x03(\x0b2\x17.tensorflow.TensorProtoR\x05fe\
    tch\x123\n\x08metadata\x18\x02\x20\x01(\x0b2\x17.tensorflow.RunMetadataR\
    \x08metadata\"W\n\x16ReleaseCallableRequest\x12%\n\x0esession_handle\x18\
    \x01\x20\x01(\tR\rsessionHandle\x12\x16\n\x06handle\x18\x02\x20\x01(\x03\
    R\x06handle\"\x19\n\x17ReleaseCallableResponseBy\n\x1aorg.tensorflow.dis\
    truntimeB\x18DistributedRuntimeProtosP\x01Z<github.com/tensorflow/tensor\
    flow/tensorflow/go/core/protobuf\xf8\x01\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
