// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow/core/protobuf/trackable_object_graph.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct TrackableObjectGraph {
    // message fields
    pub nodes: ::protobuf::RepeatedField<TrackableObjectGraph_TrackableObject>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TrackableObjectGraph {
    fn default() -> &'a TrackableObjectGraph {
        <TrackableObjectGraph as ::protobuf::Message>::default_instance()
    }
}

impl TrackableObjectGraph {
    pub fn new() -> TrackableObjectGraph {
        ::std::default::Default::default()
    }

    // repeated .tensorflow.TrackableObjectGraph.TrackableObject nodes = 1;


    pub fn get_nodes(&self) -> &[TrackableObjectGraph_TrackableObject] {
        &self.nodes
    }
    pub fn clear_nodes(&mut self) {
        self.nodes.clear();
    }

    // Param is passed by value, moved
    pub fn set_nodes(&mut self, v: ::protobuf::RepeatedField<TrackableObjectGraph_TrackableObject>) {
        self.nodes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_nodes(&mut self) -> &mut ::protobuf::RepeatedField<TrackableObjectGraph_TrackableObject> {
        &mut self.nodes
    }

    // Take field
    pub fn take_nodes(&mut self) -> ::protobuf::RepeatedField<TrackableObjectGraph_TrackableObject> {
        ::std::mem::replace(&mut self.nodes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TrackableObjectGraph {
    fn is_initialized(&self) -> bool {
        for v in &self.nodes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.nodes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.nodes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.nodes {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TrackableObjectGraph {
        TrackableObjectGraph::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TrackableObjectGraph_TrackableObject>>(
                "nodes",
                |m: &TrackableObjectGraph| { &m.nodes },
                |m: &mut TrackableObjectGraph| { &mut m.nodes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TrackableObjectGraph>(
                "TrackableObjectGraph",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TrackableObjectGraph {
        static instance: ::protobuf::rt::LazyV2<TrackableObjectGraph> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TrackableObjectGraph::new)
    }
}

impl ::protobuf::Clear for TrackableObjectGraph {
    fn clear(&mut self) {
        self.nodes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TrackableObjectGraph {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TrackableObjectGraph {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TrackableObjectGraph_TrackableObject {
    // message fields
    pub children: ::protobuf::RepeatedField<TrackableObjectGraph_TrackableObject_ObjectReference>,
    pub attributes: ::protobuf::RepeatedField<TrackableObjectGraph_TrackableObject_SerializedTensor>,
    pub slot_variables: ::protobuf::RepeatedField<TrackableObjectGraph_TrackableObject_SlotVariableReference>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TrackableObjectGraph_TrackableObject {
    fn default() -> &'a TrackableObjectGraph_TrackableObject {
        <TrackableObjectGraph_TrackableObject as ::protobuf::Message>::default_instance()
    }
}

impl TrackableObjectGraph_TrackableObject {
    pub fn new() -> TrackableObjectGraph_TrackableObject {
        ::std::default::Default::default()
    }

    // repeated .tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference children = 1;


    pub fn get_children(&self) -> &[TrackableObjectGraph_TrackableObject_ObjectReference] {
        &self.children
    }
    pub fn clear_children(&mut self) {
        self.children.clear();
    }

    // Param is passed by value, moved
    pub fn set_children(&mut self, v: ::protobuf::RepeatedField<TrackableObjectGraph_TrackableObject_ObjectReference>) {
        self.children = v;
    }

    // Mutable pointer to the field.
    pub fn mut_children(&mut self) -> &mut ::protobuf::RepeatedField<TrackableObjectGraph_TrackableObject_ObjectReference> {
        &mut self.children
    }

    // Take field
    pub fn take_children(&mut self) -> ::protobuf::RepeatedField<TrackableObjectGraph_TrackableObject_ObjectReference> {
        ::std::mem::replace(&mut self.children, ::protobuf::RepeatedField::new())
    }

    // repeated .tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor attributes = 2;


    pub fn get_attributes(&self) -> &[TrackableObjectGraph_TrackableObject_SerializedTensor] {
        &self.attributes
    }
    pub fn clear_attributes(&mut self) {
        self.attributes.clear();
    }

    // Param is passed by value, moved
    pub fn set_attributes(&mut self, v: ::protobuf::RepeatedField<TrackableObjectGraph_TrackableObject_SerializedTensor>) {
        self.attributes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_attributes(&mut self) -> &mut ::protobuf::RepeatedField<TrackableObjectGraph_TrackableObject_SerializedTensor> {
        &mut self.attributes
    }

    // Take field
    pub fn take_attributes(&mut self) -> ::protobuf::RepeatedField<TrackableObjectGraph_TrackableObject_SerializedTensor> {
        ::std::mem::replace(&mut self.attributes, ::protobuf::RepeatedField::new())
    }

    // repeated .tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference slot_variables = 3;


    pub fn get_slot_variables(&self) -> &[TrackableObjectGraph_TrackableObject_SlotVariableReference] {
        &self.slot_variables
    }
    pub fn clear_slot_variables(&mut self) {
        self.slot_variables.clear();
    }

    // Param is passed by value, moved
    pub fn set_slot_variables(&mut self, v: ::protobuf::RepeatedField<TrackableObjectGraph_TrackableObject_SlotVariableReference>) {
        self.slot_variables = v;
    }

    // Mutable pointer to the field.
    pub fn mut_slot_variables(&mut self) -> &mut ::protobuf::RepeatedField<TrackableObjectGraph_TrackableObject_SlotVariableReference> {
        &mut self.slot_variables
    }

    // Take field
    pub fn take_slot_variables(&mut self) -> ::protobuf::RepeatedField<TrackableObjectGraph_TrackableObject_SlotVariableReference> {
        ::std::mem::replace(&mut self.slot_variables, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TrackableObjectGraph_TrackableObject {
    fn is_initialized(&self) -> bool {
        for v in &self.children {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.attributes {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.slot_variables {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.children)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.attributes)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.slot_variables)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.children {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.attributes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.slot_variables {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.children {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.attributes {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.slot_variables {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TrackableObjectGraph_TrackableObject {
        TrackableObjectGraph_TrackableObject::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TrackableObjectGraph_TrackableObject_ObjectReference>>(
                "children",
                |m: &TrackableObjectGraph_TrackableObject| { &m.children },
                |m: &mut TrackableObjectGraph_TrackableObject| { &mut m.children },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TrackableObjectGraph_TrackableObject_SerializedTensor>>(
                "attributes",
                |m: &TrackableObjectGraph_TrackableObject| { &m.attributes },
                |m: &mut TrackableObjectGraph_TrackableObject| { &mut m.attributes },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TrackableObjectGraph_TrackableObject_SlotVariableReference>>(
                "slot_variables",
                |m: &TrackableObjectGraph_TrackableObject| { &m.slot_variables },
                |m: &mut TrackableObjectGraph_TrackableObject| { &mut m.slot_variables },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TrackableObjectGraph_TrackableObject>(
                "TrackableObjectGraph.TrackableObject",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TrackableObjectGraph_TrackableObject {
        static instance: ::protobuf::rt::LazyV2<TrackableObjectGraph_TrackableObject> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TrackableObjectGraph_TrackableObject::new)
    }
}

impl ::protobuf::Clear for TrackableObjectGraph_TrackableObject {
    fn clear(&mut self) {
        self.children.clear();
        self.attributes.clear();
        self.slot_variables.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TrackableObjectGraph_TrackableObject {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TrackableObjectGraph_TrackableObject {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TrackableObjectGraph_TrackableObject_ObjectReference {
    // message fields
    pub node_id: i32,
    pub local_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TrackableObjectGraph_TrackableObject_ObjectReference {
    fn default() -> &'a TrackableObjectGraph_TrackableObject_ObjectReference {
        <TrackableObjectGraph_TrackableObject_ObjectReference as ::protobuf::Message>::default_instance()
    }
}

impl TrackableObjectGraph_TrackableObject_ObjectReference {
    pub fn new() -> TrackableObjectGraph_TrackableObject_ObjectReference {
        ::std::default::Default::default()
    }

    // int32 node_id = 1;


    pub fn get_node_id(&self) -> i32 {
        self.node_id
    }
    pub fn clear_node_id(&mut self) {
        self.node_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_node_id(&mut self, v: i32) {
        self.node_id = v;
    }

    // string local_name = 2;


    pub fn get_local_name(&self) -> &str {
        &self.local_name
    }
    pub fn clear_local_name(&mut self) {
        self.local_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_local_name(&mut self, v: ::std::string::String) {
        self.local_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_local_name(&mut self) -> &mut ::std::string::String {
        &mut self.local_name
    }

    // Take field
    pub fn take_local_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.local_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TrackableObjectGraph_TrackableObject_ObjectReference {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.node_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.local_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.node_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.node_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.local_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.local_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.node_id != 0 {
            os.write_int32(1, self.node_id)?;
        }
        if !self.local_name.is_empty() {
            os.write_string(2, &self.local_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TrackableObjectGraph_TrackableObject_ObjectReference {
        TrackableObjectGraph_TrackableObject_ObjectReference::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "node_id",
                |m: &TrackableObjectGraph_TrackableObject_ObjectReference| { &m.node_id },
                |m: &mut TrackableObjectGraph_TrackableObject_ObjectReference| { &mut m.node_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "local_name",
                |m: &TrackableObjectGraph_TrackableObject_ObjectReference| { &m.local_name },
                |m: &mut TrackableObjectGraph_TrackableObject_ObjectReference| { &mut m.local_name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TrackableObjectGraph_TrackableObject_ObjectReference>(
                "TrackableObjectGraph.TrackableObject.ObjectReference",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TrackableObjectGraph_TrackableObject_ObjectReference {
        static instance: ::protobuf::rt::LazyV2<TrackableObjectGraph_TrackableObject_ObjectReference> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TrackableObjectGraph_TrackableObject_ObjectReference::new)
    }
}

impl ::protobuf::Clear for TrackableObjectGraph_TrackableObject_ObjectReference {
    fn clear(&mut self) {
        self.node_id = 0;
        self.local_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TrackableObjectGraph_TrackableObject_ObjectReference {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TrackableObjectGraph_TrackableObject_ObjectReference {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TrackableObjectGraph_TrackableObject_SerializedTensor {
    // message fields
    pub name: ::std::string::String,
    pub full_name: ::std::string::String,
    pub checkpoint_key: ::std::string::String,
    pub optional_restore: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TrackableObjectGraph_TrackableObject_SerializedTensor {
    fn default() -> &'a TrackableObjectGraph_TrackableObject_SerializedTensor {
        <TrackableObjectGraph_TrackableObject_SerializedTensor as ::protobuf::Message>::default_instance()
    }
}

impl TrackableObjectGraph_TrackableObject_SerializedTensor {
    pub fn new() -> TrackableObjectGraph_TrackableObject_SerializedTensor {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string full_name = 2;


    pub fn get_full_name(&self) -> &str {
        &self.full_name
    }
    pub fn clear_full_name(&mut self) {
        self.full_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_full_name(&mut self, v: ::std::string::String) {
        self.full_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_full_name(&mut self) -> &mut ::std::string::String {
        &mut self.full_name
    }

    // Take field
    pub fn take_full_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.full_name, ::std::string::String::new())
    }

    // string checkpoint_key = 3;


    pub fn get_checkpoint_key(&self) -> &str {
        &self.checkpoint_key
    }
    pub fn clear_checkpoint_key(&mut self) {
        self.checkpoint_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_checkpoint_key(&mut self, v: ::std::string::String) {
        self.checkpoint_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_checkpoint_key(&mut self) -> &mut ::std::string::String {
        &mut self.checkpoint_key
    }

    // Take field
    pub fn take_checkpoint_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.checkpoint_key, ::std::string::String::new())
    }

    // bool optional_restore = 4;


    pub fn get_optional_restore(&self) -> bool {
        self.optional_restore
    }
    pub fn clear_optional_restore(&mut self) {
        self.optional_restore = false;
    }

    // Param is passed by value, moved
    pub fn set_optional_restore(&mut self, v: bool) {
        self.optional_restore = v;
    }
}

impl ::protobuf::Message for TrackableObjectGraph_TrackableObject_SerializedTensor {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.full_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.checkpoint_key)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.optional_restore = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.full_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.full_name);
        }
        if !self.checkpoint_key.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.checkpoint_key);
        }
        if self.optional_restore != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.full_name.is_empty() {
            os.write_string(2, &self.full_name)?;
        }
        if !self.checkpoint_key.is_empty() {
            os.write_string(3, &self.checkpoint_key)?;
        }
        if self.optional_restore != false {
            os.write_bool(4, self.optional_restore)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TrackableObjectGraph_TrackableObject_SerializedTensor {
        TrackableObjectGraph_TrackableObject_SerializedTensor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &TrackableObjectGraph_TrackableObject_SerializedTensor| { &m.name },
                |m: &mut TrackableObjectGraph_TrackableObject_SerializedTensor| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "full_name",
                |m: &TrackableObjectGraph_TrackableObject_SerializedTensor| { &m.full_name },
                |m: &mut TrackableObjectGraph_TrackableObject_SerializedTensor| { &mut m.full_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "checkpoint_key",
                |m: &TrackableObjectGraph_TrackableObject_SerializedTensor| { &m.checkpoint_key },
                |m: &mut TrackableObjectGraph_TrackableObject_SerializedTensor| { &mut m.checkpoint_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "optional_restore",
                |m: &TrackableObjectGraph_TrackableObject_SerializedTensor| { &m.optional_restore },
                |m: &mut TrackableObjectGraph_TrackableObject_SerializedTensor| { &mut m.optional_restore },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TrackableObjectGraph_TrackableObject_SerializedTensor>(
                "TrackableObjectGraph.TrackableObject.SerializedTensor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TrackableObjectGraph_TrackableObject_SerializedTensor {
        static instance: ::protobuf::rt::LazyV2<TrackableObjectGraph_TrackableObject_SerializedTensor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TrackableObjectGraph_TrackableObject_SerializedTensor::new)
    }
}

impl ::protobuf::Clear for TrackableObjectGraph_TrackableObject_SerializedTensor {
    fn clear(&mut self) {
        self.name.clear();
        self.full_name.clear();
        self.checkpoint_key.clear();
        self.optional_restore = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TrackableObjectGraph_TrackableObject_SerializedTensor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TrackableObjectGraph_TrackableObject_SerializedTensor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TrackableObjectGraph_TrackableObject_SlotVariableReference {
    // message fields
    pub original_variable_node_id: i32,
    pub slot_name: ::std::string::String,
    pub slot_variable_node_id: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TrackableObjectGraph_TrackableObject_SlotVariableReference {
    fn default() -> &'a TrackableObjectGraph_TrackableObject_SlotVariableReference {
        <TrackableObjectGraph_TrackableObject_SlotVariableReference as ::protobuf::Message>::default_instance()
    }
}

impl TrackableObjectGraph_TrackableObject_SlotVariableReference {
    pub fn new() -> TrackableObjectGraph_TrackableObject_SlotVariableReference {
        ::std::default::Default::default()
    }

    // int32 original_variable_node_id = 1;


    pub fn get_original_variable_node_id(&self) -> i32 {
        self.original_variable_node_id
    }
    pub fn clear_original_variable_node_id(&mut self) {
        self.original_variable_node_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_original_variable_node_id(&mut self, v: i32) {
        self.original_variable_node_id = v;
    }

    // string slot_name = 2;


    pub fn get_slot_name(&self) -> &str {
        &self.slot_name
    }
    pub fn clear_slot_name(&mut self) {
        self.slot_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_slot_name(&mut self, v: ::std::string::String) {
        self.slot_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_slot_name(&mut self) -> &mut ::std::string::String {
        &mut self.slot_name
    }

    // Take field
    pub fn take_slot_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.slot_name, ::std::string::String::new())
    }

    // int32 slot_variable_node_id = 3;


    pub fn get_slot_variable_node_id(&self) -> i32 {
        self.slot_variable_node_id
    }
    pub fn clear_slot_variable_node_id(&mut self) {
        self.slot_variable_node_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_slot_variable_node_id(&mut self, v: i32) {
        self.slot_variable_node_id = v;
    }
}

impl ::protobuf::Message for TrackableObjectGraph_TrackableObject_SlotVariableReference {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.original_variable_node_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.slot_name)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.slot_variable_node_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.original_variable_node_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.original_variable_node_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.slot_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.slot_name);
        }
        if self.slot_variable_node_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.slot_variable_node_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.original_variable_node_id != 0 {
            os.write_int32(1, self.original_variable_node_id)?;
        }
        if !self.slot_name.is_empty() {
            os.write_string(2, &self.slot_name)?;
        }
        if self.slot_variable_node_id != 0 {
            os.write_int32(3, self.slot_variable_node_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TrackableObjectGraph_TrackableObject_SlotVariableReference {
        TrackableObjectGraph_TrackableObject_SlotVariableReference::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "original_variable_node_id",
                |m: &TrackableObjectGraph_TrackableObject_SlotVariableReference| { &m.original_variable_node_id },
                |m: &mut TrackableObjectGraph_TrackableObject_SlotVariableReference| { &mut m.original_variable_node_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "slot_name",
                |m: &TrackableObjectGraph_TrackableObject_SlotVariableReference| { &m.slot_name },
                |m: &mut TrackableObjectGraph_TrackableObject_SlotVariableReference| { &mut m.slot_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "slot_variable_node_id",
                |m: &TrackableObjectGraph_TrackableObject_SlotVariableReference| { &m.slot_variable_node_id },
                |m: &mut TrackableObjectGraph_TrackableObject_SlotVariableReference| { &mut m.slot_variable_node_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TrackableObjectGraph_TrackableObject_SlotVariableReference>(
                "TrackableObjectGraph.TrackableObject.SlotVariableReference",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TrackableObjectGraph_TrackableObject_SlotVariableReference {
        static instance: ::protobuf::rt::LazyV2<TrackableObjectGraph_TrackableObject_SlotVariableReference> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TrackableObjectGraph_TrackableObject_SlotVariableReference::new)
    }
}

impl ::protobuf::Clear for TrackableObjectGraph_TrackableObject_SlotVariableReference {
    fn clear(&mut self) {
        self.original_variable_node_id = 0;
        self.slot_name.clear();
        self.slot_variable_node_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TrackableObjectGraph_TrackableObject_SlotVariableReference {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TrackableObjectGraph_TrackableObject_SlotVariableReference {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n5tensorflow/core/protobuf/trackable_object_graph.proto\x12\ntensorflow\
    \"\xaa\x06\n\x14TrackableObjectGraph\x12F\n\x05nodes\x18\x01\x20\x03(\
    \x0b20.tensorflow.TrackableObjectGraph.TrackableObjectR\x05nodes\x1a\xc9\
    \x05\n\x0fTrackableObject\x12\\\n\x08children\x18\x01\x20\x03(\x0b2@.ten\
    sorflow.TrackableObjectGraph.TrackableObject.ObjectReferenceR\x08childre\
    n\x12a\n\nattributes\x18\x02\x20\x03(\x0b2A.tensorflow.TrackableObjectGr\
    aph.TrackableObject.SerializedTensorR\nattributes\x12m\n\x0eslot_variabl\
    es\x18\x03\x20\x03(\x0b2F.tensorflow.TrackableObjectGraph.TrackableObjec\
    t.SlotVariableReferenceR\rslotVariables\x1aI\n\x0fObjectReference\x12\
    \x17\n\x07node_id\x18\x01\x20\x01(\x05R\x06nodeId\x12\x1d\n\nlocal_name\
    \x18\x02\x20\x01(\tR\tlocalName\x1a\x95\x01\n\x10SerializedTensor\x12\
    \x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x1b\n\tfull_name\x18\x02\
    \x20\x01(\tR\x08fullName\x12%\n\x0echeckpoint_key\x18\x03\x20\x01(\tR\rc\
    heckpointKey\x12)\n\x10optional_restore\x18\x04\x20\x01(\x08R\x0foptiona\
    lRestore\x1a\xa2\x01\n\x15SlotVariableReference\x129\n\x19original_varia\
    ble_node_id\x18\x01\x20\x01(\x05R\x16originalVariableNodeId\x12\x1b\n\ts\
    lot_name\x18\x02\x20\x01(\tR\x08slotName\x121\n\x15slot_variable_node_id\
    \x18\x03\x20\x01(\x05R\x12slotVariableNodeIdB\x03\xf8\x01\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
