// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow/core/util/event.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct Event {
    // message fields
    pub wall_time: f64,
    pub step: i64,
    // message oneof groups
    pub what: ::std::option::Option<Event_oneof_what>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Event {
    fn default() -> &'a Event {
        <Event as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Event_oneof_what {
    file_version(::std::string::String),
    graph_def(::std::vec::Vec<u8>),
    summary(super::summary::Summary),
    log_message(LogMessage),
    session_log(SessionLog),
    tagged_run_metadata(TaggedRunMetadata),
    meta_graph_def(::std::vec::Vec<u8>),
}

impl Event {
    pub fn new() -> Event {
        ::std::default::Default::default()
    }

    // double wall_time = 1;


    pub fn get_wall_time(&self) -> f64 {
        self.wall_time
    }
    pub fn clear_wall_time(&mut self) {
        self.wall_time = 0.;
    }

    // Param is passed by value, moved
    pub fn set_wall_time(&mut self, v: f64) {
        self.wall_time = v;
    }

    // int64 step = 2;


    pub fn get_step(&self) -> i64 {
        self.step
    }
    pub fn clear_step(&mut self) {
        self.step = 0;
    }

    // Param is passed by value, moved
    pub fn set_step(&mut self, v: i64) {
        self.step = v;
    }

    // string file_version = 3;


    pub fn get_file_version(&self) -> &str {
        match self.what {
            ::std::option::Option::Some(Event_oneof_what::file_version(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_file_version(&mut self) {
        self.what = ::std::option::Option::None;
    }

    pub fn has_file_version(&self) -> bool {
        match self.what {
            ::std::option::Option::Some(Event_oneof_what::file_version(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_file_version(&mut self, v: ::std::string::String) {
        self.what = ::std::option::Option::Some(Event_oneof_what::file_version(v))
    }

    // Mutable pointer to the field.
    pub fn mut_file_version(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(Event_oneof_what::file_version(_)) = self.what {
        } else {
            self.what = ::std::option::Option::Some(Event_oneof_what::file_version(::std::string::String::new()));
        }
        match self.what {
            ::std::option::Option::Some(Event_oneof_what::file_version(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_file_version(&mut self) -> ::std::string::String {
        if self.has_file_version() {
            match self.what.take() {
                ::std::option::Option::Some(Event_oneof_what::file_version(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // bytes graph_def = 4;


    pub fn get_graph_def(&self) -> &[u8] {
        match self.what {
            ::std::option::Option::Some(Event_oneof_what::graph_def(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_graph_def(&mut self) {
        self.what = ::std::option::Option::None;
    }

    pub fn has_graph_def(&self) -> bool {
        match self.what {
            ::std::option::Option::Some(Event_oneof_what::graph_def(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_graph_def(&mut self, v: ::std::vec::Vec<u8>) {
        self.what = ::std::option::Option::Some(Event_oneof_what::graph_def(v))
    }

    // Mutable pointer to the field.
    pub fn mut_graph_def(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(Event_oneof_what::graph_def(_)) = self.what {
        } else {
            self.what = ::std::option::Option::Some(Event_oneof_what::graph_def(::std::vec::Vec::new()));
        }
        match self.what {
            ::std::option::Option::Some(Event_oneof_what::graph_def(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_graph_def(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_graph_def() {
            match self.what.take() {
                ::std::option::Option::Some(Event_oneof_what::graph_def(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // .tensorflow.Summary summary = 5;


    pub fn get_summary(&self) -> &super::summary::Summary {
        match self.what {
            ::std::option::Option::Some(Event_oneof_what::summary(ref v)) => v,
            _ => <super::summary::Summary as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_summary(&mut self) {
        self.what = ::std::option::Option::None;
    }

    pub fn has_summary(&self) -> bool {
        match self.what {
            ::std::option::Option::Some(Event_oneof_what::summary(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_summary(&mut self, v: super::summary::Summary) {
        self.what = ::std::option::Option::Some(Event_oneof_what::summary(v))
    }

    // Mutable pointer to the field.
    pub fn mut_summary(&mut self) -> &mut super::summary::Summary {
        if let ::std::option::Option::Some(Event_oneof_what::summary(_)) = self.what {
        } else {
            self.what = ::std::option::Option::Some(Event_oneof_what::summary(super::summary::Summary::new()));
        }
        match self.what {
            ::std::option::Option::Some(Event_oneof_what::summary(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_summary(&mut self) -> super::summary::Summary {
        if self.has_summary() {
            match self.what.take() {
                ::std::option::Option::Some(Event_oneof_what::summary(v)) => v,
                _ => panic!(),
            }
        } else {
            super::summary::Summary::new()
        }
    }

    // .tensorflow.LogMessage log_message = 6;


    pub fn get_log_message(&self) -> &LogMessage {
        match self.what {
            ::std::option::Option::Some(Event_oneof_what::log_message(ref v)) => v,
            _ => <LogMessage as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_log_message(&mut self) {
        self.what = ::std::option::Option::None;
    }

    pub fn has_log_message(&self) -> bool {
        match self.what {
            ::std::option::Option::Some(Event_oneof_what::log_message(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_log_message(&mut self, v: LogMessage) {
        self.what = ::std::option::Option::Some(Event_oneof_what::log_message(v))
    }

    // Mutable pointer to the field.
    pub fn mut_log_message(&mut self) -> &mut LogMessage {
        if let ::std::option::Option::Some(Event_oneof_what::log_message(_)) = self.what {
        } else {
            self.what = ::std::option::Option::Some(Event_oneof_what::log_message(LogMessage::new()));
        }
        match self.what {
            ::std::option::Option::Some(Event_oneof_what::log_message(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_log_message(&mut self) -> LogMessage {
        if self.has_log_message() {
            match self.what.take() {
                ::std::option::Option::Some(Event_oneof_what::log_message(v)) => v,
                _ => panic!(),
            }
        } else {
            LogMessage::new()
        }
    }

    // .tensorflow.SessionLog session_log = 7;


    pub fn get_session_log(&self) -> &SessionLog {
        match self.what {
            ::std::option::Option::Some(Event_oneof_what::session_log(ref v)) => v,
            _ => <SessionLog as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_session_log(&mut self) {
        self.what = ::std::option::Option::None;
    }

    pub fn has_session_log(&self) -> bool {
        match self.what {
            ::std::option::Option::Some(Event_oneof_what::session_log(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_session_log(&mut self, v: SessionLog) {
        self.what = ::std::option::Option::Some(Event_oneof_what::session_log(v))
    }

    // Mutable pointer to the field.
    pub fn mut_session_log(&mut self) -> &mut SessionLog {
        if let ::std::option::Option::Some(Event_oneof_what::session_log(_)) = self.what {
        } else {
            self.what = ::std::option::Option::Some(Event_oneof_what::session_log(SessionLog::new()));
        }
        match self.what {
            ::std::option::Option::Some(Event_oneof_what::session_log(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_session_log(&mut self) -> SessionLog {
        if self.has_session_log() {
            match self.what.take() {
                ::std::option::Option::Some(Event_oneof_what::session_log(v)) => v,
                _ => panic!(),
            }
        } else {
            SessionLog::new()
        }
    }

    // .tensorflow.TaggedRunMetadata tagged_run_metadata = 8;


    pub fn get_tagged_run_metadata(&self) -> &TaggedRunMetadata {
        match self.what {
            ::std::option::Option::Some(Event_oneof_what::tagged_run_metadata(ref v)) => v,
            _ => <TaggedRunMetadata as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_tagged_run_metadata(&mut self) {
        self.what = ::std::option::Option::None;
    }

    pub fn has_tagged_run_metadata(&self) -> bool {
        match self.what {
            ::std::option::Option::Some(Event_oneof_what::tagged_run_metadata(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_tagged_run_metadata(&mut self, v: TaggedRunMetadata) {
        self.what = ::std::option::Option::Some(Event_oneof_what::tagged_run_metadata(v))
    }

    // Mutable pointer to the field.
    pub fn mut_tagged_run_metadata(&mut self) -> &mut TaggedRunMetadata {
        if let ::std::option::Option::Some(Event_oneof_what::tagged_run_metadata(_)) = self.what {
        } else {
            self.what = ::std::option::Option::Some(Event_oneof_what::tagged_run_metadata(TaggedRunMetadata::new()));
        }
        match self.what {
            ::std::option::Option::Some(Event_oneof_what::tagged_run_metadata(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_tagged_run_metadata(&mut self) -> TaggedRunMetadata {
        if self.has_tagged_run_metadata() {
            match self.what.take() {
                ::std::option::Option::Some(Event_oneof_what::tagged_run_metadata(v)) => v,
                _ => panic!(),
            }
        } else {
            TaggedRunMetadata::new()
        }
    }

    // bytes meta_graph_def = 9;


    pub fn get_meta_graph_def(&self) -> &[u8] {
        match self.what {
            ::std::option::Option::Some(Event_oneof_what::meta_graph_def(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_meta_graph_def(&mut self) {
        self.what = ::std::option::Option::None;
    }

    pub fn has_meta_graph_def(&self) -> bool {
        match self.what {
            ::std::option::Option::Some(Event_oneof_what::meta_graph_def(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_meta_graph_def(&mut self, v: ::std::vec::Vec<u8>) {
        self.what = ::std::option::Option::Some(Event_oneof_what::meta_graph_def(v))
    }

    // Mutable pointer to the field.
    pub fn mut_meta_graph_def(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(Event_oneof_what::meta_graph_def(_)) = self.what {
        } else {
            self.what = ::std::option::Option::Some(Event_oneof_what::meta_graph_def(::std::vec::Vec::new()));
        }
        match self.what {
            ::std::option::Option::Some(Event_oneof_what::meta_graph_def(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_meta_graph_def(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_meta_graph_def() {
            match self.what.take() {
                ::std::option::Option::Some(Event_oneof_what::meta_graph_def(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }
}

impl ::protobuf::Message for Event {
    fn is_initialized(&self) -> bool {
        if let Some(Event_oneof_what::summary(ref v)) = self.what {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Event_oneof_what::log_message(ref v)) = self.what {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Event_oneof_what::session_log(ref v)) = self.what {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Event_oneof_what::tagged_run_metadata(ref v)) = self.what {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.wall_time = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.step = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.what = ::std::option::Option::Some(Event_oneof_what::file_version(is.read_string()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.what = ::std::option::Option::Some(Event_oneof_what::graph_def(is.read_bytes()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.what = ::std::option::Option::Some(Event_oneof_what::summary(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.what = ::std::option::Option::Some(Event_oneof_what::log_message(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.what = ::std::option::Option::Some(Event_oneof_what::session_log(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.what = ::std::option::Option::Some(Event_oneof_what::tagged_run_metadata(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.what = ::std::option::Option::Some(Event_oneof_what::meta_graph_def(is.read_bytes()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.wall_time != 0. {
            my_size += 9;
        }
        if self.step != 0 {
            my_size += ::protobuf::rt::value_size(2, self.step, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.what {
            match v {
                &Event_oneof_what::file_version(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
                &Event_oneof_what::graph_def(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(4, &v);
                },
                &Event_oneof_what::summary(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Event_oneof_what::log_message(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Event_oneof_what::session_log(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Event_oneof_what::tagged_run_metadata(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Event_oneof_what::meta_graph_def(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(9, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.wall_time != 0. {
            os.write_double(1, self.wall_time)?;
        }
        if self.step != 0 {
            os.write_int64(2, self.step)?;
        }
        if let ::std::option::Option::Some(ref v) = self.what {
            match v {
                &Event_oneof_what::file_version(ref v) => {
                    os.write_string(3, v)?;
                },
                &Event_oneof_what::graph_def(ref v) => {
                    os.write_bytes(4, v)?;
                },
                &Event_oneof_what::summary(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Event_oneof_what::log_message(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Event_oneof_what::session_log(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Event_oneof_what::tagged_run_metadata(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Event_oneof_what::meta_graph_def(ref v) => {
                    os.write_bytes(9, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Event {
        Event::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "wall_time",
                |m: &Event| { &m.wall_time },
                |m: &mut Event| { &mut m.wall_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "step",
                |m: &Event| { &m.step },
                |m: &mut Event| { &mut m.step },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "file_version",
                Event::has_file_version,
                Event::get_file_version,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                "graph_def",
                Event::has_graph_def,
                Event::get_graph_def,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::summary::Summary>(
                "summary",
                Event::has_summary,
                Event::get_summary,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, LogMessage>(
                "log_message",
                Event::has_log_message,
                Event::get_log_message,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SessionLog>(
                "session_log",
                Event::has_session_log,
                Event::get_session_log,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, TaggedRunMetadata>(
                "tagged_run_metadata",
                Event::has_tagged_run_metadata,
                Event::get_tagged_run_metadata,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                "meta_graph_def",
                Event::has_meta_graph_def,
                Event::get_meta_graph_def,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Event>(
                "Event",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Event {
        static instance: ::protobuf::rt::LazyV2<Event> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Event::new)
    }
}

impl ::protobuf::Clear for Event {
    fn clear(&mut self) {
        self.wall_time = 0.;
        self.step = 0;
        self.what = ::std::option::Option::None;
        self.what = ::std::option::Option::None;
        self.what = ::std::option::Option::None;
        self.what = ::std::option::Option::None;
        self.what = ::std::option::Option::None;
        self.what = ::std::option::Option::None;
        self.what = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Event {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Event {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LogMessage {
    // message fields
    pub level: LogMessage_Level,
    pub message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogMessage {
    fn default() -> &'a LogMessage {
        <LogMessage as ::protobuf::Message>::default_instance()
    }
}

impl LogMessage {
    pub fn new() -> LogMessage {
        ::std::default::Default::default()
    }

    // .tensorflow.LogMessage.Level level = 1;


    pub fn get_level(&self) -> LogMessage_Level {
        self.level
    }
    pub fn clear_level(&mut self) {
        self.level = LogMessage_Level::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_level(&mut self, v: LogMessage_Level) {
        self.level = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }
}

impl ::protobuf::Message for LogMessage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.level, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.level != LogMessage_Level::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(1, self.level);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.level != LogMessage_Level::UNKNOWN {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.level))?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogMessage {
        LogMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<LogMessage_Level>>(
                "level",
                |m: &LogMessage| { &m.level },
                |m: &mut LogMessage| { &mut m.level },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &LogMessage| { &m.message },
                |m: &mut LogMessage| { &mut m.message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LogMessage>(
                "LogMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LogMessage {
        static instance: ::protobuf::rt::LazyV2<LogMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LogMessage::new)
    }
}

impl ::protobuf::Clear for LogMessage {
    fn clear(&mut self) {
        self.level = LogMessage_Level::UNKNOWN;
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum LogMessage_Level {
    UNKNOWN = 0,
    DEBUGGING = 10,
    INFO = 20,
    WARN = 30,
    ERROR = 40,
    FATAL = 50,
}

impl ::protobuf::ProtobufEnum for LogMessage_Level {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<LogMessage_Level> {
        match value {
            0 => ::std::option::Option::Some(LogMessage_Level::UNKNOWN),
            10 => ::std::option::Option::Some(LogMessage_Level::DEBUGGING),
            20 => ::std::option::Option::Some(LogMessage_Level::INFO),
            30 => ::std::option::Option::Some(LogMessage_Level::WARN),
            40 => ::std::option::Option::Some(LogMessage_Level::ERROR),
            50 => ::std::option::Option::Some(LogMessage_Level::FATAL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [LogMessage_Level] = &[
            LogMessage_Level::UNKNOWN,
            LogMessage_Level::DEBUGGING,
            LogMessage_Level::INFO,
            LogMessage_Level::WARN,
            LogMessage_Level::ERROR,
            LogMessage_Level::FATAL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<LogMessage_Level>("LogMessage.Level", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for LogMessage_Level {
}

impl ::std::default::Default for LogMessage_Level {
    fn default() -> Self {
        LogMessage_Level::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for LogMessage_Level {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SessionLog {
    // message fields
    pub status: SessionLog_SessionStatus,
    pub checkpoint_path: ::std::string::String,
    pub msg: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SessionLog {
    fn default() -> &'a SessionLog {
        <SessionLog as ::protobuf::Message>::default_instance()
    }
}

impl SessionLog {
    pub fn new() -> SessionLog {
        ::std::default::Default::default()
    }

    // .tensorflow.SessionLog.SessionStatus status = 1;


    pub fn get_status(&self) -> SessionLog_SessionStatus {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = SessionLog_SessionStatus::STATUS_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: SessionLog_SessionStatus) {
        self.status = v;
    }

    // string checkpoint_path = 2;


    pub fn get_checkpoint_path(&self) -> &str {
        &self.checkpoint_path
    }
    pub fn clear_checkpoint_path(&mut self) {
        self.checkpoint_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_checkpoint_path(&mut self, v: ::std::string::String) {
        self.checkpoint_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_checkpoint_path(&mut self) -> &mut ::std::string::String {
        &mut self.checkpoint_path
    }

    // Take field
    pub fn take_checkpoint_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.checkpoint_path, ::std::string::String::new())
    }

    // string msg = 3;


    pub fn get_msg(&self) -> &str {
        &self.msg
    }
    pub fn clear_msg(&mut self) {
        self.msg.clear();
    }

    // Param is passed by value, moved
    pub fn set_msg(&mut self, v: ::std::string::String) {
        self.msg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_msg(&mut self) -> &mut ::std::string::String {
        &mut self.msg
    }

    // Take field
    pub fn take_msg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.msg, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SessionLog {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.checkpoint_path)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.msg)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != SessionLog_SessionStatus::STATUS_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        if !self.checkpoint_path.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.checkpoint_path);
        }
        if !self.msg.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.msg);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != SessionLog_SessionStatus::STATUS_UNSPECIFIED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        if !self.checkpoint_path.is_empty() {
            os.write_string(2, &self.checkpoint_path)?;
        }
        if !self.msg.is_empty() {
            os.write_string(3, &self.msg)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SessionLog {
        SessionLog::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<SessionLog_SessionStatus>>(
                "status",
                |m: &SessionLog| { &m.status },
                |m: &mut SessionLog| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "checkpoint_path",
                |m: &SessionLog| { &m.checkpoint_path },
                |m: &mut SessionLog| { &mut m.checkpoint_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "msg",
                |m: &SessionLog| { &m.msg },
                |m: &mut SessionLog| { &mut m.msg },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SessionLog>(
                "SessionLog",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SessionLog {
        static instance: ::protobuf::rt::LazyV2<SessionLog> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SessionLog::new)
    }
}

impl ::protobuf::Clear for SessionLog {
    fn clear(&mut self) {
        self.status = SessionLog_SessionStatus::STATUS_UNSPECIFIED;
        self.checkpoint_path.clear();
        self.msg.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SessionLog {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SessionLog {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum SessionLog_SessionStatus {
    STATUS_UNSPECIFIED = 0,
    START = 1,
    STOP = 2,
    CHECKPOINT = 3,
}

impl ::protobuf::ProtobufEnum for SessionLog_SessionStatus {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SessionLog_SessionStatus> {
        match value {
            0 => ::std::option::Option::Some(SessionLog_SessionStatus::STATUS_UNSPECIFIED),
            1 => ::std::option::Option::Some(SessionLog_SessionStatus::START),
            2 => ::std::option::Option::Some(SessionLog_SessionStatus::STOP),
            3 => ::std::option::Option::Some(SessionLog_SessionStatus::CHECKPOINT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SessionLog_SessionStatus] = &[
            SessionLog_SessionStatus::STATUS_UNSPECIFIED,
            SessionLog_SessionStatus::START,
            SessionLog_SessionStatus::STOP,
            SessionLog_SessionStatus::CHECKPOINT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<SessionLog_SessionStatus>("SessionLog.SessionStatus", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for SessionLog_SessionStatus {
}

impl ::std::default::Default for SessionLog_SessionStatus {
    fn default() -> Self {
        SessionLog_SessionStatus::STATUS_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for SessionLog_SessionStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TaggedRunMetadata {
    // message fields
    pub tag: ::std::string::String,
    pub run_metadata: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TaggedRunMetadata {
    fn default() -> &'a TaggedRunMetadata {
        <TaggedRunMetadata as ::protobuf::Message>::default_instance()
    }
}

impl TaggedRunMetadata {
    pub fn new() -> TaggedRunMetadata {
        ::std::default::Default::default()
    }

    // string tag = 1;


    pub fn get_tag(&self) -> &str {
        &self.tag
    }
    pub fn clear_tag(&mut self) {
        self.tag.clear();
    }

    // Param is passed by value, moved
    pub fn set_tag(&mut self, v: ::std::string::String) {
        self.tag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tag(&mut self) -> &mut ::std::string::String {
        &mut self.tag
    }

    // Take field
    pub fn take_tag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tag, ::std::string::String::new())
    }

    // bytes run_metadata = 2;


    pub fn get_run_metadata(&self) -> &[u8] {
        &self.run_metadata
    }
    pub fn clear_run_metadata(&mut self) {
        self.run_metadata.clear();
    }

    // Param is passed by value, moved
    pub fn set_run_metadata(&mut self, v: ::std::vec::Vec<u8>) {
        self.run_metadata = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_run_metadata(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.run_metadata
    }

    // Take field
    pub fn take_run_metadata(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.run_metadata, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for TaggedRunMetadata {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tag)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.run_metadata)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.tag.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.tag);
        }
        if !self.run_metadata.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.run_metadata);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.tag.is_empty() {
            os.write_string(1, &self.tag)?;
        }
        if !self.run_metadata.is_empty() {
            os.write_bytes(2, &self.run_metadata)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TaggedRunMetadata {
        TaggedRunMetadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tag",
                |m: &TaggedRunMetadata| { &m.tag },
                |m: &mut TaggedRunMetadata| { &mut m.tag },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "run_metadata",
                |m: &TaggedRunMetadata| { &m.run_metadata },
                |m: &mut TaggedRunMetadata| { &mut m.run_metadata },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TaggedRunMetadata>(
                "TaggedRunMetadata",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TaggedRunMetadata {
        static instance: ::protobuf::rt::LazyV2<TaggedRunMetadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TaggedRunMetadata::new)
    }
}

impl ::protobuf::Clear for TaggedRunMetadata {
    fn clear(&mut self) {
        self.tag.clear();
        self.run_metadata.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TaggedRunMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TaggedRunMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WatchdogConfig {
    // message fields
    pub timeout_ms: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WatchdogConfig {
    fn default() -> &'a WatchdogConfig {
        <WatchdogConfig as ::protobuf::Message>::default_instance()
    }
}

impl WatchdogConfig {
    pub fn new() -> WatchdogConfig {
        ::std::default::Default::default()
    }

    // int64 timeout_ms = 1;


    pub fn get_timeout_ms(&self) -> i64 {
        self.timeout_ms
    }
    pub fn clear_timeout_ms(&mut self) {
        self.timeout_ms = 0;
    }

    // Param is passed by value, moved
    pub fn set_timeout_ms(&mut self, v: i64) {
        self.timeout_ms = v;
    }
}

impl ::protobuf::Message for WatchdogConfig {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timeout_ms = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.timeout_ms != 0 {
            my_size += ::protobuf::rt::value_size(1, self.timeout_ms, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.timeout_ms != 0 {
            os.write_int64(1, self.timeout_ms)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WatchdogConfig {
        WatchdogConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "timeout_ms",
                |m: &WatchdogConfig| { &m.timeout_ms },
                |m: &mut WatchdogConfig| { &mut m.timeout_ms },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WatchdogConfig>(
                "WatchdogConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WatchdogConfig {
        static instance: ::protobuf::rt::LazyV2<WatchdogConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WatchdogConfig::new)
    }
}

impl ::protobuf::Clear for WatchdogConfig {
    fn clear(&mut self) {
        self.timeout_ms = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WatchdogConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WatchdogConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WorkerHeartbeatRequest {
    // message fields
    pub shutdown_mode: WorkerShutdownMode,
    pub watchdog_config: ::protobuf::SingularPtrField<WatchdogConfig>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WorkerHeartbeatRequest {
    fn default() -> &'a WorkerHeartbeatRequest {
        <WorkerHeartbeatRequest as ::protobuf::Message>::default_instance()
    }
}

impl WorkerHeartbeatRequest {
    pub fn new() -> WorkerHeartbeatRequest {
        ::std::default::Default::default()
    }

    // .tensorflow.WorkerShutdownMode shutdown_mode = 1;


    pub fn get_shutdown_mode(&self) -> WorkerShutdownMode {
        self.shutdown_mode
    }
    pub fn clear_shutdown_mode(&mut self) {
        self.shutdown_mode = WorkerShutdownMode::DEFAULT;
    }

    // Param is passed by value, moved
    pub fn set_shutdown_mode(&mut self, v: WorkerShutdownMode) {
        self.shutdown_mode = v;
    }

    // .tensorflow.WatchdogConfig watchdog_config = 2;


    pub fn get_watchdog_config(&self) -> &WatchdogConfig {
        self.watchdog_config.as_ref().unwrap_or_else(|| <WatchdogConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_watchdog_config(&mut self) {
        self.watchdog_config.clear();
    }

    pub fn has_watchdog_config(&self) -> bool {
        self.watchdog_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_watchdog_config(&mut self, v: WatchdogConfig) {
        self.watchdog_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_watchdog_config(&mut self) -> &mut WatchdogConfig {
        if self.watchdog_config.is_none() {
            self.watchdog_config.set_default();
        }
        self.watchdog_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_watchdog_config(&mut self) -> WatchdogConfig {
        self.watchdog_config.take().unwrap_or_else(|| WatchdogConfig::new())
    }
}

impl ::protobuf::Message for WorkerHeartbeatRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.watchdog_config {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.shutdown_mode, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.watchdog_config)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.shutdown_mode != WorkerShutdownMode::DEFAULT {
            my_size += ::protobuf::rt::enum_size(1, self.shutdown_mode);
        }
        if let Some(ref v) = self.watchdog_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.shutdown_mode != WorkerShutdownMode::DEFAULT {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.shutdown_mode))?;
        }
        if let Some(ref v) = self.watchdog_config.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WorkerHeartbeatRequest {
        WorkerHeartbeatRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<WorkerShutdownMode>>(
                "shutdown_mode",
                |m: &WorkerHeartbeatRequest| { &m.shutdown_mode },
                |m: &mut WorkerHeartbeatRequest| { &mut m.shutdown_mode },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<WatchdogConfig>>(
                "watchdog_config",
                |m: &WorkerHeartbeatRequest| { &m.watchdog_config },
                |m: &mut WorkerHeartbeatRequest| { &mut m.watchdog_config },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WorkerHeartbeatRequest>(
                "WorkerHeartbeatRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WorkerHeartbeatRequest {
        static instance: ::protobuf::rt::LazyV2<WorkerHeartbeatRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WorkerHeartbeatRequest::new)
    }
}

impl ::protobuf::Clear for WorkerHeartbeatRequest {
    fn clear(&mut self) {
        self.shutdown_mode = WorkerShutdownMode::DEFAULT;
        self.watchdog_config.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WorkerHeartbeatRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WorkerHeartbeatRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WorkerHeartbeatResponse {
    // message fields
    pub health_status: WorkerHealth,
    pub worker_log: ::protobuf::RepeatedField<Event>,
    pub hostname: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WorkerHeartbeatResponse {
    fn default() -> &'a WorkerHeartbeatResponse {
        <WorkerHeartbeatResponse as ::protobuf::Message>::default_instance()
    }
}

impl WorkerHeartbeatResponse {
    pub fn new() -> WorkerHeartbeatResponse {
        ::std::default::Default::default()
    }

    // .tensorflow.WorkerHealth health_status = 1;


    pub fn get_health_status(&self) -> WorkerHealth {
        self.health_status
    }
    pub fn clear_health_status(&mut self) {
        self.health_status = WorkerHealth::OK;
    }

    // Param is passed by value, moved
    pub fn set_health_status(&mut self, v: WorkerHealth) {
        self.health_status = v;
    }

    // repeated .tensorflow.Event worker_log = 2;


    pub fn get_worker_log(&self) -> &[Event] {
        &self.worker_log
    }
    pub fn clear_worker_log(&mut self) {
        self.worker_log.clear();
    }

    // Param is passed by value, moved
    pub fn set_worker_log(&mut self, v: ::protobuf::RepeatedField<Event>) {
        self.worker_log = v;
    }

    // Mutable pointer to the field.
    pub fn mut_worker_log(&mut self) -> &mut ::protobuf::RepeatedField<Event> {
        &mut self.worker_log
    }

    // Take field
    pub fn take_worker_log(&mut self) -> ::protobuf::RepeatedField<Event> {
        ::std::mem::replace(&mut self.worker_log, ::protobuf::RepeatedField::new())
    }

    // string hostname = 3;


    pub fn get_hostname(&self) -> &str {
        &self.hostname
    }
    pub fn clear_hostname(&mut self) {
        self.hostname.clear();
    }

    // Param is passed by value, moved
    pub fn set_hostname(&mut self, v: ::std::string::String) {
        self.hostname = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hostname(&mut self) -> &mut ::std::string::String {
        &mut self.hostname
    }

    // Take field
    pub fn take_hostname(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hostname, ::std::string::String::new())
    }
}

impl ::protobuf::Message for WorkerHeartbeatResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.worker_log {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.health_status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.worker_log)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hostname)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.health_status != WorkerHealth::OK {
            my_size += ::protobuf::rt::enum_size(1, self.health_status);
        }
        for value in &self.worker_log {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.hostname.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.hostname);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.health_status != WorkerHealth::OK {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.health_status))?;
        }
        for v in &self.worker_log {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.hostname.is_empty() {
            os.write_string(3, &self.hostname)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WorkerHeartbeatResponse {
        WorkerHeartbeatResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<WorkerHealth>>(
                "health_status",
                |m: &WorkerHeartbeatResponse| { &m.health_status },
                |m: &mut WorkerHeartbeatResponse| { &mut m.health_status },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Event>>(
                "worker_log",
                |m: &WorkerHeartbeatResponse| { &m.worker_log },
                |m: &mut WorkerHeartbeatResponse| { &mut m.worker_log },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "hostname",
                |m: &WorkerHeartbeatResponse| { &m.hostname },
                |m: &mut WorkerHeartbeatResponse| { &mut m.hostname },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WorkerHeartbeatResponse>(
                "WorkerHeartbeatResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WorkerHeartbeatResponse {
        static instance: ::protobuf::rt::LazyV2<WorkerHeartbeatResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WorkerHeartbeatResponse::new)
    }
}

impl ::protobuf::Clear for WorkerHeartbeatResponse {
    fn clear(&mut self) {
        self.health_status = WorkerHealth::OK;
        self.worker_log.clear();
        self.hostname.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WorkerHeartbeatResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WorkerHeartbeatResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum WorkerHealth {
    OK = 0,
    RECEIVED_SHUTDOWN_SIGNAL = 1,
    INTERNAL_ERROR = 2,
    SHUTTING_DOWN = 3,
}

impl ::protobuf::ProtobufEnum for WorkerHealth {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<WorkerHealth> {
        match value {
            0 => ::std::option::Option::Some(WorkerHealth::OK),
            1 => ::std::option::Option::Some(WorkerHealth::RECEIVED_SHUTDOWN_SIGNAL),
            2 => ::std::option::Option::Some(WorkerHealth::INTERNAL_ERROR),
            3 => ::std::option::Option::Some(WorkerHealth::SHUTTING_DOWN),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [WorkerHealth] = &[
            WorkerHealth::OK,
            WorkerHealth::RECEIVED_SHUTDOWN_SIGNAL,
            WorkerHealth::INTERNAL_ERROR,
            WorkerHealth::SHUTTING_DOWN,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<WorkerHealth>("WorkerHealth", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for WorkerHealth {
}

impl ::std::default::Default for WorkerHealth {
    fn default() -> Self {
        WorkerHealth::OK
    }
}

impl ::protobuf::reflect::ProtobufValue for WorkerHealth {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum WorkerShutdownMode {
    DEFAULT = 0,
    NOT_CONFIGURED = 1,
    WAIT_FOR_COORDINATOR = 2,
    SHUTDOWN_AFTER_TIMEOUT = 3,
}

impl ::protobuf::ProtobufEnum for WorkerShutdownMode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<WorkerShutdownMode> {
        match value {
            0 => ::std::option::Option::Some(WorkerShutdownMode::DEFAULT),
            1 => ::std::option::Option::Some(WorkerShutdownMode::NOT_CONFIGURED),
            2 => ::std::option::Option::Some(WorkerShutdownMode::WAIT_FOR_COORDINATOR),
            3 => ::std::option::Option::Some(WorkerShutdownMode::SHUTDOWN_AFTER_TIMEOUT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [WorkerShutdownMode] = &[
            WorkerShutdownMode::DEFAULT,
            WorkerShutdownMode::NOT_CONFIGURED,
            WorkerShutdownMode::WAIT_FOR_COORDINATOR,
            WorkerShutdownMode::SHUTDOWN_AFTER_TIMEOUT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<WorkerShutdownMode>("WorkerShutdownMode", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for WorkerShutdownMode {
}

impl ::std::default::Default for WorkerShutdownMode {
    fn default() -> Self {
        WorkerShutdownMode::DEFAULT
    }
}

impl ::protobuf::reflect::ProtobufValue for WorkerShutdownMode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20tensorflow/core/util/event.proto\x12\ntensorflow\x1a'tensorflow/co\
    re/framework/summary.proto\"\xa4\x03\n\x05Event\x12\x1b\n\twall_time\x18\
    \x01\x20\x01(\x01R\x08wallTime\x12\x12\n\x04step\x18\x02\x20\x01(\x03R\
    \x04step\x12#\n\x0cfile_version\x18\x03\x20\x01(\tH\0R\x0bfileVersion\
    \x12\x1d\n\tgraph_def\x18\x04\x20\x01(\x0cH\0R\x08graphDef\x12/\n\x07sum\
    mary\x18\x05\x20\x01(\x0b2\x13.tensorflow.SummaryH\0R\x07summary\x129\n\
    \x0blog_message\x18\x06\x20\x01(\x0b2\x16.tensorflow.LogMessageH\0R\nlog\
    Message\x129\n\x0bsession_log\x18\x07\x20\x01(\x0b2\x16.tensorflow.Sessi\
    onLogH\0R\nsessionLog\x12O\n\x13tagged_run_metadata\x18\x08\x20\x01(\x0b\
    2\x1d.tensorflow.TaggedRunMetadataH\0R\x11taggedRunMetadata\x12&\n\x0eme\
    ta_graph_def\x18\t\x20\x01(\x0cH\0R\x0cmetaGraphDefB\x06\n\x04what\"\xa9\
    \x01\n\nLogMessage\x122\n\x05level\x18\x01\x20\x01(\x0e2\x1c.tensorflow.\
    LogMessage.LevelR\x05level\x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07m\
    essage\"M\n\x05Level\x12\x0b\n\x07UNKNOWN\x10\0\x12\r\n\tDEBUGGING\x10\n\
    \x12\x08\n\x04INFO\x10\x14\x12\x08\n\x04WARN\x10\x1e\x12\t\n\x05ERROR\
    \x10(\x12\t\n\x05FATAL\x102\"\xd3\x01\n\nSessionLog\x12<\n\x06status\x18\
    \x01\x20\x01(\x0e2$.tensorflow.SessionLog.SessionStatusR\x06status\x12'\
    \n\x0fcheckpoint_path\x18\x02\x20\x01(\tR\x0echeckpointPath\x12\x10\n\
    \x03msg\x18\x03\x20\x01(\tR\x03msg\"L\n\rSessionStatus\x12\x16\n\x12STAT\
    US_UNSPECIFIED\x10\0\x12\t\n\x05START\x10\x01\x12\x08\n\x04STOP\x10\x02\
    \x12\x0e\n\nCHECKPOINT\x10\x03\"H\n\x11TaggedRunMetadata\x12\x10\n\x03ta\
    g\x18\x01\x20\x01(\tR\x03tag\x12!\n\x0crun_metadata\x18\x02\x20\x01(\x0c\
    R\x0brunMetadata\"/\n\x0eWatchdogConfig\x12\x1d\n\ntimeout_ms\x18\x01\
    \x20\x01(\x03R\ttimeoutMs\"\xa2\x01\n\x16WorkerHeartbeatRequest\x12C\n\r\
    shutdown_mode\x18\x01\x20\x01(\x0e2\x1e.tensorflow.WorkerShutdownModeR\
    \x0cshutdownMode\x12C\n\x0fwatchdog_config\x18\x02\x20\x01(\x0b2\x1a.ten\
    sorflow.WatchdogConfigR\x0ewatchdogConfig\"\xa6\x01\n\x17WorkerHeartbeat\
    Response\x12=\n\rhealth_status\x18\x01\x20\x01(\x0e2\x18.tensorflow.Work\
    erHealthR\x0chealthStatus\x120\n\nworker_log\x18\x02\x20\x03(\x0b2\x11.t\
    ensorflow.EventR\tworkerLog\x12\x1a\n\x08hostname\x18\x03\x20\x01(\tR\
    \x08hostname*[\n\x0cWorkerHealth\x12\x06\n\x02OK\x10\0\x12\x1c\n\x18RECE\
    IVED_SHUTDOWN_SIGNAL\x10\x01\x12\x12\n\x0eINTERNAL_ERROR\x10\x02\x12\x11\
    \n\rSHUTTING_DOWN\x10\x03*k\n\x12WorkerShutdownMode\x12\x0b\n\x07DEFAULT\
    \x10\0\x12\x12\n\x0eNOT_CONFIGURED\x10\x01\x12\x18\n\x14WAIT_FOR_COORDIN\
    ATOR\x10\x02\x12\x1a\n\x16SHUTDOWN_AFTER_TIMEOUT\x10\x03B'\n\x13org.tens\
    orflow.utilB\x0bEventProtosP\x01\xf8\x01\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
