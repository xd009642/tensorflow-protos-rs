// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow/core/profiler/tfprof_options.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct OptionsProto {
    // message fields
    pub max_depth: i64,
    pub min_bytes: i64,
    pub min_peak_bytes: i64,
    pub min_residual_bytes: i64,
    pub min_output_bytes: i64,
    pub min_micros: i64,
    pub min_accelerator_micros: i64,
    pub min_cpu_micros: i64,
    pub min_params: i64,
    pub min_float_ops: i64,
    pub min_occurrence: i64,
    pub step: i64,
    pub order_by: ::std::string::String,
    pub account_type_regexes: ::protobuf::RepeatedField<::std::string::String>,
    pub start_name_regexes: ::protobuf::RepeatedField<::std::string::String>,
    pub trim_name_regexes: ::protobuf::RepeatedField<::std::string::String>,
    pub show_name_regexes: ::protobuf::RepeatedField<::std::string::String>,
    pub hide_name_regexes: ::protobuf::RepeatedField<::std::string::String>,
    pub account_displayed_op_only: bool,
    pub select: ::protobuf::RepeatedField<::std::string::String>,
    pub output: ::std::string::String,
    pub dump_to_file: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OptionsProto {
    fn default() -> &'a OptionsProto {
        <OptionsProto as ::protobuf::Message>::default_instance()
    }
}

impl OptionsProto {
    pub fn new() -> OptionsProto {
        ::std::default::Default::default()
    }

    // int64 max_depth = 1;


    pub fn get_max_depth(&self) -> i64 {
        self.max_depth
    }
    pub fn clear_max_depth(&mut self) {
        self.max_depth = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_depth(&mut self, v: i64) {
        self.max_depth = v;
    }

    // int64 min_bytes = 2;


    pub fn get_min_bytes(&self) -> i64 {
        self.min_bytes
    }
    pub fn clear_min_bytes(&mut self) {
        self.min_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_min_bytes(&mut self, v: i64) {
        self.min_bytes = v;
    }

    // int64 min_peak_bytes = 19;


    pub fn get_min_peak_bytes(&self) -> i64 {
        self.min_peak_bytes
    }
    pub fn clear_min_peak_bytes(&mut self) {
        self.min_peak_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_min_peak_bytes(&mut self, v: i64) {
        self.min_peak_bytes = v;
    }

    // int64 min_residual_bytes = 20;


    pub fn get_min_residual_bytes(&self) -> i64 {
        self.min_residual_bytes
    }
    pub fn clear_min_residual_bytes(&mut self) {
        self.min_residual_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_min_residual_bytes(&mut self, v: i64) {
        self.min_residual_bytes = v;
    }

    // int64 min_output_bytes = 21;


    pub fn get_min_output_bytes(&self) -> i64 {
        self.min_output_bytes
    }
    pub fn clear_min_output_bytes(&mut self) {
        self.min_output_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_min_output_bytes(&mut self, v: i64) {
        self.min_output_bytes = v;
    }

    // int64 min_micros = 3;


    pub fn get_min_micros(&self) -> i64 {
        self.min_micros
    }
    pub fn clear_min_micros(&mut self) {
        self.min_micros = 0;
    }

    // Param is passed by value, moved
    pub fn set_min_micros(&mut self, v: i64) {
        self.min_micros = v;
    }

    // int64 min_accelerator_micros = 22;


    pub fn get_min_accelerator_micros(&self) -> i64 {
        self.min_accelerator_micros
    }
    pub fn clear_min_accelerator_micros(&mut self) {
        self.min_accelerator_micros = 0;
    }

    // Param is passed by value, moved
    pub fn set_min_accelerator_micros(&mut self, v: i64) {
        self.min_accelerator_micros = v;
    }

    // int64 min_cpu_micros = 23;


    pub fn get_min_cpu_micros(&self) -> i64 {
        self.min_cpu_micros
    }
    pub fn clear_min_cpu_micros(&mut self) {
        self.min_cpu_micros = 0;
    }

    // Param is passed by value, moved
    pub fn set_min_cpu_micros(&mut self, v: i64) {
        self.min_cpu_micros = v;
    }

    // int64 min_params = 4;


    pub fn get_min_params(&self) -> i64 {
        self.min_params
    }
    pub fn clear_min_params(&mut self) {
        self.min_params = 0;
    }

    // Param is passed by value, moved
    pub fn set_min_params(&mut self, v: i64) {
        self.min_params = v;
    }

    // int64 min_float_ops = 5;


    pub fn get_min_float_ops(&self) -> i64 {
        self.min_float_ops
    }
    pub fn clear_min_float_ops(&mut self) {
        self.min_float_ops = 0;
    }

    // Param is passed by value, moved
    pub fn set_min_float_ops(&mut self, v: i64) {
        self.min_float_ops = v;
    }

    // int64 min_occurrence = 17;


    pub fn get_min_occurrence(&self) -> i64 {
        self.min_occurrence
    }
    pub fn clear_min_occurrence(&mut self) {
        self.min_occurrence = 0;
    }

    // Param is passed by value, moved
    pub fn set_min_occurrence(&mut self, v: i64) {
        self.min_occurrence = v;
    }

    // int64 step = 18;


    pub fn get_step(&self) -> i64 {
        self.step
    }
    pub fn clear_step(&mut self) {
        self.step = 0;
    }

    // Param is passed by value, moved
    pub fn set_step(&mut self, v: i64) {
        self.step = v;
    }

    // string order_by = 7;


    pub fn get_order_by(&self) -> &str {
        &self.order_by
    }
    pub fn clear_order_by(&mut self) {
        self.order_by.clear();
    }

    // Param is passed by value, moved
    pub fn set_order_by(&mut self, v: ::std::string::String) {
        self.order_by = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_order_by(&mut self) -> &mut ::std::string::String {
        &mut self.order_by
    }

    // Take field
    pub fn take_order_by(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.order_by, ::std::string::String::new())
    }

    // repeated string account_type_regexes = 8;


    pub fn get_account_type_regexes(&self) -> &[::std::string::String] {
        &self.account_type_regexes
    }
    pub fn clear_account_type_regexes(&mut self) {
        self.account_type_regexes.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_type_regexes(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.account_type_regexes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_account_type_regexes(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.account_type_regexes
    }

    // Take field
    pub fn take_account_type_regexes(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.account_type_regexes, ::protobuf::RepeatedField::new())
    }

    // repeated string start_name_regexes = 9;


    pub fn get_start_name_regexes(&self) -> &[::std::string::String] {
        &self.start_name_regexes
    }
    pub fn clear_start_name_regexes(&mut self) {
        self.start_name_regexes.clear();
    }

    // Param is passed by value, moved
    pub fn set_start_name_regexes(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.start_name_regexes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_start_name_regexes(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.start_name_regexes
    }

    // Take field
    pub fn take_start_name_regexes(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.start_name_regexes, ::protobuf::RepeatedField::new())
    }

    // repeated string trim_name_regexes = 10;


    pub fn get_trim_name_regexes(&self) -> &[::std::string::String] {
        &self.trim_name_regexes
    }
    pub fn clear_trim_name_regexes(&mut self) {
        self.trim_name_regexes.clear();
    }

    // Param is passed by value, moved
    pub fn set_trim_name_regexes(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.trim_name_regexes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_trim_name_regexes(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.trim_name_regexes
    }

    // Take field
    pub fn take_trim_name_regexes(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.trim_name_regexes, ::protobuf::RepeatedField::new())
    }

    // repeated string show_name_regexes = 11;


    pub fn get_show_name_regexes(&self) -> &[::std::string::String] {
        &self.show_name_regexes
    }
    pub fn clear_show_name_regexes(&mut self) {
        self.show_name_regexes.clear();
    }

    // Param is passed by value, moved
    pub fn set_show_name_regexes(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.show_name_regexes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_show_name_regexes(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.show_name_regexes
    }

    // Take field
    pub fn take_show_name_regexes(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.show_name_regexes, ::protobuf::RepeatedField::new())
    }

    // repeated string hide_name_regexes = 12;


    pub fn get_hide_name_regexes(&self) -> &[::std::string::String] {
        &self.hide_name_regexes
    }
    pub fn clear_hide_name_regexes(&mut self) {
        self.hide_name_regexes.clear();
    }

    // Param is passed by value, moved
    pub fn set_hide_name_regexes(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.hide_name_regexes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_hide_name_regexes(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.hide_name_regexes
    }

    // Take field
    pub fn take_hide_name_regexes(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.hide_name_regexes, ::protobuf::RepeatedField::new())
    }

    // bool account_displayed_op_only = 13;


    pub fn get_account_displayed_op_only(&self) -> bool {
        self.account_displayed_op_only
    }
    pub fn clear_account_displayed_op_only(&mut self) {
        self.account_displayed_op_only = false;
    }

    // Param is passed by value, moved
    pub fn set_account_displayed_op_only(&mut self, v: bool) {
        self.account_displayed_op_only = v;
    }

    // repeated string select = 14;


    pub fn get_select(&self) -> &[::std::string::String] {
        &self.select
    }
    pub fn clear_select(&mut self) {
        self.select.clear();
    }

    // Param is passed by value, moved
    pub fn set_select(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.select = v;
    }

    // Mutable pointer to the field.
    pub fn mut_select(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.select
    }

    // Take field
    pub fn take_select(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.select, ::protobuf::RepeatedField::new())
    }

    // string output = 15;


    pub fn get_output(&self) -> &str {
        &self.output
    }
    pub fn clear_output(&mut self) {
        self.output.clear();
    }

    // Param is passed by value, moved
    pub fn set_output(&mut self, v: ::std::string::String) {
        self.output = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_output(&mut self) -> &mut ::std::string::String {
        &mut self.output
    }

    // Take field
    pub fn take_output(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.output, ::std::string::String::new())
    }

    // string dump_to_file = 16;


    pub fn get_dump_to_file(&self) -> &str {
        &self.dump_to_file
    }
    pub fn clear_dump_to_file(&mut self) {
        self.dump_to_file.clear();
    }

    // Param is passed by value, moved
    pub fn set_dump_to_file(&mut self, v: ::std::string::String) {
        self.dump_to_file = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dump_to_file(&mut self) -> &mut ::std::string::String {
        &mut self.dump_to_file
    }

    // Take field
    pub fn take_dump_to_file(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dump_to_file, ::std::string::String::new())
    }
}

impl ::protobuf::Message for OptionsProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.max_depth = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.min_bytes = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.min_peak_bytes = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.min_residual_bytes = tmp;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.min_output_bytes = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.min_micros = tmp;
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.min_accelerator_micros = tmp;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.min_cpu_micros = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.min_params = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.min_float_ops = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.min_occurrence = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.step = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.order_by)?;
                },
                8 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.account_type_regexes)?;
                },
                9 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.start_name_regexes)?;
                },
                10 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.trim_name_regexes)?;
                },
                11 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.show_name_regexes)?;
                },
                12 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.hide_name_regexes)?;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.account_displayed_op_only = tmp;
                },
                14 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.select)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.output)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dump_to_file)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.max_depth != 0 {
            my_size += ::protobuf::rt::value_size(1, self.max_depth, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.min_bytes != 0 {
            my_size += ::protobuf::rt::value_size(2, self.min_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.min_peak_bytes != 0 {
            my_size += ::protobuf::rt::value_size(19, self.min_peak_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.min_residual_bytes != 0 {
            my_size += ::protobuf::rt::value_size(20, self.min_residual_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.min_output_bytes != 0 {
            my_size += ::protobuf::rt::value_size(21, self.min_output_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.min_micros != 0 {
            my_size += ::protobuf::rt::value_size(3, self.min_micros, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.min_accelerator_micros != 0 {
            my_size += ::protobuf::rt::value_size(22, self.min_accelerator_micros, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.min_cpu_micros != 0 {
            my_size += ::protobuf::rt::value_size(23, self.min_cpu_micros, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.min_params != 0 {
            my_size += ::protobuf::rt::value_size(4, self.min_params, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.min_float_ops != 0 {
            my_size += ::protobuf::rt::value_size(5, self.min_float_ops, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.min_occurrence != 0 {
            my_size += ::protobuf::rt::value_size(17, self.min_occurrence, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.step != 0 {
            my_size += ::protobuf::rt::value_size(18, self.step, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.order_by.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.order_by);
        }
        for value in &self.account_type_regexes {
            my_size += ::protobuf::rt::string_size(8, &value);
        };
        for value in &self.start_name_regexes {
            my_size += ::protobuf::rt::string_size(9, &value);
        };
        for value in &self.trim_name_regexes {
            my_size += ::protobuf::rt::string_size(10, &value);
        };
        for value in &self.show_name_regexes {
            my_size += ::protobuf::rt::string_size(11, &value);
        };
        for value in &self.hide_name_regexes {
            my_size += ::protobuf::rt::string_size(12, &value);
        };
        if self.account_displayed_op_only != false {
            my_size += 2;
        }
        for value in &self.select {
            my_size += ::protobuf::rt::string_size(14, &value);
        };
        if !self.output.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.output);
        }
        if !self.dump_to_file.is_empty() {
            my_size += ::protobuf::rt::string_size(16, &self.dump_to_file);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.max_depth != 0 {
            os.write_int64(1, self.max_depth)?;
        }
        if self.min_bytes != 0 {
            os.write_int64(2, self.min_bytes)?;
        }
        if self.min_peak_bytes != 0 {
            os.write_int64(19, self.min_peak_bytes)?;
        }
        if self.min_residual_bytes != 0 {
            os.write_int64(20, self.min_residual_bytes)?;
        }
        if self.min_output_bytes != 0 {
            os.write_int64(21, self.min_output_bytes)?;
        }
        if self.min_micros != 0 {
            os.write_int64(3, self.min_micros)?;
        }
        if self.min_accelerator_micros != 0 {
            os.write_int64(22, self.min_accelerator_micros)?;
        }
        if self.min_cpu_micros != 0 {
            os.write_int64(23, self.min_cpu_micros)?;
        }
        if self.min_params != 0 {
            os.write_int64(4, self.min_params)?;
        }
        if self.min_float_ops != 0 {
            os.write_int64(5, self.min_float_ops)?;
        }
        if self.min_occurrence != 0 {
            os.write_int64(17, self.min_occurrence)?;
        }
        if self.step != 0 {
            os.write_int64(18, self.step)?;
        }
        if !self.order_by.is_empty() {
            os.write_string(7, &self.order_by)?;
        }
        for v in &self.account_type_regexes {
            os.write_string(8, &v)?;
        };
        for v in &self.start_name_regexes {
            os.write_string(9, &v)?;
        };
        for v in &self.trim_name_regexes {
            os.write_string(10, &v)?;
        };
        for v in &self.show_name_regexes {
            os.write_string(11, &v)?;
        };
        for v in &self.hide_name_regexes {
            os.write_string(12, &v)?;
        };
        if self.account_displayed_op_only != false {
            os.write_bool(13, self.account_displayed_op_only)?;
        }
        for v in &self.select {
            os.write_string(14, &v)?;
        };
        if !self.output.is_empty() {
            os.write_string(15, &self.output)?;
        }
        if !self.dump_to_file.is_empty() {
            os.write_string(16, &self.dump_to_file)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OptionsProto {
        OptionsProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "max_depth",
                |m: &OptionsProto| { &m.max_depth },
                |m: &mut OptionsProto| { &mut m.max_depth },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "min_bytes",
                |m: &OptionsProto| { &m.min_bytes },
                |m: &mut OptionsProto| { &mut m.min_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "min_peak_bytes",
                |m: &OptionsProto| { &m.min_peak_bytes },
                |m: &mut OptionsProto| { &mut m.min_peak_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "min_residual_bytes",
                |m: &OptionsProto| { &m.min_residual_bytes },
                |m: &mut OptionsProto| { &mut m.min_residual_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "min_output_bytes",
                |m: &OptionsProto| { &m.min_output_bytes },
                |m: &mut OptionsProto| { &mut m.min_output_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "min_micros",
                |m: &OptionsProto| { &m.min_micros },
                |m: &mut OptionsProto| { &mut m.min_micros },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "min_accelerator_micros",
                |m: &OptionsProto| { &m.min_accelerator_micros },
                |m: &mut OptionsProto| { &mut m.min_accelerator_micros },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "min_cpu_micros",
                |m: &OptionsProto| { &m.min_cpu_micros },
                |m: &mut OptionsProto| { &mut m.min_cpu_micros },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "min_params",
                |m: &OptionsProto| { &m.min_params },
                |m: &mut OptionsProto| { &mut m.min_params },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "min_float_ops",
                |m: &OptionsProto| { &m.min_float_ops },
                |m: &mut OptionsProto| { &mut m.min_float_ops },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "min_occurrence",
                |m: &OptionsProto| { &m.min_occurrence },
                |m: &mut OptionsProto| { &mut m.min_occurrence },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "step",
                |m: &OptionsProto| { &m.step },
                |m: &mut OptionsProto| { &mut m.step },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "order_by",
                |m: &OptionsProto| { &m.order_by },
                |m: &mut OptionsProto| { &mut m.order_by },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "account_type_regexes",
                |m: &OptionsProto| { &m.account_type_regexes },
                |m: &mut OptionsProto| { &mut m.account_type_regexes },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "start_name_regexes",
                |m: &OptionsProto| { &m.start_name_regexes },
                |m: &mut OptionsProto| { &mut m.start_name_regexes },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "trim_name_regexes",
                |m: &OptionsProto| { &m.trim_name_regexes },
                |m: &mut OptionsProto| { &mut m.trim_name_regexes },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "show_name_regexes",
                |m: &OptionsProto| { &m.show_name_regexes },
                |m: &mut OptionsProto| { &mut m.show_name_regexes },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "hide_name_regexes",
                |m: &OptionsProto| { &m.hide_name_regexes },
                |m: &mut OptionsProto| { &mut m.hide_name_regexes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "account_displayed_op_only",
                |m: &OptionsProto| { &m.account_displayed_op_only },
                |m: &mut OptionsProto| { &mut m.account_displayed_op_only },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "select",
                |m: &OptionsProto| { &m.select },
                |m: &mut OptionsProto| { &mut m.select },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "output",
                |m: &OptionsProto| { &m.output },
                |m: &mut OptionsProto| { &mut m.output },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "dump_to_file",
                |m: &OptionsProto| { &m.dump_to_file },
                |m: &mut OptionsProto| { &mut m.dump_to_file },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OptionsProto>(
                "OptionsProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OptionsProto {
        static instance: ::protobuf::rt::LazyV2<OptionsProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OptionsProto::new)
    }
}

impl ::protobuf::Clear for OptionsProto {
    fn clear(&mut self) {
        self.max_depth = 0;
        self.min_bytes = 0;
        self.min_peak_bytes = 0;
        self.min_residual_bytes = 0;
        self.min_output_bytes = 0;
        self.min_micros = 0;
        self.min_accelerator_micros = 0;
        self.min_cpu_micros = 0;
        self.min_params = 0;
        self.min_float_ops = 0;
        self.min_occurrence = 0;
        self.step = 0;
        self.order_by.clear();
        self.account_type_regexes.clear();
        self.start_name_regexes.clear();
        self.trim_name_regexes.clear();
        self.show_name_regexes.clear();
        self.hide_name_regexes.clear();
        self.account_displayed_op_only = false;
        self.select.clear();
        self.output.clear();
        self.dump_to_file.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OptionsProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OptionsProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AdvisorOptionsProto {
    // message fields
    pub checkers: ::std::collections::HashMap<::std::string::String, AdvisorOptionsProto_CheckerOption>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AdvisorOptionsProto {
    fn default() -> &'a AdvisorOptionsProto {
        <AdvisorOptionsProto as ::protobuf::Message>::default_instance()
    }
}

impl AdvisorOptionsProto {
    pub fn new() -> AdvisorOptionsProto {
        ::std::default::Default::default()
    }

    // repeated .tensorflow.tfprof.AdvisorOptionsProto.CheckersEntry checkers = 1;


    pub fn get_checkers(&self) -> &::std::collections::HashMap<::std::string::String, AdvisorOptionsProto_CheckerOption> {
        &self.checkers
    }
    pub fn clear_checkers(&mut self) {
        self.checkers.clear();
    }

    // Param is passed by value, moved
    pub fn set_checkers(&mut self, v: ::std::collections::HashMap<::std::string::String, AdvisorOptionsProto_CheckerOption>) {
        self.checkers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_checkers(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, AdvisorOptionsProto_CheckerOption> {
        &mut self.checkers
    }

    // Take field
    pub fn take_checkers(&mut self) -> ::std::collections::HashMap<::std::string::String, AdvisorOptionsProto_CheckerOption> {
        ::std::mem::replace(&mut self.checkers, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for AdvisorOptionsProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<AdvisorOptionsProto_CheckerOption>>(wire_type, is, &mut self.checkers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<AdvisorOptionsProto_CheckerOption>>(1, &self.checkers);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<AdvisorOptionsProto_CheckerOption>>(1, &self.checkers, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AdvisorOptionsProto {
        AdvisorOptionsProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<AdvisorOptionsProto_CheckerOption>>(
                "checkers",
                |m: &AdvisorOptionsProto| { &m.checkers },
                |m: &mut AdvisorOptionsProto| { &mut m.checkers },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AdvisorOptionsProto>(
                "AdvisorOptionsProto",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AdvisorOptionsProto {
        static instance: ::protobuf::rt::LazyV2<AdvisorOptionsProto> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AdvisorOptionsProto::new)
    }
}

impl ::protobuf::Clear for AdvisorOptionsProto {
    fn clear(&mut self) {
        self.checkers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AdvisorOptionsProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AdvisorOptionsProto {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AdvisorOptionsProto_CheckerOption {
    // message fields
    pub options: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AdvisorOptionsProto_CheckerOption {
    fn default() -> &'a AdvisorOptionsProto_CheckerOption {
        <AdvisorOptionsProto_CheckerOption as ::protobuf::Message>::default_instance()
    }
}

impl AdvisorOptionsProto_CheckerOption {
    pub fn new() -> AdvisorOptionsProto_CheckerOption {
        ::std::default::Default::default()
    }

    // repeated .tensorflow.tfprof.AdvisorOptionsProto.CheckerOption.OptionsEntry options = 1;


    pub fn get_options(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.options
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.options = v;
    }

    // Mutable pointer to the field.
    pub fn mut_options(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.options
    }

    // Take field
    pub fn take_options(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.options, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for AdvisorOptionsProto_CheckerOption {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(1, &self.options);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(1, &self.options, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AdvisorOptionsProto_CheckerOption {
        AdvisorOptionsProto_CheckerOption::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "options",
                |m: &AdvisorOptionsProto_CheckerOption| { &m.options },
                |m: &mut AdvisorOptionsProto_CheckerOption| { &mut m.options },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AdvisorOptionsProto_CheckerOption>(
                "AdvisorOptionsProto.CheckerOption",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AdvisorOptionsProto_CheckerOption {
        static instance: ::protobuf::rt::LazyV2<AdvisorOptionsProto_CheckerOption> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AdvisorOptionsProto_CheckerOption::new)
    }
}

impl ::protobuf::Clear for AdvisorOptionsProto_CheckerOption {
    fn clear(&mut self) {
        self.options.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AdvisorOptionsProto_CheckerOption {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AdvisorOptionsProto_CheckerOption {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n-tensorflow/core/profiler/tfprof_options.proto\x12\x11tensorflow.tfpro\
    f\"\xcb\x06\n\x0cOptionsProto\x12\x1b\n\tmax_depth\x18\x01\x20\x01(\x03R\
    \x08maxDepth\x12\x1b\n\tmin_bytes\x18\x02\x20\x01(\x03R\x08minBytes\x12$\
    \n\x0emin_peak_bytes\x18\x13\x20\x01(\x03R\x0cminPeakBytes\x12,\n\x12min\
    _residual_bytes\x18\x14\x20\x01(\x03R\x10minResidualBytes\x12(\n\x10min_\
    output_bytes\x18\x15\x20\x01(\x03R\x0eminOutputBytes\x12\x1d\n\nmin_micr\
    os\x18\x03\x20\x01(\x03R\tminMicros\x124\n\x16min_accelerator_micros\x18\
    \x16\x20\x01(\x03R\x14minAcceleratorMicros\x12$\n\x0emin_cpu_micros\x18\
    \x17\x20\x01(\x03R\x0cminCpuMicros\x12\x1d\n\nmin_params\x18\x04\x20\x01\
    (\x03R\tminParams\x12\"\n\rmin_float_ops\x18\x05\x20\x01(\x03R\x0bminFlo\
    atOps\x12%\n\x0emin_occurrence\x18\x11\x20\x01(\x03R\rminOccurrence\x12\
    \x12\n\x04step\x18\x12\x20\x01(\x03R\x04step\x12\x19\n\x08order_by\x18\
    \x07\x20\x01(\tR\x07orderBy\x120\n\x14account_type_regexes\x18\x08\x20\
    \x03(\tR\x12accountTypeRegexes\x12,\n\x12start_name_regexes\x18\t\x20\
    \x03(\tR\x10startNameRegexes\x12*\n\x11trim_name_regexes\x18\n\x20\x03(\
    \tR\x0ftrimNameRegexes\x12*\n\x11show_name_regexes\x18\x0b\x20\x03(\tR\
    \x0fshowNameRegexes\x12*\n\x11hide_name_regexes\x18\x0c\x20\x03(\tR\x0fh\
    ideNameRegexes\x129\n\x19account_displayed_op_only\x18\r\x20\x01(\x08R\
    \x16accountDisplayedOpOnly\x12\x16\n\x06select\x18\x0e\x20\x03(\tR\x06se\
    lect\x12\x16\n\x06output\x18\x0f\x20\x01(\tR\x06output\x12\x20\n\x0cdump\
    _to_file\x18\x10\x20\x01(\tR\ndumpToFile\"\x85\x03\n\x13AdvisorOptionsPr\
    oto\x12P\n\x08checkers\x18\x01\x20\x03(\x0b24.tensorflow.tfprof.AdvisorO\
    ptionsProto.CheckersEntryR\x08checkers\x1aq\n\rCheckersEntry\x12\x10\n\
    \x03key\x18\x01\x20\x01(\tR\x03key\x12J\n\x05value\x18\x02\x20\x01(\x0b2\
    4.tensorflow.tfprof.AdvisorOptionsProto.CheckerOptionR\x05value:\x028\
    \x01\x1a\xa8\x01\n\rCheckerOption\x12[\n\x07options\x18\x01\x20\x03(\x0b\
    2A.tensorflow.tfprof.AdvisorOptionsProto.CheckerOption.OptionsEntryR\x07\
    options\x1a:\n\x0cOptionsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03k\
    ey\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
