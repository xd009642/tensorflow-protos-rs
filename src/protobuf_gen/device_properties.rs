// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow/core/protobuf/device_properties.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct DeviceProperties {
    // message fields
    pub field_type: ::std::string::String,
    pub vendor: ::std::string::String,
    pub model: ::std::string::String,
    pub frequency: i64,
    pub num_cores: i64,
    pub environment: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub num_registers: i64,
    pub l1_cache_size: i64,
    pub l2_cache_size: i64,
    pub l3_cache_size: i64,
    pub shared_memory_size_per_multiprocessor: i64,
    pub memory_size: i64,
    pub bandwidth: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeviceProperties {
    fn default() -> &'a DeviceProperties {
        <DeviceProperties as ::protobuf::Message>::default_instance()
    }
}

impl DeviceProperties {
    pub fn new() -> DeviceProperties {
        ::std::default::Default::default()
    }

    // string type = 1;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // string vendor = 2;


    pub fn get_vendor(&self) -> &str {
        &self.vendor
    }
    pub fn clear_vendor(&mut self) {
        self.vendor.clear();
    }

    // Param is passed by value, moved
    pub fn set_vendor(&mut self, v: ::std::string::String) {
        self.vendor = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vendor(&mut self) -> &mut ::std::string::String {
        &mut self.vendor
    }

    // Take field
    pub fn take_vendor(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.vendor, ::std::string::String::new())
    }

    // string model = 3;


    pub fn get_model(&self) -> &str {
        &self.model
    }
    pub fn clear_model(&mut self) {
        self.model.clear();
    }

    // Param is passed by value, moved
    pub fn set_model(&mut self, v: ::std::string::String) {
        self.model = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_model(&mut self) -> &mut ::std::string::String {
        &mut self.model
    }

    // Take field
    pub fn take_model(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.model, ::std::string::String::new())
    }

    // int64 frequency = 4;


    pub fn get_frequency(&self) -> i64 {
        self.frequency
    }
    pub fn clear_frequency(&mut self) {
        self.frequency = 0;
    }

    // Param is passed by value, moved
    pub fn set_frequency(&mut self, v: i64) {
        self.frequency = v;
    }

    // int64 num_cores = 5;


    pub fn get_num_cores(&self) -> i64 {
        self.num_cores
    }
    pub fn clear_num_cores(&mut self) {
        self.num_cores = 0;
    }

    // Param is passed by value, moved
    pub fn set_num_cores(&mut self, v: i64) {
        self.num_cores = v;
    }

    // repeated .tensorflow.DeviceProperties.EnvironmentEntry environment = 6;


    pub fn get_environment(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.environment
    }
    pub fn clear_environment(&mut self) {
        self.environment.clear();
    }

    // Param is passed by value, moved
    pub fn set_environment(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.environment = v;
    }

    // Mutable pointer to the field.
    pub fn mut_environment(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.environment
    }

    // Take field
    pub fn take_environment(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.environment, ::std::collections::HashMap::new())
    }

    // int64 num_registers = 7;


    pub fn get_num_registers(&self) -> i64 {
        self.num_registers
    }
    pub fn clear_num_registers(&mut self) {
        self.num_registers = 0;
    }

    // Param is passed by value, moved
    pub fn set_num_registers(&mut self, v: i64) {
        self.num_registers = v;
    }

    // int64 l1_cache_size = 8;


    pub fn get_l1_cache_size(&self) -> i64 {
        self.l1_cache_size
    }
    pub fn clear_l1_cache_size(&mut self) {
        self.l1_cache_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_l1_cache_size(&mut self, v: i64) {
        self.l1_cache_size = v;
    }

    // int64 l2_cache_size = 9;


    pub fn get_l2_cache_size(&self) -> i64 {
        self.l2_cache_size
    }
    pub fn clear_l2_cache_size(&mut self) {
        self.l2_cache_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_l2_cache_size(&mut self, v: i64) {
        self.l2_cache_size = v;
    }

    // int64 l3_cache_size = 10;


    pub fn get_l3_cache_size(&self) -> i64 {
        self.l3_cache_size
    }
    pub fn clear_l3_cache_size(&mut self) {
        self.l3_cache_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_l3_cache_size(&mut self, v: i64) {
        self.l3_cache_size = v;
    }

    // int64 shared_memory_size_per_multiprocessor = 11;


    pub fn get_shared_memory_size_per_multiprocessor(&self) -> i64 {
        self.shared_memory_size_per_multiprocessor
    }
    pub fn clear_shared_memory_size_per_multiprocessor(&mut self) {
        self.shared_memory_size_per_multiprocessor = 0;
    }

    // Param is passed by value, moved
    pub fn set_shared_memory_size_per_multiprocessor(&mut self, v: i64) {
        self.shared_memory_size_per_multiprocessor = v;
    }

    // int64 memory_size = 12;


    pub fn get_memory_size(&self) -> i64 {
        self.memory_size
    }
    pub fn clear_memory_size(&mut self) {
        self.memory_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_memory_size(&mut self, v: i64) {
        self.memory_size = v;
    }

    // int64 bandwidth = 13;


    pub fn get_bandwidth(&self) -> i64 {
        self.bandwidth
    }
    pub fn clear_bandwidth(&mut self) {
        self.bandwidth = 0;
    }

    // Param is passed by value, moved
    pub fn set_bandwidth(&mut self, v: i64) {
        self.bandwidth = v;
    }
}

impl ::protobuf::Message for DeviceProperties {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.vendor)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.model)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.frequency = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.num_cores = tmp;
                },
                6 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.environment)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.num_registers = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.l1_cache_size = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.l2_cache_size = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.l3_cache_size = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.shared_memory_size_per_multiprocessor = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.memory_size = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.bandwidth = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field_type);
        }
        if !self.vendor.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.vendor);
        }
        if !self.model.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.model);
        }
        if self.frequency != 0 {
            my_size += ::protobuf::rt::value_size(4, self.frequency, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.num_cores != 0 {
            my_size += ::protobuf::rt::value_size(5, self.num_cores, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(6, &self.environment);
        if self.num_registers != 0 {
            my_size += ::protobuf::rt::value_size(7, self.num_registers, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.l1_cache_size != 0 {
            my_size += ::protobuf::rt::value_size(8, self.l1_cache_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.l2_cache_size != 0 {
            my_size += ::protobuf::rt::value_size(9, self.l2_cache_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.l3_cache_size != 0 {
            my_size += ::protobuf::rt::value_size(10, self.l3_cache_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.shared_memory_size_per_multiprocessor != 0 {
            my_size += ::protobuf::rt::value_size(11, self.shared_memory_size_per_multiprocessor, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.memory_size != 0 {
            my_size += ::protobuf::rt::value_size(12, self.memory_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.bandwidth != 0 {
            my_size += ::protobuf::rt::value_size(13, self.bandwidth, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.field_type.is_empty() {
            os.write_string(1, &self.field_type)?;
        }
        if !self.vendor.is_empty() {
            os.write_string(2, &self.vendor)?;
        }
        if !self.model.is_empty() {
            os.write_string(3, &self.model)?;
        }
        if self.frequency != 0 {
            os.write_int64(4, self.frequency)?;
        }
        if self.num_cores != 0 {
            os.write_int64(5, self.num_cores)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(6, &self.environment, os)?;
        if self.num_registers != 0 {
            os.write_int64(7, self.num_registers)?;
        }
        if self.l1_cache_size != 0 {
            os.write_int64(8, self.l1_cache_size)?;
        }
        if self.l2_cache_size != 0 {
            os.write_int64(9, self.l2_cache_size)?;
        }
        if self.l3_cache_size != 0 {
            os.write_int64(10, self.l3_cache_size)?;
        }
        if self.shared_memory_size_per_multiprocessor != 0 {
            os.write_int64(11, self.shared_memory_size_per_multiprocessor)?;
        }
        if self.memory_size != 0 {
            os.write_int64(12, self.memory_size)?;
        }
        if self.bandwidth != 0 {
            os.write_int64(13, self.bandwidth)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeviceProperties {
        DeviceProperties::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type",
                |m: &DeviceProperties| { &m.field_type },
                |m: &mut DeviceProperties| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "vendor",
                |m: &DeviceProperties| { &m.vendor },
                |m: &mut DeviceProperties| { &mut m.vendor },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "model",
                |m: &DeviceProperties| { &m.model },
                |m: &mut DeviceProperties| { &mut m.model },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "frequency",
                |m: &DeviceProperties| { &m.frequency },
                |m: &mut DeviceProperties| { &mut m.frequency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "num_cores",
                |m: &DeviceProperties| { &m.num_cores },
                |m: &mut DeviceProperties| { &mut m.num_cores },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "environment",
                |m: &DeviceProperties| { &m.environment },
                |m: &mut DeviceProperties| { &mut m.environment },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "num_registers",
                |m: &DeviceProperties| { &m.num_registers },
                |m: &mut DeviceProperties| { &mut m.num_registers },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "l1_cache_size",
                |m: &DeviceProperties| { &m.l1_cache_size },
                |m: &mut DeviceProperties| { &mut m.l1_cache_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "l2_cache_size",
                |m: &DeviceProperties| { &m.l2_cache_size },
                |m: &mut DeviceProperties| { &mut m.l2_cache_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "l3_cache_size",
                |m: &DeviceProperties| { &m.l3_cache_size },
                |m: &mut DeviceProperties| { &mut m.l3_cache_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "shared_memory_size_per_multiprocessor",
                |m: &DeviceProperties| { &m.shared_memory_size_per_multiprocessor },
                |m: &mut DeviceProperties| { &mut m.shared_memory_size_per_multiprocessor },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "memory_size",
                |m: &DeviceProperties| { &m.memory_size },
                |m: &mut DeviceProperties| { &mut m.memory_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "bandwidth",
                |m: &DeviceProperties| { &m.bandwidth },
                |m: &mut DeviceProperties| { &mut m.bandwidth },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeviceProperties>(
                "DeviceProperties",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeviceProperties {
        static instance: ::protobuf::rt::LazyV2<DeviceProperties> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeviceProperties::new)
    }
}

impl ::protobuf::Clear for DeviceProperties {
    fn clear(&mut self) {
        self.field_type.clear();
        self.vendor.clear();
        self.model.clear();
        self.frequency = 0;
        self.num_cores = 0;
        self.environment.clear();
        self.num_registers = 0;
        self.l1_cache_size = 0;
        self.l2_cache_size = 0;
        self.l3_cache_size = 0;
        self.shared_memory_size_per_multiprocessor = 0;
        self.memory_size = 0;
        self.bandwidth = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeviceProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeviceProperties {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NamedDevice {
    // message fields
    pub name: ::std::string::String,
    pub properties: ::protobuf::SingularPtrField<DeviceProperties>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NamedDevice {
    fn default() -> &'a NamedDevice {
        <NamedDevice as ::protobuf::Message>::default_instance()
    }
}

impl NamedDevice {
    pub fn new() -> NamedDevice {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .tensorflow.DeviceProperties properties = 2;


    pub fn get_properties(&self) -> &DeviceProperties {
        self.properties.as_ref().unwrap_or_else(|| <DeviceProperties as ::protobuf::Message>::default_instance())
    }
    pub fn clear_properties(&mut self) {
        self.properties.clear();
    }

    pub fn has_properties(&self) -> bool {
        self.properties.is_some()
    }

    // Param is passed by value, moved
    pub fn set_properties(&mut self, v: DeviceProperties) {
        self.properties = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_properties(&mut self) -> &mut DeviceProperties {
        if self.properties.is_none() {
            self.properties.set_default();
        }
        self.properties.as_mut().unwrap()
    }

    // Take field
    pub fn take_properties(&mut self) -> DeviceProperties {
        self.properties.take().unwrap_or_else(|| DeviceProperties::new())
    }
}

impl ::protobuf::Message for NamedDevice {
    fn is_initialized(&self) -> bool {
        for v in &self.properties {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.properties)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(ref v) = self.properties.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(ref v) = self.properties.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NamedDevice {
        NamedDevice::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &NamedDevice| { &m.name },
                |m: &mut NamedDevice| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DeviceProperties>>(
                "properties",
                |m: &NamedDevice| { &m.properties },
                |m: &mut NamedDevice| { &mut m.properties },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<NamedDevice>(
                "NamedDevice",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static NamedDevice {
        static instance: ::protobuf::rt::LazyV2<NamedDevice> = ::protobuf::rt::LazyV2::INIT;
        instance.get(NamedDevice::new)
    }
}

impl ::protobuf::Clear for NamedDevice {
    fn clear(&mut self) {
        self.name.clear();
        self.properties.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NamedDevice {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NamedDevice {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n0tensorflow/core/protobuf/device_properties.proto\x12\ntensorflow\"\
    \xc2\x04\n\x10DeviceProperties\x12\x12\n\x04type\x18\x01\x20\x01(\tR\x04\
    type\x12\x16\n\x06vendor\x18\x02\x20\x01(\tR\x06vendor\x12\x14\n\x05mode\
    l\x18\x03\x20\x01(\tR\x05model\x12\x1c\n\tfrequency\x18\x04\x20\x01(\x03\
    R\tfrequency\x12\x1b\n\tnum_cores\x18\x05\x20\x01(\x03R\x08numCores\x12O\
    \n\x0benvironment\x18\x06\x20\x03(\x0b2-.tensorflow.DeviceProperties.Env\
    ironmentEntryR\x0benvironment\x12#\n\rnum_registers\x18\x07\x20\x01(\x03\
    R\x0cnumRegisters\x12\"\n\rl1_cache_size\x18\x08\x20\x01(\x03R\x0bl1Cach\
    eSize\x12\"\n\rl2_cache_size\x18\t\x20\x01(\x03R\x0bl2CacheSize\x12\"\n\
    \rl3_cache_size\x18\n\x20\x01(\x03R\x0bl3CacheSize\x12P\n%shared_memory_\
    size_per_multiprocessor\x18\x0b\x20\x01(\x03R!sharedMemorySizePerMultipr\
    ocessor\x12\x1f\n\x0bmemory_size\x18\x0c\x20\x01(\x03R\nmemorySize\x12\
    \x1c\n\tbandwidth\x18\r\x20\x01(\x03R\tbandwidth\x1a>\n\x10EnvironmentEn\
    try\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\
    \x02\x20\x01(\tR\x05value:\x028\x01\"_\n\x0bNamedDevice\x12\x12\n\x04nam\
    e\x18\x01\x20\x01(\tR\x04name\x12<\n\nproperties\x18\x02\x20\x01(\x0b2\
    \x1c.tensorflow.DevicePropertiesR\npropertiesBYB\x16DevicePropertiesProt\
    osZ<github.com/tensorflow/tensorflow/tensorflow/go/core/protobuf\xf8\x01\
    \x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
