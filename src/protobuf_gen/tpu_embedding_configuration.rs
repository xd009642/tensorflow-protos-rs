// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow/core/protobuf/tpu/tpu_embedding_configuration.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct TPUEmbeddingConfiguration {
    // message fields
    pub table_descriptor: ::protobuf::RepeatedField<TPUEmbeddingConfiguration_TableDescriptor>,
    pub mode: TPUEmbeddingConfiguration_Mode,
    pub batch_size_per_tensor_core: i32,
    pub num_hosts: i32,
    pub num_tensor_cores: i32,
    pub sharding_strategy: TPUEmbeddingConfiguration_ShardingStrategy,
    pub pipeline_execution_with_tensor_core: bool,
    pub output_layout: ::protobuf::SingularPtrField<super::tpu_embedding_output_layout::TPUEmbeddingOutputLayout>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TPUEmbeddingConfiguration {
    fn default() -> &'a TPUEmbeddingConfiguration {
        <TPUEmbeddingConfiguration as ::protobuf::Message>::default_instance()
    }
}

impl TPUEmbeddingConfiguration {
    pub fn new() -> TPUEmbeddingConfiguration {
        ::std::default::Default::default()
    }

    // repeated .tensorflow.tpu.TPUEmbeddingConfiguration.TableDescriptor table_descriptor = 1;


    pub fn get_table_descriptor(&self) -> &[TPUEmbeddingConfiguration_TableDescriptor] {
        &self.table_descriptor
    }
    pub fn clear_table_descriptor(&mut self) {
        self.table_descriptor.clear();
    }

    // Param is passed by value, moved
    pub fn set_table_descriptor(&mut self, v: ::protobuf::RepeatedField<TPUEmbeddingConfiguration_TableDescriptor>) {
        self.table_descriptor = v;
    }

    // Mutable pointer to the field.
    pub fn mut_table_descriptor(&mut self) -> &mut ::protobuf::RepeatedField<TPUEmbeddingConfiguration_TableDescriptor> {
        &mut self.table_descriptor
    }

    // Take field
    pub fn take_table_descriptor(&mut self) -> ::protobuf::RepeatedField<TPUEmbeddingConfiguration_TableDescriptor> {
        ::std::mem::replace(&mut self.table_descriptor, ::protobuf::RepeatedField::new())
    }

    // .tensorflow.tpu.TPUEmbeddingConfiguration.Mode mode = 2;


    pub fn get_mode(&self) -> TPUEmbeddingConfiguration_Mode {
        self.mode
    }
    pub fn clear_mode(&mut self) {
        self.mode = TPUEmbeddingConfiguration_Mode::UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_mode(&mut self, v: TPUEmbeddingConfiguration_Mode) {
        self.mode = v;
    }

    // int32 batch_size_per_tensor_core = 3;


    pub fn get_batch_size_per_tensor_core(&self) -> i32 {
        self.batch_size_per_tensor_core
    }
    pub fn clear_batch_size_per_tensor_core(&mut self) {
        self.batch_size_per_tensor_core = 0;
    }

    // Param is passed by value, moved
    pub fn set_batch_size_per_tensor_core(&mut self, v: i32) {
        self.batch_size_per_tensor_core = v;
    }

    // int32 num_hosts = 4;


    pub fn get_num_hosts(&self) -> i32 {
        self.num_hosts
    }
    pub fn clear_num_hosts(&mut self) {
        self.num_hosts = 0;
    }

    // Param is passed by value, moved
    pub fn set_num_hosts(&mut self, v: i32) {
        self.num_hosts = v;
    }

    // int32 num_tensor_cores = 5;


    pub fn get_num_tensor_cores(&self) -> i32 {
        self.num_tensor_cores
    }
    pub fn clear_num_tensor_cores(&mut self) {
        self.num_tensor_cores = 0;
    }

    // Param is passed by value, moved
    pub fn set_num_tensor_cores(&mut self, v: i32) {
        self.num_tensor_cores = v;
    }

    // .tensorflow.tpu.TPUEmbeddingConfiguration.ShardingStrategy sharding_strategy = 6;


    pub fn get_sharding_strategy(&self) -> TPUEmbeddingConfiguration_ShardingStrategy {
        self.sharding_strategy
    }
    pub fn clear_sharding_strategy(&mut self) {
        self.sharding_strategy = TPUEmbeddingConfiguration_ShardingStrategy::DIV_DEFAULT;
    }

    // Param is passed by value, moved
    pub fn set_sharding_strategy(&mut self, v: TPUEmbeddingConfiguration_ShardingStrategy) {
        self.sharding_strategy = v;
    }

    // bool pipeline_execution_with_tensor_core = 7;


    pub fn get_pipeline_execution_with_tensor_core(&self) -> bool {
        self.pipeline_execution_with_tensor_core
    }
    pub fn clear_pipeline_execution_with_tensor_core(&mut self) {
        self.pipeline_execution_with_tensor_core = false;
    }

    // Param is passed by value, moved
    pub fn set_pipeline_execution_with_tensor_core(&mut self, v: bool) {
        self.pipeline_execution_with_tensor_core = v;
    }

    // .tensorflow.tpu.TPUEmbeddingOutputLayout output_layout = 8;


    pub fn get_output_layout(&self) -> &super::tpu_embedding_output_layout::TPUEmbeddingOutputLayout {
        self.output_layout.as_ref().unwrap_or_else(|| <super::tpu_embedding_output_layout::TPUEmbeddingOutputLayout as ::protobuf::Message>::default_instance())
    }
    pub fn clear_output_layout(&mut self) {
        self.output_layout.clear();
    }

    pub fn has_output_layout(&self) -> bool {
        self.output_layout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_output_layout(&mut self, v: super::tpu_embedding_output_layout::TPUEmbeddingOutputLayout) {
        self.output_layout = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_output_layout(&mut self) -> &mut super::tpu_embedding_output_layout::TPUEmbeddingOutputLayout {
        if self.output_layout.is_none() {
            self.output_layout.set_default();
        }
        self.output_layout.as_mut().unwrap()
    }

    // Take field
    pub fn take_output_layout(&mut self) -> super::tpu_embedding_output_layout::TPUEmbeddingOutputLayout {
        self.output_layout.take().unwrap_or_else(|| super::tpu_embedding_output_layout::TPUEmbeddingOutputLayout::new())
    }
}

impl ::protobuf::Message for TPUEmbeddingConfiguration {
    fn is_initialized(&self) -> bool {
        for v in &self.table_descriptor {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.output_layout {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.table_descriptor)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.mode, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.batch_size_per_tensor_core = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.num_hosts = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.num_tensor_cores = tmp;
                },
                6 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.sharding_strategy, 6, &mut self.unknown_fields)?
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.pipeline_execution_with_tensor_core = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.output_layout)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.table_descriptor {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.mode != TPUEmbeddingConfiguration_Mode::UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(2, self.mode);
        }
        if self.batch_size_per_tensor_core != 0 {
            my_size += ::protobuf::rt::value_size(3, self.batch_size_per_tensor_core, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.num_hosts != 0 {
            my_size += ::protobuf::rt::value_size(4, self.num_hosts, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.num_tensor_cores != 0 {
            my_size += ::protobuf::rt::value_size(5, self.num_tensor_cores, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.sharding_strategy != TPUEmbeddingConfiguration_ShardingStrategy::DIV_DEFAULT {
            my_size += ::protobuf::rt::enum_size(6, self.sharding_strategy);
        }
        if self.pipeline_execution_with_tensor_core != false {
            my_size += 2;
        }
        if let Some(ref v) = self.output_layout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.table_descriptor {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.mode != TPUEmbeddingConfiguration_Mode::UNSPECIFIED {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.mode))?;
        }
        if self.batch_size_per_tensor_core != 0 {
            os.write_int32(3, self.batch_size_per_tensor_core)?;
        }
        if self.num_hosts != 0 {
            os.write_int32(4, self.num_hosts)?;
        }
        if self.num_tensor_cores != 0 {
            os.write_int32(5, self.num_tensor_cores)?;
        }
        if self.sharding_strategy != TPUEmbeddingConfiguration_ShardingStrategy::DIV_DEFAULT {
            os.write_enum(6, ::protobuf::ProtobufEnum::value(&self.sharding_strategy))?;
        }
        if self.pipeline_execution_with_tensor_core != false {
            os.write_bool(7, self.pipeline_execution_with_tensor_core)?;
        }
        if let Some(ref v) = self.output_layout.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TPUEmbeddingConfiguration {
        TPUEmbeddingConfiguration::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TPUEmbeddingConfiguration_TableDescriptor>>(
                "table_descriptor",
                |m: &TPUEmbeddingConfiguration| { &m.table_descriptor },
                |m: &mut TPUEmbeddingConfiguration| { &mut m.table_descriptor },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TPUEmbeddingConfiguration_Mode>>(
                "mode",
                |m: &TPUEmbeddingConfiguration| { &m.mode },
                |m: &mut TPUEmbeddingConfiguration| { &mut m.mode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "batch_size_per_tensor_core",
                |m: &TPUEmbeddingConfiguration| { &m.batch_size_per_tensor_core },
                |m: &mut TPUEmbeddingConfiguration| { &mut m.batch_size_per_tensor_core },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "num_hosts",
                |m: &TPUEmbeddingConfiguration| { &m.num_hosts },
                |m: &mut TPUEmbeddingConfiguration| { &mut m.num_hosts },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "num_tensor_cores",
                |m: &TPUEmbeddingConfiguration| { &m.num_tensor_cores },
                |m: &mut TPUEmbeddingConfiguration| { &mut m.num_tensor_cores },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TPUEmbeddingConfiguration_ShardingStrategy>>(
                "sharding_strategy",
                |m: &TPUEmbeddingConfiguration| { &m.sharding_strategy },
                |m: &mut TPUEmbeddingConfiguration| { &mut m.sharding_strategy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "pipeline_execution_with_tensor_core",
                |m: &TPUEmbeddingConfiguration| { &m.pipeline_execution_with_tensor_core },
                |m: &mut TPUEmbeddingConfiguration| { &mut m.pipeline_execution_with_tensor_core },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::tpu_embedding_output_layout::TPUEmbeddingOutputLayout>>(
                "output_layout",
                |m: &TPUEmbeddingConfiguration| { &m.output_layout },
                |m: &mut TPUEmbeddingConfiguration| { &mut m.output_layout },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TPUEmbeddingConfiguration>(
                "TPUEmbeddingConfiguration",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TPUEmbeddingConfiguration {
        static instance: ::protobuf::rt::LazyV2<TPUEmbeddingConfiguration> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TPUEmbeddingConfiguration::new)
    }
}

impl ::protobuf::Clear for TPUEmbeddingConfiguration {
    fn clear(&mut self) {
        self.table_descriptor.clear();
        self.mode = TPUEmbeddingConfiguration_Mode::UNSPECIFIED;
        self.batch_size_per_tensor_core = 0;
        self.num_hosts = 0;
        self.num_tensor_cores = 0;
        self.sharding_strategy = TPUEmbeddingConfiguration_ShardingStrategy::DIV_DEFAULT;
        self.pipeline_execution_with_tensor_core = false;
        self.output_layout.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TPUEmbeddingConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TPUEmbeddingConfiguration {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TPUEmbeddingConfiguration_TableDescriptor {
    // message fields
    pub name: ::std::string::String,
    pub vocabulary_size: i32,
    pub dimension: i32,
    pub num_features: i32,
    pub optimization_parameters: ::protobuf::SingularPtrField<super::optimization_parameters::OptimizationParameters>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TPUEmbeddingConfiguration_TableDescriptor {
    fn default() -> &'a TPUEmbeddingConfiguration_TableDescriptor {
        <TPUEmbeddingConfiguration_TableDescriptor as ::protobuf::Message>::default_instance()
    }
}

impl TPUEmbeddingConfiguration_TableDescriptor {
    pub fn new() -> TPUEmbeddingConfiguration_TableDescriptor {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // int32 vocabulary_size = 2;


    pub fn get_vocabulary_size(&self) -> i32 {
        self.vocabulary_size
    }
    pub fn clear_vocabulary_size(&mut self) {
        self.vocabulary_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_vocabulary_size(&mut self, v: i32) {
        self.vocabulary_size = v;
    }

    // int32 dimension = 3;


    pub fn get_dimension(&self) -> i32 {
        self.dimension
    }
    pub fn clear_dimension(&mut self) {
        self.dimension = 0;
    }

    // Param is passed by value, moved
    pub fn set_dimension(&mut self, v: i32) {
        self.dimension = v;
    }

    // int32 num_features = 4;


    pub fn get_num_features(&self) -> i32 {
        self.num_features
    }
    pub fn clear_num_features(&mut self) {
        self.num_features = 0;
    }

    // Param is passed by value, moved
    pub fn set_num_features(&mut self, v: i32) {
        self.num_features = v;
    }

    // .tensorflow.tpu.OptimizationParameters optimization_parameters = 5;


    pub fn get_optimization_parameters(&self) -> &super::optimization_parameters::OptimizationParameters {
        self.optimization_parameters.as_ref().unwrap_or_else(|| <super::optimization_parameters::OptimizationParameters as ::protobuf::Message>::default_instance())
    }
    pub fn clear_optimization_parameters(&mut self) {
        self.optimization_parameters.clear();
    }

    pub fn has_optimization_parameters(&self) -> bool {
        self.optimization_parameters.is_some()
    }

    // Param is passed by value, moved
    pub fn set_optimization_parameters(&mut self, v: super::optimization_parameters::OptimizationParameters) {
        self.optimization_parameters = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_optimization_parameters(&mut self) -> &mut super::optimization_parameters::OptimizationParameters {
        if self.optimization_parameters.is_none() {
            self.optimization_parameters.set_default();
        }
        self.optimization_parameters.as_mut().unwrap()
    }

    // Take field
    pub fn take_optimization_parameters(&mut self) -> super::optimization_parameters::OptimizationParameters {
        self.optimization_parameters.take().unwrap_or_else(|| super::optimization_parameters::OptimizationParameters::new())
    }
}

impl ::protobuf::Message for TPUEmbeddingConfiguration_TableDescriptor {
    fn is_initialized(&self) -> bool {
        for v in &self.optimization_parameters {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.vocabulary_size = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.dimension = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.num_features = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.optimization_parameters)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.vocabulary_size != 0 {
            my_size += ::protobuf::rt::value_size(2, self.vocabulary_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.dimension != 0 {
            my_size += ::protobuf::rt::value_size(3, self.dimension, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.num_features != 0 {
            my_size += ::protobuf::rt::value_size(4, self.num_features, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.optimization_parameters.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.vocabulary_size != 0 {
            os.write_int32(2, self.vocabulary_size)?;
        }
        if self.dimension != 0 {
            os.write_int32(3, self.dimension)?;
        }
        if self.num_features != 0 {
            os.write_int32(4, self.num_features)?;
        }
        if let Some(ref v) = self.optimization_parameters.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TPUEmbeddingConfiguration_TableDescriptor {
        TPUEmbeddingConfiguration_TableDescriptor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &TPUEmbeddingConfiguration_TableDescriptor| { &m.name },
                |m: &mut TPUEmbeddingConfiguration_TableDescriptor| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "vocabulary_size",
                |m: &TPUEmbeddingConfiguration_TableDescriptor| { &m.vocabulary_size },
                |m: &mut TPUEmbeddingConfiguration_TableDescriptor| { &mut m.vocabulary_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "dimension",
                |m: &TPUEmbeddingConfiguration_TableDescriptor| { &m.dimension },
                |m: &mut TPUEmbeddingConfiguration_TableDescriptor| { &mut m.dimension },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "num_features",
                |m: &TPUEmbeddingConfiguration_TableDescriptor| { &m.num_features },
                |m: &mut TPUEmbeddingConfiguration_TableDescriptor| { &mut m.num_features },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::optimization_parameters::OptimizationParameters>>(
                "optimization_parameters",
                |m: &TPUEmbeddingConfiguration_TableDescriptor| { &m.optimization_parameters },
                |m: &mut TPUEmbeddingConfiguration_TableDescriptor| { &mut m.optimization_parameters },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TPUEmbeddingConfiguration_TableDescriptor>(
                "TPUEmbeddingConfiguration.TableDescriptor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TPUEmbeddingConfiguration_TableDescriptor {
        static instance: ::protobuf::rt::LazyV2<TPUEmbeddingConfiguration_TableDescriptor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TPUEmbeddingConfiguration_TableDescriptor::new)
    }
}

impl ::protobuf::Clear for TPUEmbeddingConfiguration_TableDescriptor {
    fn clear(&mut self) {
        self.name.clear();
        self.vocabulary_size = 0;
        self.dimension = 0;
        self.num_features = 0;
        self.optimization_parameters.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TPUEmbeddingConfiguration_TableDescriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TPUEmbeddingConfiguration_TableDescriptor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TPUEmbeddingConfiguration_Mode {
    UNSPECIFIED = 0,
    INFERENCE = 1,
    TRAINING = 2,
    BACKWARD_PASS_ONLY = 3,
}

impl ::protobuf::ProtobufEnum for TPUEmbeddingConfiguration_Mode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TPUEmbeddingConfiguration_Mode> {
        match value {
            0 => ::std::option::Option::Some(TPUEmbeddingConfiguration_Mode::UNSPECIFIED),
            1 => ::std::option::Option::Some(TPUEmbeddingConfiguration_Mode::INFERENCE),
            2 => ::std::option::Option::Some(TPUEmbeddingConfiguration_Mode::TRAINING),
            3 => ::std::option::Option::Some(TPUEmbeddingConfiguration_Mode::BACKWARD_PASS_ONLY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TPUEmbeddingConfiguration_Mode] = &[
            TPUEmbeddingConfiguration_Mode::UNSPECIFIED,
            TPUEmbeddingConfiguration_Mode::INFERENCE,
            TPUEmbeddingConfiguration_Mode::TRAINING,
            TPUEmbeddingConfiguration_Mode::BACKWARD_PASS_ONLY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<TPUEmbeddingConfiguration_Mode>("TPUEmbeddingConfiguration.Mode", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for TPUEmbeddingConfiguration_Mode {
}

impl ::std::default::Default for TPUEmbeddingConfiguration_Mode {
    fn default() -> Self {
        TPUEmbeddingConfiguration_Mode::UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for TPUEmbeddingConfiguration_Mode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TPUEmbeddingConfiguration_ShardingStrategy {
    DIV_DEFAULT = 0,
    MOD = 1,
}

impl ::protobuf::ProtobufEnum for TPUEmbeddingConfiguration_ShardingStrategy {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TPUEmbeddingConfiguration_ShardingStrategy> {
        match value {
            0 => ::std::option::Option::Some(TPUEmbeddingConfiguration_ShardingStrategy::DIV_DEFAULT),
            1 => ::std::option::Option::Some(TPUEmbeddingConfiguration_ShardingStrategy::MOD),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TPUEmbeddingConfiguration_ShardingStrategy] = &[
            TPUEmbeddingConfiguration_ShardingStrategy::DIV_DEFAULT,
            TPUEmbeddingConfiguration_ShardingStrategy::MOD,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<TPUEmbeddingConfiguration_ShardingStrategy>("TPUEmbeddingConfiguration.ShardingStrategy", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for TPUEmbeddingConfiguration_ShardingStrategy {
}

impl ::std::default::Default for TPUEmbeddingConfiguration_ShardingStrategy {
    fn default() -> Self {
        TPUEmbeddingConfiguration_ShardingStrategy::DIV_DEFAULT
    }
}

impl ::protobuf::reflect::ProtobufValue for TPUEmbeddingConfiguration_ShardingStrategy {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n>tensorflow/core/protobuf/tpu/tpu_embedding_configuration.proto\x12\
    \x0etensorflow.tpu\x1a:tensorflow/core/protobuf/tpu/optimization_paramet\
    ers.proto\x1a>tensorflow/core/protobuf/tpu/tpu_embedding_output_layout.p\
    roto\"\xbd\x07\n\x19TPUEmbeddingConfiguration\x12d\n\x10table_descriptor\
    \x18\x01\x20\x03(\x0b29.tensorflow.tpu.TPUEmbeddingConfiguration.TableDe\
    scriptorR\x0ftableDescriptor\x12B\n\x04mode\x18\x02\x20\x01(\x0e2..tenso\
    rflow.tpu.TPUEmbeddingConfiguration.ModeR\x04mode\x12:\n\x1abatch_size_p\
    er_tensor_core\x18\x03\x20\x01(\x05R\x16batchSizePerTensorCore\x12\x1b\n\
    \tnum_hosts\x18\x04\x20\x01(\x05R\x08numHosts\x12(\n\x10num_tensor_cores\
    \x18\x05\x20\x01(\x05R\x0enumTensorCores\x12g\n\x11sharding_strategy\x18\
    \x06\x20\x01(\x0e2:.tensorflow.tpu.TPUEmbeddingConfiguration.ShardingStr\
    ategyR\x10shardingStrategy\x12L\n#pipeline_execution_with_tensor_core\
    \x18\x07\x20\x01(\x08R\x1fpipelineExecutionWithTensorCore\x12M\n\routput\
    _layout\x18\x08\x20\x01(\x0b2(.tensorflow.tpu.TPUEmbeddingOutputLayoutR\
    \x0coutputLayout\x1a\xf0\x01\n\x0fTableDescriptor\x12\x12\n\x04name\x18\
    \x01\x20\x01(\tR\x04name\x12'\n\x0fvocabulary_size\x18\x02\x20\x01(\x05R\
    \x0evocabularySize\x12\x1c\n\tdimension\x18\x03\x20\x01(\x05R\tdimension\
    \x12!\n\x0cnum_features\x18\x04\x20\x01(\x05R\x0bnumFeatures\x12_\n\x17o\
    ptimization_parameters\x18\x05\x20\x01(\x0b2&.tensorflow.tpu.Optimizatio\
    nParametersR\x16optimizationParameters\"L\n\x04Mode\x12\x0f\n\x0bUNSPECI\
    FIED\x10\0\x12\r\n\tINFERENCE\x10\x01\x12\x0c\n\x08TRAINING\x10\x02\x12\
    \x16\n\x12BACKWARD_PASS_ONLY\x10\x03\",\n\x10ShardingStrategy\x12\x0f\n\
    \x0bDIV_DEFAULT\x10\0\x12\x07\n\x03MOD\x10\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
