// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow/compiler/xrt/xrt.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct DeviceAssignment {
    // message fields
    pub computation_devices: ::protobuf::RepeatedField<DeviceAssignment_ComputationDevice>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeviceAssignment {
    fn default() -> &'a DeviceAssignment {
        <DeviceAssignment as ::protobuf::Message>::default_instance()
    }
}

impl DeviceAssignment {
    pub fn new() -> DeviceAssignment {
        ::std::default::Default::default()
    }

    // repeated .xrt.DeviceAssignment.ComputationDevice computation_devices = 1;


    pub fn get_computation_devices(&self) -> &[DeviceAssignment_ComputationDevice] {
        &self.computation_devices
    }
    pub fn clear_computation_devices(&mut self) {
        self.computation_devices.clear();
    }

    // Param is passed by value, moved
    pub fn set_computation_devices(&mut self, v: ::protobuf::RepeatedField<DeviceAssignment_ComputationDevice>) {
        self.computation_devices = v;
    }

    // Mutable pointer to the field.
    pub fn mut_computation_devices(&mut self) -> &mut ::protobuf::RepeatedField<DeviceAssignment_ComputationDevice> {
        &mut self.computation_devices
    }

    // Take field
    pub fn take_computation_devices(&mut self) -> ::protobuf::RepeatedField<DeviceAssignment_ComputationDevice> {
        ::std::mem::replace(&mut self.computation_devices, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for DeviceAssignment {
    fn is_initialized(&self) -> bool {
        for v in &self.computation_devices {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.computation_devices)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.computation_devices {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.computation_devices {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeviceAssignment {
        DeviceAssignment::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DeviceAssignment_ComputationDevice>>(
                "computation_devices",
                |m: &DeviceAssignment| { &m.computation_devices },
                |m: &mut DeviceAssignment| { &mut m.computation_devices },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeviceAssignment>(
                "DeviceAssignment",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeviceAssignment {
        static instance: ::protobuf::rt::LazyV2<DeviceAssignment> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeviceAssignment::new)
    }
}

impl ::protobuf::Clear for DeviceAssignment {
    fn clear(&mut self) {
        self.computation_devices.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeviceAssignment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeviceAssignment {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeviceAssignment_ComputationDevice {
    // message fields
    pub replica_devices: ::protobuf::RepeatedField<DeviceAssignment_ComputationDevice_DeviceMeshCoordinates>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeviceAssignment_ComputationDevice {
    fn default() -> &'a DeviceAssignment_ComputationDevice {
        <DeviceAssignment_ComputationDevice as ::protobuf::Message>::default_instance()
    }
}

impl DeviceAssignment_ComputationDevice {
    pub fn new() -> DeviceAssignment_ComputationDevice {
        ::std::default::Default::default()
    }

    // repeated .xrt.DeviceAssignment.ComputationDevice.DeviceMeshCoordinates replica_devices = 1;


    pub fn get_replica_devices(&self) -> &[DeviceAssignment_ComputationDevice_DeviceMeshCoordinates] {
        &self.replica_devices
    }
    pub fn clear_replica_devices(&mut self) {
        self.replica_devices.clear();
    }

    // Param is passed by value, moved
    pub fn set_replica_devices(&mut self, v: ::protobuf::RepeatedField<DeviceAssignment_ComputationDevice_DeviceMeshCoordinates>) {
        self.replica_devices = v;
    }

    // Mutable pointer to the field.
    pub fn mut_replica_devices(&mut self) -> &mut ::protobuf::RepeatedField<DeviceAssignment_ComputationDevice_DeviceMeshCoordinates> {
        &mut self.replica_devices
    }

    // Take field
    pub fn take_replica_devices(&mut self) -> ::protobuf::RepeatedField<DeviceAssignment_ComputationDevice_DeviceMeshCoordinates> {
        ::std::mem::replace(&mut self.replica_devices, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for DeviceAssignment_ComputationDevice {
    fn is_initialized(&self) -> bool {
        for v in &self.replica_devices {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.replica_devices)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.replica_devices {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.replica_devices {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeviceAssignment_ComputationDevice {
        DeviceAssignment_ComputationDevice::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DeviceAssignment_ComputationDevice_DeviceMeshCoordinates>>(
                "replica_devices",
                |m: &DeviceAssignment_ComputationDevice| { &m.replica_devices },
                |m: &mut DeviceAssignment_ComputationDevice| { &mut m.replica_devices },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeviceAssignment_ComputationDevice>(
                "DeviceAssignment.ComputationDevice",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeviceAssignment_ComputationDevice {
        static instance: ::protobuf::rt::LazyV2<DeviceAssignment_ComputationDevice> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeviceAssignment_ComputationDevice::new)
    }
}

impl ::protobuf::Clear for DeviceAssignment_ComputationDevice {
    fn clear(&mut self) {
        self.replica_devices.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeviceAssignment_ComputationDevice {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeviceAssignment_ComputationDevice {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeviceAssignment_ComputationDevice_DeviceMeshCoordinates {
    // message fields
    pub value: ::std::vec::Vec<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeviceAssignment_ComputationDevice_DeviceMeshCoordinates {
    fn default() -> &'a DeviceAssignment_ComputationDevice_DeviceMeshCoordinates {
        <DeviceAssignment_ComputationDevice_DeviceMeshCoordinates as ::protobuf::Message>::default_instance()
    }
}

impl DeviceAssignment_ComputationDevice_DeviceMeshCoordinates {
    pub fn new() -> DeviceAssignment_ComputationDevice_DeviceMeshCoordinates {
        ::std::default::Default::default()
    }

    // repeated int32 value = 1;


    pub fn get_value(&self) -> &[i32] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<i32>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.value, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for DeviceAssignment_ComputationDevice_DeviceMeshCoordinates {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.value {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.value {
            os.write_int32(1, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeviceAssignment_ComputationDevice_DeviceMeshCoordinates {
        DeviceAssignment_ComputationDevice_DeviceMeshCoordinates::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "value",
                |m: &DeviceAssignment_ComputationDevice_DeviceMeshCoordinates| { &m.value },
                |m: &mut DeviceAssignment_ComputationDevice_DeviceMeshCoordinates| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeviceAssignment_ComputationDevice_DeviceMeshCoordinates>(
                "DeviceAssignment.ComputationDevice.DeviceMeshCoordinates",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeviceAssignment_ComputationDevice_DeviceMeshCoordinates {
        static instance: ::protobuf::rt::LazyV2<DeviceAssignment_ComputationDevice_DeviceMeshCoordinates> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeviceAssignment_ComputationDevice_DeviceMeshCoordinates::new)
    }
}

impl ::protobuf::Clear for DeviceAssignment_ComputationDevice_DeviceMeshCoordinates {
    fn clear(&mut self) {
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeviceAssignment_ComputationDevice_DeviceMeshCoordinates {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeviceAssignment_ComputationDevice_DeviceMeshCoordinates {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct XLAComputationConfig {
    // message fields
    pub num_replicas: i32,
    pub num_cores_per_replica: i32,
    pub host_compute_metadata: ::protobuf::SingularPtrField<super::host_compute_metadata::HostComputeMetadata>,
    pub program_shape: ::protobuf::SingularPtrField<super::xla_data::ProgramShapeProto>,
    pub per_core_program_shape: ::protobuf::RepeatedField<super::xla_data::ProgramShapeProto>,
    pub device_assignment: ::protobuf::SingularPtrField<DeviceAssignment>,
    pub debug_options: ::protobuf::SingularPtrField<super::xla::DebugOptions>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a XLAComputationConfig {
    fn default() -> &'a XLAComputationConfig {
        <XLAComputationConfig as ::protobuf::Message>::default_instance()
    }
}

impl XLAComputationConfig {
    pub fn new() -> XLAComputationConfig {
        ::std::default::Default::default()
    }

    // int32 num_replicas = 1;


    pub fn get_num_replicas(&self) -> i32 {
        self.num_replicas
    }
    pub fn clear_num_replicas(&mut self) {
        self.num_replicas = 0;
    }

    // Param is passed by value, moved
    pub fn set_num_replicas(&mut self, v: i32) {
        self.num_replicas = v;
    }

    // int32 num_cores_per_replica = 2;


    pub fn get_num_cores_per_replica(&self) -> i32 {
        self.num_cores_per_replica
    }
    pub fn clear_num_cores_per_replica(&mut self) {
        self.num_cores_per_replica = 0;
    }

    // Param is passed by value, moved
    pub fn set_num_cores_per_replica(&mut self, v: i32) {
        self.num_cores_per_replica = v;
    }

    // .tensorflow.tf2xla.HostComputeMetadata host_compute_metadata = 3;


    pub fn get_host_compute_metadata(&self) -> &super::host_compute_metadata::HostComputeMetadata {
        self.host_compute_metadata.as_ref().unwrap_or_else(|| <super::host_compute_metadata::HostComputeMetadata as ::protobuf::Message>::default_instance())
    }
    pub fn clear_host_compute_metadata(&mut self) {
        self.host_compute_metadata.clear();
    }

    pub fn has_host_compute_metadata(&self) -> bool {
        self.host_compute_metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_host_compute_metadata(&mut self, v: super::host_compute_metadata::HostComputeMetadata) {
        self.host_compute_metadata = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_host_compute_metadata(&mut self) -> &mut super::host_compute_metadata::HostComputeMetadata {
        if self.host_compute_metadata.is_none() {
            self.host_compute_metadata.set_default();
        }
        self.host_compute_metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_host_compute_metadata(&mut self) -> super::host_compute_metadata::HostComputeMetadata {
        self.host_compute_metadata.take().unwrap_or_else(|| super::host_compute_metadata::HostComputeMetadata::new())
    }

    // .xla.ProgramShapeProto program_shape = 4;


    pub fn get_program_shape(&self) -> &super::xla_data::ProgramShapeProto {
        self.program_shape.as_ref().unwrap_or_else(|| <super::xla_data::ProgramShapeProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_program_shape(&mut self) {
        self.program_shape.clear();
    }

    pub fn has_program_shape(&self) -> bool {
        self.program_shape.is_some()
    }

    // Param is passed by value, moved
    pub fn set_program_shape(&mut self, v: super::xla_data::ProgramShapeProto) {
        self.program_shape = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_program_shape(&mut self) -> &mut super::xla_data::ProgramShapeProto {
        if self.program_shape.is_none() {
            self.program_shape.set_default();
        }
        self.program_shape.as_mut().unwrap()
    }

    // Take field
    pub fn take_program_shape(&mut self) -> super::xla_data::ProgramShapeProto {
        self.program_shape.take().unwrap_or_else(|| super::xla_data::ProgramShapeProto::new())
    }

    // repeated .xla.ProgramShapeProto per_core_program_shape = 5;


    pub fn get_per_core_program_shape(&self) -> &[super::xla_data::ProgramShapeProto] {
        &self.per_core_program_shape
    }
    pub fn clear_per_core_program_shape(&mut self) {
        self.per_core_program_shape.clear();
    }

    // Param is passed by value, moved
    pub fn set_per_core_program_shape(&mut self, v: ::protobuf::RepeatedField<super::xla_data::ProgramShapeProto>) {
        self.per_core_program_shape = v;
    }

    // Mutable pointer to the field.
    pub fn mut_per_core_program_shape(&mut self) -> &mut ::protobuf::RepeatedField<super::xla_data::ProgramShapeProto> {
        &mut self.per_core_program_shape
    }

    // Take field
    pub fn take_per_core_program_shape(&mut self) -> ::protobuf::RepeatedField<super::xla_data::ProgramShapeProto> {
        ::std::mem::replace(&mut self.per_core_program_shape, ::protobuf::RepeatedField::new())
    }

    // .xrt.DeviceAssignment device_assignment = 6;


    pub fn get_device_assignment(&self) -> &DeviceAssignment {
        self.device_assignment.as_ref().unwrap_or_else(|| <DeviceAssignment as ::protobuf::Message>::default_instance())
    }
    pub fn clear_device_assignment(&mut self) {
        self.device_assignment.clear();
    }

    pub fn has_device_assignment(&self) -> bool {
        self.device_assignment.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_assignment(&mut self, v: DeviceAssignment) {
        self.device_assignment = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_assignment(&mut self) -> &mut DeviceAssignment {
        if self.device_assignment.is_none() {
            self.device_assignment.set_default();
        }
        self.device_assignment.as_mut().unwrap()
    }

    // Take field
    pub fn take_device_assignment(&mut self) -> DeviceAssignment {
        self.device_assignment.take().unwrap_or_else(|| DeviceAssignment::new())
    }

    // .xla.DebugOptions debug_options = 7;


    pub fn get_debug_options(&self) -> &super::xla::DebugOptions {
        self.debug_options.as_ref().unwrap_or_else(|| <super::xla::DebugOptions as ::protobuf::Message>::default_instance())
    }
    pub fn clear_debug_options(&mut self) {
        self.debug_options.clear();
    }

    pub fn has_debug_options(&self) -> bool {
        self.debug_options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_debug_options(&mut self, v: super::xla::DebugOptions) {
        self.debug_options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_debug_options(&mut self) -> &mut super::xla::DebugOptions {
        if self.debug_options.is_none() {
            self.debug_options.set_default();
        }
        self.debug_options.as_mut().unwrap()
    }

    // Take field
    pub fn take_debug_options(&mut self) -> super::xla::DebugOptions {
        self.debug_options.take().unwrap_or_else(|| super::xla::DebugOptions::new())
    }
}

impl ::protobuf::Message for XLAComputationConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.host_compute_metadata {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.program_shape {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.per_core_program_shape {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.device_assignment {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.debug_options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.num_replicas = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.num_cores_per_replica = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.host_compute_metadata)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.program_shape)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.per_core_program_shape)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.device_assignment)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.debug_options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.num_replicas != 0 {
            my_size += ::protobuf::rt::value_size(1, self.num_replicas, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.num_cores_per_replica != 0 {
            my_size += ::protobuf::rt::value_size(2, self.num_cores_per_replica, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.host_compute_metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.program_shape.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.per_core_program_shape {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.device_assignment.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.debug_options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.num_replicas != 0 {
            os.write_int32(1, self.num_replicas)?;
        }
        if self.num_cores_per_replica != 0 {
            os.write_int32(2, self.num_cores_per_replica)?;
        }
        if let Some(ref v) = self.host_compute_metadata.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.program_shape.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.per_core_program_shape {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.device_assignment.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.debug_options.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> XLAComputationConfig {
        XLAComputationConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "num_replicas",
                |m: &XLAComputationConfig| { &m.num_replicas },
                |m: &mut XLAComputationConfig| { &mut m.num_replicas },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "num_cores_per_replica",
                |m: &XLAComputationConfig| { &m.num_cores_per_replica },
                |m: &mut XLAComputationConfig| { &mut m.num_cores_per_replica },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::host_compute_metadata::HostComputeMetadata>>(
                "host_compute_metadata",
                |m: &XLAComputationConfig| { &m.host_compute_metadata },
                |m: &mut XLAComputationConfig| { &mut m.host_compute_metadata },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::xla_data::ProgramShapeProto>>(
                "program_shape",
                |m: &XLAComputationConfig| { &m.program_shape },
                |m: &mut XLAComputationConfig| { &mut m.program_shape },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::xla_data::ProgramShapeProto>>(
                "per_core_program_shape",
                |m: &XLAComputationConfig| { &m.per_core_program_shape },
                |m: &mut XLAComputationConfig| { &mut m.per_core_program_shape },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DeviceAssignment>>(
                "device_assignment",
                |m: &XLAComputationConfig| { &m.device_assignment },
                |m: &mut XLAComputationConfig| { &mut m.device_assignment },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::xla::DebugOptions>>(
                "debug_options",
                |m: &XLAComputationConfig| { &m.debug_options },
                |m: &mut XLAComputationConfig| { &mut m.debug_options },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<XLAComputationConfig>(
                "XLAComputationConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static XLAComputationConfig {
        static instance: ::protobuf::rt::LazyV2<XLAComputationConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(XLAComputationConfig::new)
    }
}

impl ::protobuf::Clear for XLAComputationConfig {
    fn clear(&mut self) {
        self.num_replicas = 0;
        self.num_cores_per_replica = 0;
        self.host_compute_metadata.clear();
        self.program_shape.clear();
        self.per_core_program_shape.clear();
        self.device_assignment.clear();
        self.debug_options.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for XLAComputationConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for XLAComputationConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct XLAComputation {
    // message fields
    pub config: ::protobuf::SingularPtrField<XLAComputationConfig>,
    pub hlo_snapshot: ::protobuf::SingularPtrField<super::hlo::HloSnapshot>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a XLAComputation {
    fn default() -> &'a XLAComputation {
        <XLAComputation as ::protobuf::Message>::default_instance()
    }
}

impl XLAComputation {
    pub fn new() -> XLAComputation {
        ::std::default::Default::default()
    }

    // .xrt.XLAComputationConfig config = 1;


    pub fn get_config(&self) -> &XLAComputationConfig {
        self.config.as_ref().unwrap_or_else(|| <XLAComputationConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_config(&mut self) {
        self.config.clear();
    }

    pub fn has_config(&self) -> bool {
        self.config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_config(&mut self, v: XLAComputationConfig) {
        self.config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_config(&mut self) -> &mut XLAComputationConfig {
        if self.config.is_none() {
            self.config.set_default();
        }
        self.config.as_mut().unwrap()
    }

    // Take field
    pub fn take_config(&mut self) -> XLAComputationConfig {
        self.config.take().unwrap_or_else(|| XLAComputationConfig::new())
    }

    // .xla.HloSnapshot hlo_snapshot = 2;


    pub fn get_hlo_snapshot(&self) -> &super::hlo::HloSnapshot {
        self.hlo_snapshot.as_ref().unwrap_or_else(|| <super::hlo::HloSnapshot as ::protobuf::Message>::default_instance())
    }
    pub fn clear_hlo_snapshot(&mut self) {
        self.hlo_snapshot.clear();
    }

    pub fn has_hlo_snapshot(&self) -> bool {
        self.hlo_snapshot.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hlo_snapshot(&mut self, v: super::hlo::HloSnapshot) {
        self.hlo_snapshot = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hlo_snapshot(&mut self) -> &mut super::hlo::HloSnapshot {
        if self.hlo_snapshot.is_none() {
            self.hlo_snapshot.set_default();
        }
        self.hlo_snapshot.as_mut().unwrap()
    }

    // Take field
    pub fn take_hlo_snapshot(&mut self) -> super::hlo::HloSnapshot {
        self.hlo_snapshot.take().unwrap_or_else(|| super::hlo::HloSnapshot::new())
    }
}

impl ::protobuf::Message for XLAComputation {
    fn is_initialized(&self) -> bool {
        for v in &self.config {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.hlo_snapshot {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.config)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.hlo_snapshot)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.hlo_snapshot.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.config.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.hlo_snapshot.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> XLAComputation {
        XLAComputation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<XLAComputationConfig>>(
                "config",
                |m: &XLAComputation| { &m.config },
                |m: &mut XLAComputation| { &mut m.config },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::hlo::HloSnapshot>>(
                "hlo_snapshot",
                |m: &XLAComputation| { &m.hlo_snapshot },
                |m: &mut XLAComputation| { &mut m.hlo_snapshot },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<XLAComputation>(
                "XLAComputation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static XLAComputation {
        static instance: ::protobuf::rt::LazyV2<XLAComputation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(XLAComputation::new)
    }
}

impl ::protobuf::Clear for XLAComputation {
    fn clear(&mut self) {
        self.config.clear();
        self.hlo_snapshot.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for XLAComputation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for XLAComputation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct XLAAllocation {
    // message fields
    pub value: ::protobuf::SingularPtrField<super::xla_data::LiteralProto>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a XLAAllocation {
    fn default() -> &'a XLAAllocation {
        <XLAAllocation as ::protobuf::Message>::default_instance()
    }
}

impl XLAAllocation {
    pub fn new() -> XLAAllocation {
        ::std::default::Default::default()
    }

    // .xla.LiteralProto value = 2;


    pub fn get_value(&self) -> &super::xla_data::LiteralProto {
        self.value.as_ref().unwrap_or_else(|| <super::xla_data::LiteralProto as ::protobuf::Message>::default_instance())
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: super::xla_data::LiteralProto) {
        self.value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut super::xla_data::LiteralProto {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> super::xla_data::LiteralProto {
        self.value.take().unwrap_or_else(|| super::xla_data::LiteralProto::new())
    }
}

impl ::protobuf::Message for XLAAllocation {
    fn is_initialized(&self) -> bool {
        for v in &self.value {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.value.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> XLAAllocation {
        XLAAllocation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::xla_data::LiteralProto>>(
                "value",
                |m: &XLAAllocation| { &m.value },
                |m: &mut XLAAllocation| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<XLAAllocation>(
                "XLAAllocation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static XLAAllocation {
        static instance: ::protobuf::rt::LazyV2<XLAAllocation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(XLAAllocation::new)
    }
}

impl ::protobuf::Clear for XLAAllocation {
    fn clear(&mut self) {
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for XLAAllocation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for XLAAllocation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct XLATupleNode {
    // message fields
    pub input_index: i32,
    pub release_input_handle: bool,
    pub tuples: ::protobuf::RepeatedField<XLATupleNode>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a XLATupleNode {
    fn default() -> &'a XLATupleNode {
        <XLATupleNode as ::protobuf::Message>::default_instance()
    }
}

impl XLATupleNode {
    pub fn new() -> XLATupleNode {
        ::std::default::Default::default()
    }

    // int32 input_index = 1;


    pub fn get_input_index(&self) -> i32 {
        self.input_index
    }
    pub fn clear_input_index(&mut self) {
        self.input_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_input_index(&mut self, v: i32) {
        self.input_index = v;
    }

    // bool release_input_handle = 2;


    pub fn get_release_input_handle(&self) -> bool {
        self.release_input_handle
    }
    pub fn clear_release_input_handle(&mut self) {
        self.release_input_handle = false;
    }

    // Param is passed by value, moved
    pub fn set_release_input_handle(&mut self, v: bool) {
        self.release_input_handle = v;
    }

    // repeated .xrt.XLATupleNode tuples = 3;


    pub fn get_tuples(&self) -> &[XLATupleNode] {
        &self.tuples
    }
    pub fn clear_tuples(&mut self) {
        self.tuples.clear();
    }

    // Param is passed by value, moved
    pub fn set_tuples(&mut self, v: ::protobuf::RepeatedField<XLATupleNode>) {
        self.tuples = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tuples(&mut self) -> &mut ::protobuf::RepeatedField<XLATupleNode> {
        &mut self.tuples
    }

    // Take field
    pub fn take_tuples(&mut self) -> ::protobuf::RepeatedField<XLATupleNode> {
        ::std::mem::replace(&mut self.tuples, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for XLATupleNode {
    fn is_initialized(&self) -> bool {
        for v in &self.tuples {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.input_index = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.release_input_handle = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tuples)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.input_index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.input_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.release_input_handle != false {
            my_size += 2;
        }
        for value in &self.tuples {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.input_index != 0 {
            os.write_int32(1, self.input_index)?;
        }
        if self.release_input_handle != false {
            os.write_bool(2, self.release_input_handle)?;
        }
        for v in &self.tuples {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> XLATupleNode {
        XLATupleNode::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "input_index",
                |m: &XLATupleNode| { &m.input_index },
                |m: &mut XLATupleNode| { &mut m.input_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "release_input_handle",
                |m: &XLATupleNode| { &m.release_input_handle },
                |m: &mut XLATupleNode| { &mut m.release_input_handle },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<XLATupleNode>>(
                "tuples",
                |m: &XLATupleNode| { &m.tuples },
                |m: &mut XLATupleNode| { &mut m.tuples },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<XLATupleNode>(
                "XLATupleNode",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static XLATupleNode {
        static instance: ::protobuf::rt::LazyV2<XLATupleNode> = ::protobuf::rt::LazyV2::INIT;
        instance.get(XLATupleNode::new)
    }
}

impl ::protobuf::Clear for XLATupleNode {
    fn clear(&mut self) {
        self.input_index = 0;
        self.release_input_handle = false;
        self.tuples.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for XLATupleNode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for XLATupleNode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct XRTExecutionConfig {
    // message fields
    pub device_ordinal: i32,
    pub core_index_in_replica: i32,
    pub execution_instance_key: ::std::string::String,
    pub rng_seed: u32,
    pub release_input_handles: bool,
    pub release_compilation_handle: bool,
    pub return_exploded_tuple: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a XRTExecutionConfig {
    fn default() -> &'a XRTExecutionConfig {
        <XRTExecutionConfig as ::protobuf::Message>::default_instance()
    }
}

impl XRTExecutionConfig {
    pub fn new() -> XRTExecutionConfig {
        ::std::default::Default::default()
    }

    // int32 device_ordinal = 1;


    pub fn get_device_ordinal(&self) -> i32 {
        self.device_ordinal
    }
    pub fn clear_device_ordinal(&mut self) {
        self.device_ordinal = 0;
    }

    // Param is passed by value, moved
    pub fn set_device_ordinal(&mut self, v: i32) {
        self.device_ordinal = v;
    }

    // int32 core_index_in_replica = 2;


    pub fn get_core_index_in_replica(&self) -> i32 {
        self.core_index_in_replica
    }
    pub fn clear_core_index_in_replica(&mut self) {
        self.core_index_in_replica = 0;
    }

    // Param is passed by value, moved
    pub fn set_core_index_in_replica(&mut self, v: i32) {
        self.core_index_in_replica = v;
    }

    // string execution_instance_key = 3;


    pub fn get_execution_instance_key(&self) -> &str {
        &self.execution_instance_key
    }
    pub fn clear_execution_instance_key(&mut self) {
        self.execution_instance_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_execution_instance_key(&mut self, v: ::std::string::String) {
        self.execution_instance_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_execution_instance_key(&mut self) -> &mut ::std::string::String {
        &mut self.execution_instance_key
    }

    // Take field
    pub fn take_execution_instance_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.execution_instance_key, ::std::string::String::new())
    }

    // uint32 rng_seed = 4;


    pub fn get_rng_seed(&self) -> u32 {
        self.rng_seed
    }
    pub fn clear_rng_seed(&mut self) {
        self.rng_seed = 0;
    }

    // Param is passed by value, moved
    pub fn set_rng_seed(&mut self, v: u32) {
        self.rng_seed = v;
    }

    // bool release_input_handles = 5;


    pub fn get_release_input_handles(&self) -> bool {
        self.release_input_handles
    }
    pub fn clear_release_input_handles(&mut self) {
        self.release_input_handles = false;
    }

    // Param is passed by value, moved
    pub fn set_release_input_handles(&mut self, v: bool) {
        self.release_input_handles = v;
    }

    // bool release_compilation_handle = 6;


    pub fn get_release_compilation_handle(&self) -> bool {
        self.release_compilation_handle
    }
    pub fn clear_release_compilation_handle(&mut self) {
        self.release_compilation_handle = false;
    }

    // Param is passed by value, moved
    pub fn set_release_compilation_handle(&mut self, v: bool) {
        self.release_compilation_handle = v;
    }

    // bool return_exploded_tuple = 7;


    pub fn get_return_exploded_tuple(&self) -> bool {
        self.return_exploded_tuple
    }
    pub fn clear_return_exploded_tuple(&mut self) {
        self.return_exploded_tuple = false;
    }

    // Param is passed by value, moved
    pub fn set_return_exploded_tuple(&mut self, v: bool) {
        self.return_exploded_tuple = v;
    }
}

impl ::protobuf::Message for XRTExecutionConfig {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.device_ordinal = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.core_index_in_replica = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.execution_instance_key)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.rng_seed = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.release_input_handles = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.release_compilation_handle = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.return_exploded_tuple = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.device_ordinal != 0 {
            my_size += ::protobuf::rt::value_size(1, self.device_ordinal, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.core_index_in_replica != 0 {
            my_size += ::protobuf::rt::value_size(2, self.core_index_in_replica, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.execution_instance_key.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.execution_instance_key);
        }
        if self.rng_seed != 0 {
            my_size += ::protobuf::rt::value_size(4, self.rng_seed, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.release_input_handles != false {
            my_size += 2;
        }
        if self.release_compilation_handle != false {
            my_size += 2;
        }
        if self.return_exploded_tuple != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.device_ordinal != 0 {
            os.write_int32(1, self.device_ordinal)?;
        }
        if self.core_index_in_replica != 0 {
            os.write_int32(2, self.core_index_in_replica)?;
        }
        if !self.execution_instance_key.is_empty() {
            os.write_string(3, &self.execution_instance_key)?;
        }
        if self.rng_seed != 0 {
            os.write_uint32(4, self.rng_seed)?;
        }
        if self.release_input_handles != false {
            os.write_bool(5, self.release_input_handles)?;
        }
        if self.release_compilation_handle != false {
            os.write_bool(6, self.release_compilation_handle)?;
        }
        if self.return_exploded_tuple != false {
            os.write_bool(7, self.return_exploded_tuple)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> XRTExecutionConfig {
        XRTExecutionConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "device_ordinal",
                |m: &XRTExecutionConfig| { &m.device_ordinal },
                |m: &mut XRTExecutionConfig| { &mut m.device_ordinal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "core_index_in_replica",
                |m: &XRTExecutionConfig| { &m.core_index_in_replica },
                |m: &mut XRTExecutionConfig| { &mut m.core_index_in_replica },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "execution_instance_key",
                |m: &XRTExecutionConfig| { &m.execution_instance_key },
                |m: &mut XRTExecutionConfig| { &mut m.execution_instance_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "rng_seed",
                |m: &XRTExecutionConfig| { &m.rng_seed },
                |m: &mut XRTExecutionConfig| { &mut m.rng_seed },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "release_input_handles",
                |m: &XRTExecutionConfig| { &m.release_input_handles },
                |m: &mut XRTExecutionConfig| { &mut m.release_input_handles },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "release_compilation_handle",
                |m: &XRTExecutionConfig| { &m.release_compilation_handle },
                |m: &mut XRTExecutionConfig| { &mut m.release_compilation_handle },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "return_exploded_tuple",
                |m: &XRTExecutionConfig| { &m.return_exploded_tuple },
                |m: &mut XRTExecutionConfig| { &mut m.return_exploded_tuple },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<XRTExecutionConfig>(
                "XRTExecutionConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static XRTExecutionConfig {
        static instance: ::protobuf::rt::LazyV2<XRTExecutionConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(XRTExecutionConfig::new)
    }
}

impl ::protobuf::Clear for XRTExecutionConfig {
    fn clear(&mut self) {
        self.device_ordinal = 0;
        self.core_index_in_replica = 0;
        self.execution_instance_key.clear();
        self.rng_seed = 0;
        self.release_input_handles = false;
        self.release_compilation_handle = false;
        self.return_exploded_tuple = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for XRTExecutionConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for XRTExecutionConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct XRTChainedExecuteConfig {
    // message fields
    pub rng_seed: u32,
    pub core_index_in_replica: i32,
    pub execution_instance_key: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a XRTChainedExecuteConfig {
    fn default() -> &'a XRTChainedExecuteConfig {
        <XRTChainedExecuteConfig as ::protobuf::Message>::default_instance()
    }
}

impl XRTChainedExecuteConfig {
    pub fn new() -> XRTChainedExecuteConfig {
        ::std::default::Default::default()
    }

    // uint32 rng_seed = 1;


    pub fn get_rng_seed(&self) -> u32 {
        self.rng_seed
    }
    pub fn clear_rng_seed(&mut self) {
        self.rng_seed = 0;
    }

    // Param is passed by value, moved
    pub fn set_rng_seed(&mut self, v: u32) {
        self.rng_seed = v;
    }

    // int32 core_index_in_replica = 2;


    pub fn get_core_index_in_replica(&self) -> i32 {
        self.core_index_in_replica
    }
    pub fn clear_core_index_in_replica(&mut self) {
        self.core_index_in_replica = 0;
    }

    // Param is passed by value, moved
    pub fn set_core_index_in_replica(&mut self, v: i32) {
        self.core_index_in_replica = v;
    }

    // string execution_instance_key = 3;


    pub fn get_execution_instance_key(&self) -> &str {
        &self.execution_instance_key
    }
    pub fn clear_execution_instance_key(&mut self) {
        self.execution_instance_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_execution_instance_key(&mut self, v: ::std::string::String) {
        self.execution_instance_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_execution_instance_key(&mut self) -> &mut ::std::string::String {
        &mut self.execution_instance_key
    }

    // Take field
    pub fn take_execution_instance_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.execution_instance_key, ::std::string::String::new())
    }
}

impl ::protobuf::Message for XRTChainedExecuteConfig {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.rng_seed = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.core_index_in_replica = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.execution_instance_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.rng_seed != 0 {
            my_size += ::protobuf::rt::value_size(1, self.rng_seed, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.core_index_in_replica != 0 {
            my_size += ::protobuf::rt::value_size(2, self.core_index_in_replica, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.execution_instance_key.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.execution_instance_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.rng_seed != 0 {
            os.write_uint32(1, self.rng_seed)?;
        }
        if self.core_index_in_replica != 0 {
            os.write_int32(2, self.core_index_in_replica)?;
        }
        if !self.execution_instance_key.is_empty() {
            os.write_string(3, &self.execution_instance_key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> XRTChainedExecuteConfig {
        XRTChainedExecuteConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "rng_seed",
                |m: &XRTChainedExecuteConfig| { &m.rng_seed },
                |m: &mut XRTChainedExecuteConfig| { &mut m.rng_seed },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "core_index_in_replica",
                |m: &XRTChainedExecuteConfig| { &m.core_index_in_replica },
                |m: &mut XRTChainedExecuteConfig| { &mut m.core_index_in_replica },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "execution_instance_key",
                |m: &XRTChainedExecuteConfig| { &m.execution_instance_key },
                |m: &mut XRTChainedExecuteConfig| { &mut m.execution_instance_key },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<XRTChainedExecuteConfig>(
                "XRTChainedExecuteConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static XRTChainedExecuteConfig {
        static instance: ::protobuf::rt::LazyV2<XRTChainedExecuteConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(XRTChainedExecuteConfig::new)
    }
}

impl ::protobuf::Clear for XRTChainedExecuteConfig {
    fn clear(&mut self) {
        self.rng_seed = 0;
        self.core_index_in_replica = 0;
        self.execution_instance_key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for XRTChainedExecuteConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for XRTChainedExecuteConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct XRTChainedExecuteOp {
    // message fields
    pub outputs: ::protobuf::RepeatedField<XRTChainedExecuteOp_Output>,
    pub inputs: ::protobuf::RepeatedField<XRTChainedExecuteOp_Input>,
    // message oneof groups
    pub op_oneof: ::std::option::Option<XRTChainedExecuteOp_oneof_op_oneof>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a XRTChainedExecuteOp {
    fn default() -> &'a XRTChainedExecuteOp {
        <XRTChainedExecuteOp as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum XRTChainedExecuteOp_oneof_op_oneof {
    data_handle(i64),
    computation_handle(i64),
}

impl XRTChainedExecuteOp {
    pub fn new() -> XRTChainedExecuteOp {
        ::std::default::Default::default()
    }

    // int64 data_handle = 1;


    pub fn get_data_handle(&self) -> i64 {
        match self.op_oneof {
            ::std::option::Option::Some(XRTChainedExecuteOp_oneof_op_oneof::data_handle(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_data_handle(&mut self) {
        self.op_oneof = ::std::option::Option::None;
    }

    pub fn has_data_handle(&self) -> bool {
        match self.op_oneof {
            ::std::option::Option::Some(XRTChainedExecuteOp_oneof_op_oneof::data_handle(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_data_handle(&mut self, v: i64) {
        self.op_oneof = ::std::option::Option::Some(XRTChainedExecuteOp_oneof_op_oneof::data_handle(v))
    }

    // int64 computation_handle = 2;


    pub fn get_computation_handle(&self) -> i64 {
        match self.op_oneof {
            ::std::option::Option::Some(XRTChainedExecuteOp_oneof_op_oneof::computation_handle(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_computation_handle(&mut self) {
        self.op_oneof = ::std::option::Option::None;
    }

    pub fn has_computation_handle(&self) -> bool {
        match self.op_oneof {
            ::std::option::Option::Some(XRTChainedExecuteOp_oneof_op_oneof::computation_handle(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_computation_handle(&mut self, v: i64) {
        self.op_oneof = ::std::option::Option::Some(XRTChainedExecuteOp_oneof_op_oneof::computation_handle(v))
    }

    // repeated .xrt.XRTChainedExecuteOp.Output outputs = 3;


    pub fn get_outputs(&self) -> &[XRTChainedExecuteOp_Output] {
        &self.outputs
    }
    pub fn clear_outputs(&mut self) {
        self.outputs.clear();
    }

    // Param is passed by value, moved
    pub fn set_outputs(&mut self, v: ::protobuf::RepeatedField<XRTChainedExecuteOp_Output>) {
        self.outputs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_outputs(&mut self) -> &mut ::protobuf::RepeatedField<XRTChainedExecuteOp_Output> {
        &mut self.outputs
    }

    // Take field
    pub fn take_outputs(&mut self) -> ::protobuf::RepeatedField<XRTChainedExecuteOp_Output> {
        ::std::mem::replace(&mut self.outputs, ::protobuf::RepeatedField::new())
    }

    // repeated .xrt.XRTChainedExecuteOp.Input inputs = 4;


    pub fn get_inputs(&self) -> &[XRTChainedExecuteOp_Input] {
        &self.inputs
    }
    pub fn clear_inputs(&mut self) {
        self.inputs.clear();
    }

    // Param is passed by value, moved
    pub fn set_inputs(&mut self, v: ::protobuf::RepeatedField<XRTChainedExecuteOp_Input>) {
        self.inputs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_inputs(&mut self) -> &mut ::protobuf::RepeatedField<XRTChainedExecuteOp_Input> {
        &mut self.inputs
    }

    // Take field
    pub fn take_inputs(&mut self) -> ::protobuf::RepeatedField<XRTChainedExecuteOp_Input> {
        ::std::mem::replace(&mut self.inputs, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for XRTChainedExecuteOp {
    fn is_initialized(&self) -> bool {
        for v in &self.outputs {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.inputs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.op_oneof = ::std::option::Option::Some(XRTChainedExecuteOp_oneof_op_oneof::data_handle(is.read_int64()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.op_oneof = ::std::option::Option::Some(XRTChainedExecuteOp_oneof_op_oneof::computation_handle(is.read_int64()?));
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.outputs)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.inputs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.outputs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.inputs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let ::std::option::Option::Some(ref v) = self.op_oneof {
            match v {
                &XRTChainedExecuteOp_oneof_op_oneof::data_handle(v) => {
                    my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &XRTChainedExecuteOp_oneof_op_oneof::computation_handle(v) => {
                    my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.outputs {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.inputs {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let ::std::option::Option::Some(ref v) = self.op_oneof {
            match v {
                &XRTChainedExecuteOp_oneof_op_oneof::data_handle(v) => {
                    os.write_int64(1, v)?;
                },
                &XRTChainedExecuteOp_oneof_op_oneof::computation_handle(v) => {
                    os.write_int64(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> XRTChainedExecuteOp {
        XRTChainedExecuteOp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor::<_>(
                "data_handle",
                XRTChainedExecuteOp::has_data_handle,
                XRTChainedExecuteOp::get_data_handle,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor::<_>(
                "computation_handle",
                XRTChainedExecuteOp::has_computation_handle,
                XRTChainedExecuteOp::get_computation_handle,
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<XRTChainedExecuteOp_Output>>(
                "outputs",
                |m: &XRTChainedExecuteOp| { &m.outputs },
                |m: &mut XRTChainedExecuteOp| { &mut m.outputs },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<XRTChainedExecuteOp_Input>>(
                "inputs",
                |m: &XRTChainedExecuteOp| { &m.inputs },
                |m: &mut XRTChainedExecuteOp| { &mut m.inputs },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<XRTChainedExecuteOp>(
                "XRTChainedExecuteOp",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static XRTChainedExecuteOp {
        static instance: ::protobuf::rt::LazyV2<XRTChainedExecuteOp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(XRTChainedExecuteOp::new)
    }
}

impl ::protobuf::Clear for XRTChainedExecuteOp {
    fn clear(&mut self) {
        self.op_oneof = ::std::option::Option::None;
        self.op_oneof = ::std::option::Option::None;
        self.outputs.clear();
        self.inputs.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for XRTChainedExecuteOp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for XRTChainedExecuteOp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct XRTChainedExecuteOp_Input {
    // message fields
    pub op_index: i64,
    pub output_index: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a XRTChainedExecuteOp_Input {
    fn default() -> &'a XRTChainedExecuteOp_Input {
        <XRTChainedExecuteOp_Input as ::protobuf::Message>::default_instance()
    }
}

impl XRTChainedExecuteOp_Input {
    pub fn new() -> XRTChainedExecuteOp_Input {
        ::std::default::Default::default()
    }

    // int64 op_index = 1;


    pub fn get_op_index(&self) -> i64 {
        self.op_index
    }
    pub fn clear_op_index(&mut self) {
        self.op_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_op_index(&mut self, v: i64) {
        self.op_index = v;
    }

    // int64 output_index = 2;


    pub fn get_output_index(&self) -> i64 {
        self.output_index
    }
    pub fn clear_output_index(&mut self) {
        self.output_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_output_index(&mut self, v: i64) {
        self.output_index = v;
    }
}

impl ::protobuf::Message for XRTChainedExecuteOp_Input {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.op_index = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.output_index = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.op_index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.op_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.output_index != 0 {
            my_size += ::protobuf::rt::value_size(2, self.output_index, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.op_index != 0 {
            os.write_int64(1, self.op_index)?;
        }
        if self.output_index != 0 {
            os.write_int64(2, self.output_index)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> XRTChainedExecuteOp_Input {
        XRTChainedExecuteOp_Input::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "op_index",
                |m: &XRTChainedExecuteOp_Input| { &m.op_index },
                |m: &mut XRTChainedExecuteOp_Input| { &mut m.op_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "output_index",
                |m: &XRTChainedExecuteOp_Input| { &m.output_index },
                |m: &mut XRTChainedExecuteOp_Input| { &mut m.output_index },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<XRTChainedExecuteOp_Input>(
                "XRTChainedExecuteOp.Input",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static XRTChainedExecuteOp_Input {
        static instance: ::protobuf::rt::LazyV2<XRTChainedExecuteOp_Input> = ::protobuf::rt::LazyV2::INIT;
        instance.get(XRTChainedExecuteOp_Input::new)
    }
}

impl ::protobuf::Clear for XRTChainedExecuteOp_Input {
    fn clear(&mut self) {
        self.op_index = 0;
        self.output_index = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for XRTChainedExecuteOp_Input {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for XRTChainedExecuteOp_Input {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct XRTChainedExecuteOp_Output {
    // message fields
    pub output_index: i64,
    pub result_index: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a XRTChainedExecuteOp_Output {
    fn default() -> &'a XRTChainedExecuteOp_Output {
        <XRTChainedExecuteOp_Output as ::protobuf::Message>::default_instance()
    }
}

impl XRTChainedExecuteOp_Output {
    pub fn new() -> XRTChainedExecuteOp_Output {
        ::std::default::Default::default()
    }

    // int64 output_index = 1;


    pub fn get_output_index(&self) -> i64 {
        self.output_index
    }
    pub fn clear_output_index(&mut self) {
        self.output_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_output_index(&mut self, v: i64) {
        self.output_index = v;
    }

    // int64 result_index = 2;


    pub fn get_result_index(&self) -> i64 {
        self.result_index
    }
    pub fn clear_result_index(&mut self) {
        self.result_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_result_index(&mut self, v: i64) {
        self.result_index = v;
    }
}

impl ::protobuf::Message for XRTChainedExecuteOp_Output {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.output_index = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.result_index = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.output_index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.output_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.result_index != 0 {
            my_size += ::protobuf::rt::value_size(2, self.result_index, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.output_index != 0 {
            os.write_int64(1, self.output_index)?;
        }
        if self.result_index != 0 {
            os.write_int64(2, self.result_index)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> XRTChainedExecuteOp_Output {
        XRTChainedExecuteOp_Output::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "output_index",
                |m: &XRTChainedExecuteOp_Output| { &m.output_index },
                |m: &mut XRTChainedExecuteOp_Output| { &mut m.output_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "result_index",
                |m: &XRTChainedExecuteOp_Output| { &m.result_index },
                |m: &mut XRTChainedExecuteOp_Output| { &mut m.result_index },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<XRTChainedExecuteOp_Output>(
                "XRTChainedExecuteOp.Output",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static XRTChainedExecuteOp_Output {
        static instance: ::protobuf::rt::LazyV2<XRTChainedExecuteOp_Output> = ::protobuf::rt::LazyV2::INIT;
        instance.get(XRTChainedExecuteOp_Output::new)
    }
}

impl ::protobuf::Clear for XRTChainedExecuteOp_Output {
    fn clear(&mut self) {
        self.output_index = 0;
        self.result_index = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for XRTChainedExecuteOp_Output {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for XRTChainedExecuteOp_Output {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct XRTChainedExecutePlan {
    // message fields
    pub ops: ::protobuf::RepeatedField<XRTChainedExecuteOp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a XRTChainedExecutePlan {
    fn default() -> &'a XRTChainedExecutePlan {
        <XRTChainedExecutePlan as ::protobuf::Message>::default_instance()
    }
}

impl XRTChainedExecutePlan {
    pub fn new() -> XRTChainedExecutePlan {
        ::std::default::Default::default()
    }

    // repeated .xrt.XRTChainedExecuteOp ops = 1;


    pub fn get_ops(&self) -> &[XRTChainedExecuteOp] {
        &self.ops
    }
    pub fn clear_ops(&mut self) {
        self.ops.clear();
    }

    // Param is passed by value, moved
    pub fn set_ops(&mut self, v: ::protobuf::RepeatedField<XRTChainedExecuteOp>) {
        self.ops = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ops(&mut self) -> &mut ::protobuf::RepeatedField<XRTChainedExecuteOp> {
        &mut self.ops
    }

    // Take field
    pub fn take_ops(&mut self) -> ::protobuf::RepeatedField<XRTChainedExecuteOp> {
        ::std::mem::replace(&mut self.ops, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for XRTChainedExecutePlan {
    fn is_initialized(&self) -> bool {
        for v in &self.ops {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.ops)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.ops {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.ops {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> XRTChainedExecutePlan {
        XRTChainedExecutePlan::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<XRTChainedExecuteOp>>(
                "ops",
                |m: &XRTChainedExecutePlan| { &m.ops },
                |m: &mut XRTChainedExecutePlan| { &mut m.ops },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<XRTChainedExecutePlan>(
                "XRTChainedExecutePlan",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static XRTChainedExecutePlan {
        static instance: ::protobuf::rt::LazyV2<XRTChainedExecutePlan> = ::protobuf::rt::LazyV2::INIT;
        instance.get(XRTChainedExecutePlan::new)
    }
}

impl ::protobuf::Clear for XRTChainedExecutePlan {
    fn clear(&mut self) {
        self.ops.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for XRTChainedExecutePlan {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for XRTChainedExecutePlan {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!tensorflow/compiler/xrt/xrt.proto\x12\x03xrt\x1a6tensorflow/compiler/\
    tf2xla/host_compute_metadata.proto\x1a)tensorflow/compiler/xla/service/h\
    lo.proto\x1a!tensorflow/compiler/xla/xla.proto\x1a&tensorflow/compiler/x\
    la/xla_data.proto\"\x99\x02\n\x10DeviceAssignment\x12X\n\x13computation_\
    devices\x18\x01\x20\x03(\x0b2'.xrt.DeviceAssignment.ComputationDeviceR\
    \x12computationDevices\x1a\xaa\x01\n\x11ComputationDevice\x12f\n\x0frepl\
    ica_devices\x18\x01\x20\x03(\x0b2=.xrt.DeviceAssignment.ComputationDevic\
    e.DeviceMeshCoordinatesR\x0ereplicaDevices\x1a-\n\x15DeviceMeshCoordinat\
    es\x12\x14\n\x05value\x18\x01\x20\x03(\x05R\x05value\"\xce\x03\n\x14XLAC\
    omputationConfig\x12!\n\x0cnum_replicas\x18\x01\x20\x01(\x05R\x0bnumRepl\
    icas\x121\n\x15num_cores_per_replica\x18\x02\x20\x01(\x05R\x12numCoresPe\
    rReplica\x12Z\n\x15host_compute_metadata\x18\x03\x20\x01(\x0b2&.tensorfl\
    ow.tf2xla.HostComputeMetadataR\x13hostComputeMetadata\x12;\n\rprogram_sh\
    ape\x18\x04\x20\x01(\x0b2\x16.xla.ProgramShapeProtoR\x0cprogramShape\x12\
    K\n\x16per_core_program_shape\x18\x05\x20\x03(\x0b2\x16.xla.ProgramShape\
    ProtoR\x13perCoreProgramShape\x12B\n\x11device_assignment\x18\x06\x20\
    \x01(\x0b2\x15.xrt.DeviceAssignmentR\x10deviceAssignment\x126\n\rdebug_o\
    ptions\x18\x07\x20\x01(\x0b2\x11.xla.DebugOptionsR\x0cdebugOptions\"x\n\
    \x0eXLAComputation\x121\n\x06config\x18\x01\x20\x01(\x0b2\x19.xrt.XLACom\
    putationConfigR\x06config\x123\n\x0chlo_snapshot\x18\x02\x20\x01(\x0b2\
    \x10.xla.HloSnapshotR\x0bhloSnapshot\">\n\rXLAAllocation\x12'\n\x05value\
    \x18\x02\x20\x01(\x0b2\x11.xla.LiteralProtoR\x05valueJ\x04\x08\x01\x10\
    \x02\"\x8c\x01\n\x0cXLATupleNode\x12\x1f\n\x0binput_index\x18\x01\x20\
    \x01(\x05R\ninputIndex\x120\n\x14release_input_handle\x18\x02\x20\x01(\
    \x08R\x12releaseInputHandle\x12)\n\x06tuples\x18\x03\x20\x03(\x0b2\x11.x\
    rt.XLATupleNodeR\x06tuples\"\xe5\x02\n\x12XRTExecutionConfig\x12%\n\x0ed\
    evice_ordinal\x18\x01\x20\x01(\x05R\rdeviceOrdinal\x121\n\x15core_index_\
    in_replica\x18\x02\x20\x01(\x05R\x12coreIndexInReplica\x124\n\x16executi\
    on_instance_key\x18\x03\x20\x01(\tR\x14executionInstanceKey\x12\x19\n\
    \x08rng_seed\x18\x04\x20\x01(\rR\x07rngSeed\x122\n\x15release_input_hand\
    les\x18\x05\x20\x01(\x08R\x13releaseInputHandles\x12<\n\x1arelease_compi\
    lation_handle\x18\x06\x20\x01(\x08R\x18releaseCompilationHandle\x122\n\
    \x15return_exploded_tuple\x18\x07\x20\x01(\x08R\x13returnExplodedTuple\"\
    \x9d\x01\n\x17XRTChainedExecuteConfig\x12\x19\n\x08rng_seed\x18\x01\x20\
    \x01(\rR\x07rngSeed\x121\n\x15core_index_in_replica\x18\x02\x20\x01(\x05\
    R\x12coreIndexInReplica\x124\n\x16execution_instance_key\x18\x03\x20\x01\
    (\tR\x14executionInstanceKey\"\xff\x02\n\x13XRTChainedExecuteOp\x12!\n\
    \x0bdata_handle\x18\x01\x20\x01(\x03H\0R\ndataHandle\x12/\n\x12computati\
    on_handle\x18\x02\x20\x01(\x03H\0R\x11computationHandle\x129\n\x07output\
    s\x18\x03\x20\x03(\x0b2\x1f.xrt.XRTChainedExecuteOp.OutputR\x07outputs\
    \x126\n\x06inputs\x18\x04\x20\x03(\x0b2\x1e.xrt.XRTChainedExecuteOp.Inpu\
    tR\x06inputs\x1aE\n\x05Input\x12\x19\n\x08op_index\x18\x01\x20\x01(\x03R\
    \x07opIndex\x12!\n\x0coutput_index\x18\x02\x20\x01(\x03R\x0boutputIndex\
    \x1aN\n\x06Output\x12!\n\x0coutput_index\x18\x01\x20\x01(\x03R\x0boutput\
    Index\x12!\n\x0cresult_index\x18\x02\x20\x01(\x03R\x0bresultIndexB\n\n\
    \x08op_oneof\"C\n\x15XRTChainedExecutePlan\x12*\n\x03ops\x18\x01\x20\x03\
    (\x0b2\x18.xrt.XRTChainedExecuteOpR\x03opsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
