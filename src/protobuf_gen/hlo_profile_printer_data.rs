// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow/compiler/xla/service/hlo_profile_printer_data.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct HloProfilePrinterData {
    // message fields
    pub computation_infos: ::protobuf::RepeatedField<HloProfilePrinterData_HloComputationInfo>,
    pub profile_counters_size: i64,
    pub extra_metrics: ::std::collections::HashMap<::std::string::String, i64>,
    pub entry_computation: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HloProfilePrinterData {
    fn default() -> &'a HloProfilePrinterData {
        <HloProfilePrinterData as ::protobuf::Message>::default_instance()
    }
}

impl HloProfilePrinterData {
    pub fn new() -> HloProfilePrinterData {
        ::std::default::Default::default()
    }

    // repeated .xla.HloProfilePrinterData.HloComputationInfo computation_infos = 1;


    pub fn get_computation_infos(&self) -> &[HloProfilePrinterData_HloComputationInfo] {
        &self.computation_infos
    }
    pub fn clear_computation_infos(&mut self) {
        self.computation_infos.clear();
    }

    // Param is passed by value, moved
    pub fn set_computation_infos(&mut self, v: ::protobuf::RepeatedField<HloProfilePrinterData_HloComputationInfo>) {
        self.computation_infos = v;
    }

    // Mutable pointer to the field.
    pub fn mut_computation_infos(&mut self) -> &mut ::protobuf::RepeatedField<HloProfilePrinterData_HloComputationInfo> {
        &mut self.computation_infos
    }

    // Take field
    pub fn take_computation_infos(&mut self) -> ::protobuf::RepeatedField<HloProfilePrinterData_HloComputationInfo> {
        ::std::mem::replace(&mut self.computation_infos, ::protobuf::RepeatedField::new())
    }

    // int64 profile_counters_size = 2;


    pub fn get_profile_counters_size(&self) -> i64 {
        self.profile_counters_size
    }
    pub fn clear_profile_counters_size(&mut self) {
        self.profile_counters_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_profile_counters_size(&mut self, v: i64) {
        self.profile_counters_size = v;
    }

    // repeated .xla.HloProfilePrinterData.ExtraMetricsEntry extra_metrics = 3;


    pub fn get_extra_metrics(&self) -> &::std::collections::HashMap<::std::string::String, i64> {
        &self.extra_metrics
    }
    pub fn clear_extra_metrics(&mut self) {
        self.extra_metrics.clear();
    }

    // Param is passed by value, moved
    pub fn set_extra_metrics(&mut self, v: ::std::collections::HashMap<::std::string::String, i64>) {
        self.extra_metrics = v;
    }

    // Mutable pointer to the field.
    pub fn mut_extra_metrics(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, i64> {
        &mut self.extra_metrics
    }

    // Take field
    pub fn take_extra_metrics(&mut self) -> ::std::collections::HashMap<::std::string::String, i64> {
        ::std::mem::replace(&mut self.extra_metrics, ::std::collections::HashMap::new())
    }

    // string entry_computation = 4;


    pub fn get_entry_computation(&self) -> &str {
        &self.entry_computation
    }
    pub fn clear_entry_computation(&mut self) {
        self.entry_computation.clear();
    }

    // Param is passed by value, moved
    pub fn set_entry_computation(&mut self, v: ::std::string::String) {
        self.entry_computation = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_entry_computation(&mut self) -> &mut ::std::string::String {
        &mut self.entry_computation
    }

    // Take field
    pub fn take_entry_computation(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.entry_computation, ::std::string::String::new())
    }
}

impl ::protobuf::Message for HloProfilePrinterData {
    fn is_initialized(&self) -> bool {
        for v in &self.computation_infos {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.computation_infos)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.profile_counters_size = tmp;
                },
                3 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeInt64>(wire_type, is, &mut self.extra_metrics)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.entry_computation)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.computation_infos {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.profile_counters_size != 0 {
            my_size += ::protobuf::rt::value_size(2, self.profile_counters_size, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeInt64>(3, &self.extra_metrics);
        if !self.entry_computation.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.entry_computation);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.computation_infos {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.profile_counters_size != 0 {
            os.write_int64(2, self.profile_counters_size)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeInt64>(3, &self.extra_metrics, os)?;
        if !self.entry_computation.is_empty() {
            os.write_string(4, &self.entry_computation)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HloProfilePrinterData {
        HloProfilePrinterData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HloProfilePrinterData_HloComputationInfo>>(
                "computation_infos",
                |m: &HloProfilePrinterData| { &m.computation_infos },
                |m: &mut HloProfilePrinterData| { &mut m.computation_infos },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "profile_counters_size",
                |m: &HloProfilePrinterData| { &m.profile_counters_size },
                |m: &mut HloProfilePrinterData| { &mut m.profile_counters_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeInt64>(
                "extra_metrics",
                |m: &HloProfilePrinterData| { &m.extra_metrics },
                |m: &mut HloProfilePrinterData| { &mut m.extra_metrics },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "entry_computation",
                |m: &HloProfilePrinterData| { &m.entry_computation },
                |m: &mut HloProfilePrinterData| { &mut m.entry_computation },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HloProfilePrinterData>(
                "HloProfilePrinterData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HloProfilePrinterData {
        static instance: ::protobuf::rt::LazyV2<HloProfilePrinterData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HloProfilePrinterData::new)
    }
}

impl ::protobuf::Clear for HloProfilePrinterData {
    fn clear(&mut self) {
        self.computation_infos.clear();
        self.profile_counters_size = 0;
        self.extra_metrics.clear();
        self.entry_computation.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HloProfilePrinterData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HloProfilePrinterData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HloProfilePrinterData_HloInstructionInfo {
    // message fields
    pub long_name: ::std::string::String,
    pub short_name: ::std::string::String,
    pub category: ::std::string::String,
    pub flop_count: f32,
    pub transcendental_count: f32,
    pub bytes_accessed: f32,
    pub optimal_seconds: f32,
    pub profile_index: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HloProfilePrinterData_HloInstructionInfo {
    fn default() -> &'a HloProfilePrinterData_HloInstructionInfo {
        <HloProfilePrinterData_HloInstructionInfo as ::protobuf::Message>::default_instance()
    }
}

impl HloProfilePrinterData_HloInstructionInfo {
    pub fn new() -> HloProfilePrinterData_HloInstructionInfo {
        ::std::default::Default::default()
    }

    // string long_name = 1;


    pub fn get_long_name(&self) -> &str {
        &self.long_name
    }
    pub fn clear_long_name(&mut self) {
        self.long_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_long_name(&mut self, v: ::std::string::String) {
        self.long_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_long_name(&mut self) -> &mut ::std::string::String {
        &mut self.long_name
    }

    // Take field
    pub fn take_long_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.long_name, ::std::string::String::new())
    }

    // string short_name = 2;


    pub fn get_short_name(&self) -> &str {
        &self.short_name
    }
    pub fn clear_short_name(&mut self) {
        self.short_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_short_name(&mut self, v: ::std::string::String) {
        self.short_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_short_name(&mut self) -> &mut ::std::string::String {
        &mut self.short_name
    }

    // Take field
    pub fn take_short_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.short_name, ::std::string::String::new())
    }

    // string category = 3;


    pub fn get_category(&self) -> &str {
        &self.category
    }
    pub fn clear_category(&mut self) {
        self.category.clear();
    }

    // Param is passed by value, moved
    pub fn set_category(&mut self, v: ::std::string::String) {
        self.category = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_category(&mut self) -> &mut ::std::string::String {
        &mut self.category
    }

    // Take field
    pub fn take_category(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.category, ::std::string::String::new())
    }

    // float flop_count = 4;


    pub fn get_flop_count(&self) -> f32 {
        self.flop_count
    }
    pub fn clear_flop_count(&mut self) {
        self.flop_count = 0.;
    }

    // Param is passed by value, moved
    pub fn set_flop_count(&mut self, v: f32) {
        self.flop_count = v;
    }

    // float transcendental_count = 5;


    pub fn get_transcendental_count(&self) -> f32 {
        self.transcendental_count
    }
    pub fn clear_transcendental_count(&mut self) {
        self.transcendental_count = 0.;
    }

    // Param is passed by value, moved
    pub fn set_transcendental_count(&mut self, v: f32) {
        self.transcendental_count = v;
    }

    // float bytes_accessed = 6;


    pub fn get_bytes_accessed(&self) -> f32 {
        self.bytes_accessed
    }
    pub fn clear_bytes_accessed(&mut self) {
        self.bytes_accessed = 0.;
    }

    // Param is passed by value, moved
    pub fn set_bytes_accessed(&mut self, v: f32) {
        self.bytes_accessed = v;
    }

    // float optimal_seconds = 7;


    pub fn get_optimal_seconds(&self) -> f32 {
        self.optimal_seconds
    }
    pub fn clear_optimal_seconds(&mut self) {
        self.optimal_seconds = 0.;
    }

    // Param is passed by value, moved
    pub fn set_optimal_seconds(&mut self, v: f32) {
        self.optimal_seconds = v;
    }

    // int64 profile_index = 8;


    pub fn get_profile_index(&self) -> i64 {
        self.profile_index
    }
    pub fn clear_profile_index(&mut self) {
        self.profile_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_profile_index(&mut self, v: i64) {
        self.profile_index = v;
    }
}

impl ::protobuf::Message for HloProfilePrinterData_HloInstructionInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.long_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.short_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.category)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.flop_count = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.transcendental_count = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.bytes_accessed = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.optimal_seconds = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.profile_index = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.long_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.long_name);
        }
        if !self.short_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.short_name);
        }
        if !self.category.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.category);
        }
        if self.flop_count != 0. {
            my_size += 5;
        }
        if self.transcendental_count != 0. {
            my_size += 5;
        }
        if self.bytes_accessed != 0. {
            my_size += 5;
        }
        if self.optimal_seconds != 0. {
            my_size += 5;
        }
        if self.profile_index != 0 {
            my_size += ::protobuf::rt::value_size(8, self.profile_index, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.long_name.is_empty() {
            os.write_string(1, &self.long_name)?;
        }
        if !self.short_name.is_empty() {
            os.write_string(2, &self.short_name)?;
        }
        if !self.category.is_empty() {
            os.write_string(3, &self.category)?;
        }
        if self.flop_count != 0. {
            os.write_float(4, self.flop_count)?;
        }
        if self.transcendental_count != 0. {
            os.write_float(5, self.transcendental_count)?;
        }
        if self.bytes_accessed != 0. {
            os.write_float(6, self.bytes_accessed)?;
        }
        if self.optimal_seconds != 0. {
            os.write_float(7, self.optimal_seconds)?;
        }
        if self.profile_index != 0 {
            os.write_int64(8, self.profile_index)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HloProfilePrinterData_HloInstructionInfo {
        HloProfilePrinterData_HloInstructionInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "long_name",
                |m: &HloProfilePrinterData_HloInstructionInfo| { &m.long_name },
                |m: &mut HloProfilePrinterData_HloInstructionInfo| { &mut m.long_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "short_name",
                |m: &HloProfilePrinterData_HloInstructionInfo| { &m.short_name },
                |m: &mut HloProfilePrinterData_HloInstructionInfo| { &mut m.short_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "category",
                |m: &HloProfilePrinterData_HloInstructionInfo| { &m.category },
                |m: &mut HloProfilePrinterData_HloInstructionInfo| { &mut m.category },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "flop_count",
                |m: &HloProfilePrinterData_HloInstructionInfo| { &m.flop_count },
                |m: &mut HloProfilePrinterData_HloInstructionInfo| { &mut m.flop_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "transcendental_count",
                |m: &HloProfilePrinterData_HloInstructionInfo| { &m.transcendental_count },
                |m: &mut HloProfilePrinterData_HloInstructionInfo| { &mut m.transcendental_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "bytes_accessed",
                |m: &HloProfilePrinterData_HloInstructionInfo| { &m.bytes_accessed },
                |m: &mut HloProfilePrinterData_HloInstructionInfo| { &mut m.bytes_accessed },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "optimal_seconds",
                |m: &HloProfilePrinterData_HloInstructionInfo| { &m.optimal_seconds },
                |m: &mut HloProfilePrinterData_HloInstructionInfo| { &mut m.optimal_seconds },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "profile_index",
                |m: &HloProfilePrinterData_HloInstructionInfo| { &m.profile_index },
                |m: &mut HloProfilePrinterData_HloInstructionInfo| { &mut m.profile_index },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HloProfilePrinterData_HloInstructionInfo>(
                "HloProfilePrinterData.HloInstructionInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HloProfilePrinterData_HloInstructionInfo {
        static instance: ::protobuf::rt::LazyV2<HloProfilePrinterData_HloInstructionInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HloProfilePrinterData_HloInstructionInfo::new)
    }
}

impl ::protobuf::Clear for HloProfilePrinterData_HloInstructionInfo {
    fn clear(&mut self) {
        self.long_name.clear();
        self.short_name.clear();
        self.category.clear();
        self.flop_count = 0.;
        self.transcendental_count = 0.;
        self.bytes_accessed = 0.;
        self.optimal_seconds = 0.;
        self.profile_index = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HloProfilePrinterData_HloInstructionInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HloProfilePrinterData_HloInstructionInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HloProfilePrinterData_HloComputationInfo {
    // message fields
    pub name: ::std::string::String,
    pub profile_index: i64,
    pub instruction_infos: ::protobuf::RepeatedField<HloProfilePrinterData_HloInstructionInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HloProfilePrinterData_HloComputationInfo {
    fn default() -> &'a HloProfilePrinterData_HloComputationInfo {
        <HloProfilePrinterData_HloComputationInfo as ::protobuf::Message>::default_instance()
    }
}

impl HloProfilePrinterData_HloComputationInfo {
    pub fn new() -> HloProfilePrinterData_HloComputationInfo {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // int64 profile_index = 2;


    pub fn get_profile_index(&self) -> i64 {
        self.profile_index
    }
    pub fn clear_profile_index(&mut self) {
        self.profile_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_profile_index(&mut self, v: i64) {
        self.profile_index = v;
    }

    // repeated .xla.HloProfilePrinterData.HloInstructionInfo instruction_infos = 3;


    pub fn get_instruction_infos(&self) -> &[HloProfilePrinterData_HloInstructionInfo] {
        &self.instruction_infos
    }
    pub fn clear_instruction_infos(&mut self) {
        self.instruction_infos.clear();
    }

    // Param is passed by value, moved
    pub fn set_instruction_infos(&mut self, v: ::protobuf::RepeatedField<HloProfilePrinterData_HloInstructionInfo>) {
        self.instruction_infos = v;
    }

    // Mutable pointer to the field.
    pub fn mut_instruction_infos(&mut self) -> &mut ::protobuf::RepeatedField<HloProfilePrinterData_HloInstructionInfo> {
        &mut self.instruction_infos
    }

    // Take field
    pub fn take_instruction_infos(&mut self) -> ::protobuf::RepeatedField<HloProfilePrinterData_HloInstructionInfo> {
        ::std::mem::replace(&mut self.instruction_infos, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for HloProfilePrinterData_HloComputationInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.instruction_infos {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.profile_index = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.instruction_infos)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.profile_index != 0 {
            my_size += ::protobuf::rt::value_size(2, self.profile_index, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.instruction_infos {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.profile_index != 0 {
            os.write_int64(2, self.profile_index)?;
        }
        for v in &self.instruction_infos {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HloProfilePrinterData_HloComputationInfo {
        HloProfilePrinterData_HloComputationInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &HloProfilePrinterData_HloComputationInfo| { &m.name },
                |m: &mut HloProfilePrinterData_HloComputationInfo| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "profile_index",
                |m: &HloProfilePrinterData_HloComputationInfo| { &m.profile_index },
                |m: &mut HloProfilePrinterData_HloComputationInfo| { &mut m.profile_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HloProfilePrinterData_HloInstructionInfo>>(
                "instruction_infos",
                |m: &HloProfilePrinterData_HloComputationInfo| { &m.instruction_infos },
                |m: &mut HloProfilePrinterData_HloComputationInfo| { &mut m.instruction_infos },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HloProfilePrinterData_HloComputationInfo>(
                "HloProfilePrinterData.HloComputationInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HloProfilePrinterData_HloComputationInfo {
        static instance: ::protobuf::rt::LazyV2<HloProfilePrinterData_HloComputationInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HloProfilePrinterData_HloComputationInfo::new)
    }
}

impl ::protobuf::Clear for HloProfilePrinterData_HloComputationInfo {
    fn clear(&mut self) {
        self.name.clear();
        self.profile_index = 0;
        self.instruction_infos.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HloProfilePrinterData_HloComputationInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HloProfilePrinterData_HloComputationInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n>tensorflow/compiler/xla/service/hlo_profile_printer_data.proto\x12\
    \x03xla\"\xca\x06\n\x15HloProfilePrinterData\x12Z\n\x11computation_infos\
    \x18\x01\x20\x03(\x0b2-.xla.HloProfilePrinterData.HloComputationInfoR\
    \x10computationInfos\x122\n\x15profile_counters_size\x18\x02\x20\x01(\
    \x03R\x13profileCountersSize\x12Q\n\rextra_metrics\x18\x03\x20\x03(\x0b2\
    ,.xla.HloProfilePrinterData.ExtraMetricsEntryR\x0cextraMetrics\x12+\n\
    \x11entry_computation\x18\x04\x20\x01(\tR\x10entryComputation\x1a\xb3\
    \x02\n\x12HloInstructionInfo\x12\x1b\n\tlong_name\x18\x01\x20\x01(\tR\
    \x08longName\x12\x1d\n\nshort_name\x18\x02\x20\x01(\tR\tshortName\x12\
    \x1a\n\x08category\x18\x03\x20\x01(\tR\x08category\x12\x1d\n\nflop_count\
    \x18\x04\x20\x01(\x02R\tflopCount\x121\n\x14transcendental_count\x18\x05\
    \x20\x01(\x02R\x13transcendentalCount\x12%\n\x0ebytes_accessed\x18\x06\
    \x20\x01(\x02R\rbytesAccessed\x12'\n\x0foptimal_seconds\x18\x07\x20\x01(\
    \x02R\x0eoptimalSeconds\x12#\n\rprofile_index\x18\x08\x20\x01(\x03R\x0cp\
    rofileIndex\x1a\xa9\x01\n\x12HloComputationInfo\x12\x12\n\x04name\x18\
    \x01\x20\x01(\tR\x04name\x12#\n\rprofile_index\x18\x02\x20\x01(\x03R\x0c\
    profileIndex\x12Z\n\x11instruction_infos\x18\x03\x20\x03(\x0b2-.xla.HloP\
    rofilePrinterData.HloInstructionInfoR\x10instructionInfos\x1a?\n\x11Extr\
    aMetricsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05v\
    alue\x18\x02\x20\x01(\x03R\x05value:\x028\x01B\x03\xf8\x01\x01b\x06proto\
    3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
