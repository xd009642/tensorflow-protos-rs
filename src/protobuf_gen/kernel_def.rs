// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow/core/framework/kernel_def.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct KernelDef {
    // message fields
    pub op: ::std::string::String,
    pub device_type: ::std::string::String,
    pub constraint: ::protobuf::RepeatedField<KernelDef_AttrConstraint>,
    pub host_memory_arg: ::protobuf::RepeatedField<::std::string::String>,
    pub label: ::std::string::String,
    pub priority: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KernelDef {
    fn default() -> &'a KernelDef {
        <KernelDef as ::protobuf::Message>::default_instance()
    }
}

impl KernelDef {
    pub fn new() -> KernelDef {
        ::std::default::Default::default()
    }

    // string op = 1;


    pub fn get_op(&self) -> &str {
        &self.op
    }
    pub fn clear_op(&mut self) {
        self.op.clear();
    }

    // Param is passed by value, moved
    pub fn set_op(&mut self, v: ::std::string::String) {
        self.op = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_op(&mut self) -> &mut ::std::string::String {
        &mut self.op
    }

    // Take field
    pub fn take_op(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.op, ::std::string::String::new())
    }

    // string device_type = 2;


    pub fn get_device_type(&self) -> &str {
        &self.device_type
    }
    pub fn clear_device_type(&mut self) {
        self.device_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_device_type(&mut self, v: ::std::string::String) {
        self.device_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_type(&mut self) -> &mut ::std::string::String {
        &mut self.device_type
    }

    // Take field
    pub fn take_device_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.device_type, ::std::string::String::new())
    }

    // repeated .tensorflow.KernelDef.AttrConstraint constraint = 3;


    pub fn get_constraint(&self) -> &[KernelDef_AttrConstraint] {
        &self.constraint
    }
    pub fn clear_constraint(&mut self) {
        self.constraint.clear();
    }

    // Param is passed by value, moved
    pub fn set_constraint(&mut self, v: ::protobuf::RepeatedField<KernelDef_AttrConstraint>) {
        self.constraint = v;
    }

    // Mutable pointer to the field.
    pub fn mut_constraint(&mut self) -> &mut ::protobuf::RepeatedField<KernelDef_AttrConstraint> {
        &mut self.constraint
    }

    // Take field
    pub fn take_constraint(&mut self) -> ::protobuf::RepeatedField<KernelDef_AttrConstraint> {
        ::std::mem::replace(&mut self.constraint, ::protobuf::RepeatedField::new())
    }

    // repeated string host_memory_arg = 4;


    pub fn get_host_memory_arg(&self) -> &[::std::string::String] {
        &self.host_memory_arg
    }
    pub fn clear_host_memory_arg(&mut self) {
        self.host_memory_arg.clear();
    }

    // Param is passed by value, moved
    pub fn set_host_memory_arg(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.host_memory_arg = v;
    }

    // Mutable pointer to the field.
    pub fn mut_host_memory_arg(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.host_memory_arg
    }

    // Take field
    pub fn take_host_memory_arg(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.host_memory_arg, ::protobuf::RepeatedField::new())
    }

    // string label = 5;


    pub fn get_label(&self) -> &str {
        &self.label
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.label, ::std::string::String::new())
    }

    // int32 priority = 6;


    pub fn get_priority(&self) -> i32 {
        self.priority
    }
    pub fn clear_priority(&mut self) {
        self.priority = 0;
    }

    // Param is passed by value, moved
    pub fn set_priority(&mut self, v: i32) {
        self.priority = v;
    }
}

impl ::protobuf::Message for KernelDef {
    fn is_initialized(&self) -> bool {
        for v in &self.constraint {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.op)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.device_type)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.constraint)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.host_memory_arg)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.label)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.priority = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.op.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.op);
        }
        if !self.device_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.device_type);
        }
        for value in &self.constraint {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.host_memory_arg {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.label);
        }
        if self.priority != 0 {
            my_size += ::protobuf::rt::value_size(6, self.priority, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.op.is_empty() {
            os.write_string(1, &self.op)?;
        }
        if !self.device_type.is_empty() {
            os.write_string(2, &self.device_type)?;
        }
        for v in &self.constraint {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.host_memory_arg {
            os.write_string(4, &v)?;
        };
        if !self.label.is_empty() {
            os.write_string(5, &self.label)?;
        }
        if self.priority != 0 {
            os.write_int32(6, self.priority)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KernelDef {
        KernelDef::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "op",
                |m: &KernelDef| { &m.op },
                |m: &mut KernelDef| { &mut m.op },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "device_type",
                |m: &KernelDef| { &m.device_type },
                |m: &mut KernelDef| { &mut m.device_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<KernelDef_AttrConstraint>>(
                "constraint",
                |m: &KernelDef| { &m.constraint },
                |m: &mut KernelDef| { &mut m.constraint },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "host_memory_arg",
                |m: &KernelDef| { &m.host_memory_arg },
                |m: &mut KernelDef| { &mut m.host_memory_arg },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "label",
                |m: &KernelDef| { &m.label },
                |m: &mut KernelDef| { &mut m.label },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "priority",
                |m: &KernelDef| { &m.priority },
                |m: &mut KernelDef| { &mut m.priority },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<KernelDef>(
                "KernelDef",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static KernelDef {
        static instance: ::protobuf::rt::LazyV2<KernelDef> = ::protobuf::rt::LazyV2::INIT;
        instance.get(KernelDef::new)
    }
}

impl ::protobuf::Clear for KernelDef {
    fn clear(&mut self) {
        self.op.clear();
        self.device_type.clear();
        self.constraint.clear();
        self.host_memory_arg.clear();
        self.label.clear();
        self.priority = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for KernelDef {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KernelDef {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct KernelDef_AttrConstraint {
    // message fields
    pub name: ::std::string::String,
    pub allowed_values: ::protobuf::SingularPtrField<super::attr_value::AttrValue>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KernelDef_AttrConstraint {
    fn default() -> &'a KernelDef_AttrConstraint {
        <KernelDef_AttrConstraint as ::protobuf::Message>::default_instance()
    }
}

impl KernelDef_AttrConstraint {
    pub fn new() -> KernelDef_AttrConstraint {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .tensorflow.AttrValue allowed_values = 2;


    pub fn get_allowed_values(&self) -> &super::attr_value::AttrValue {
        self.allowed_values.as_ref().unwrap_or_else(|| <super::attr_value::AttrValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_allowed_values(&mut self) {
        self.allowed_values.clear();
    }

    pub fn has_allowed_values(&self) -> bool {
        self.allowed_values.is_some()
    }

    // Param is passed by value, moved
    pub fn set_allowed_values(&mut self, v: super::attr_value::AttrValue) {
        self.allowed_values = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_allowed_values(&mut self) -> &mut super::attr_value::AttrValue {
        if self.allowed_values.is_none() {
            self.allowed_values.set_default();
        }
        self.allowed_values.as_mut().unwrap()
    }

    // Take field
    pub fn take_allowed_values(&mut self) -> super::attr_value::AttrValue {
        self.allowed_values.take().unwrap_or_else(|| super::attr_value::AttrValue::new())
    }
}

impl ::protobuf::Message for KernelDef_AttrConstraint {
    fn is_initialized(&self) -> bool {
        for v in &self.allowed_values {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.allowed_values)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(ref v) = self.allowed_values.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(ref v) = self.allowed_values.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KernelDef_AttrConstraint {
        KernelDef_AttrConstraint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &KernelDef_AttrConstraint| { &m.name },
                |m: &mut KernelDef_AttrConstraint| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::attr_value::AttrValue>>(
                "allowed_values",
                |m: &KernelDef_AttrConstraint| { &m.allowed_values },
                |m: &mut KernelDef_AttrConstraint| { &mut m.allowed_values },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<KernelDef_AttrConstraint>(
                "KernelDef.AttrConstraint",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static KernelDef_AttrConstraint {
        static instance: ::protobuf::rt::LazyV2<KernelDef_AttrConstraint> = ::protobuf::rt::LazyV2::INIT;
        instance.get(KernelDef_AttrConstraint::new)
    }
}

impl ::protobuf::Clear for KernelDef_AttrConstraint {
    fn clear(&mut self) {
        self.name.clear();
        self.allowed_values.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for KernelDef_AttrConstraint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KernelDef_AttrConstraint {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct KernelList {
    // message fields
    pub kernel: ::protobuf::RepeatedField<KernelDef>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KernelList {
    fn default() -> &'a KernelList {
        <KernelList as ::protobuf::Message>::default_instance()
    }
}

impl KernelList {
    pub fn new() -> KernelList {
        ::std::default::Default::default()
    }

    // repeated .tensorflow.KernelDef kernel = 1;


    pub fn get_kernel(&self) -> &[KernelDef] {
        &self.kernel
    }
    pub fn clear_kernel(&mut self) {
        self.kernel.clear();
    }

    // Param is passed by value, moved
    pub fn set_kernel(&mut self, v: ::protobuf::RepeatedField<KernelDef>) {
        self.kernel = v;
    }

    // Mutable pointer to the field.
    pub fn mut_kernel(&mut self) -> &mut ::protobuf::RepeatedField<KernelDef> {
        &mut self.kernel
    }

    // Take field
    pub fn take_kernel(&mut self) -> ::protobuf::RepeatedField<KernelDef> {
        ::std::mem::replace(&mut self.kernel, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for KernelList {
    fn is_initialized(&self) -> bool {
        for v in &self.kernel {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.kernel)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.kernel {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.kernel {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KernelList {
        KernelList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<KernelDef>>(
                "kernel",
                |m: &KernelList| { &m.kernel },
                |m: &mut KernelList| { &mut m.kernel },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<KernelList>(
                "KernelList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static KernelList {
        static instance: ::protobuf::rt::LazyV2<KernelList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(KernelList::new)
    }
}

impl ::protobuf::Clear for KernelList {
    fn clear(&mut self) {
        self.kernel.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for KernelList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KernelList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n*tensorflow/core/framework/kernel_def.proto\x12\ntensorflow\x1a*tensor\
    flow/core/framework/attr_value.proto\"\xc0\x02\n\tKernelDef\x12\x0e\n\
    \x02op\x18\x01\x20\x01(\tR\x02op\x12\x1f\n\x0bdevice_type\x18\x02\x20\
    \x01(\tR\ndeviceType\x12D\n\nconstraint\x18\x03\x20\x03(\x0b2$.tensorflo\
    w.KernelDef.AttrConstraintR\nconstraint\x12&\n\x0fhost_memory_arg\x18\
    \x04\x20\x03(\tR\rhostMemoryArg\x12\x14\n\x05label\x18\x05\x20\x01(\tR\
    \x05label\x12\x1a\n\x08priority\x18\x06\x20\x01(\x05R\x08priority\x1ab\n\
    \x0eAttrConstraint\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12<\n\
    \x0eallowed_values\x18\x02\x20\x01(\x0b2\x15.tensorflow.AttrValueR\rallo\
    wedValues\";\n\nKernelList\x12-\n\x06kernel\x18\x01\x20\x03(\x0b2\x15.te\
    nsorflow.KernelDefR\x06kernelBo\n\x18org.tensorflow.frameworkB\x0fKernel\
    DefProtosP\x01Z=github.com/tensorflow/tensorflow/tensorflow/go/core/fram\
    ework\xf8\x01\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
