// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow/core/protobuf/autotuning.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct CudnnVersion {
    // message fields
    pub major: i32,
    pub minor: i32,
    pub patch: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CudnnVersion {
    fn default() -> &'a CudnnVersion {
        <CudnnVersion as ::protobuf::Message>::default_instance()
    }
}

impl CudnnVersion {
    pub fn new() -> CudnnVersion {
        ::std::default::Default::default()
    }

    // int32 major = 1;


    pub fn get_major(&self) -> i32 {
        self.major
    }
    pub fn clear_major(&mut self) {
        self.major = 0;
    }

    // Param is passed by value, moved
    pub fn set_major(&mut self, v: i32) {
        self.major = v;
    }

    // int32 minor = 2;


    pub fn get_minor(&self) -> i32 {
        self.minor
    }
    pub fn clear_minor(&mut self) {
        self.minor = 0;
    }

    // Param is passed by value, moved
    pub fn set_minor(&mut self, v: i32) {
        self.minor = v;
    }

    // int32 patch = 3;


    pub fn get_patch(&self) -> i32 {
        self.patch
    }
    pub fn clear_patch(&mut self) {
        self.patch = 0;
    }

    // Param is passed by value, moved
    pub fn set_patch(&mut self, v: i32) {
        self.patch = v;
    }
}

impl ::protobuf::Message for CudnnVersion {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.major = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.minor = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.patch = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.major != 0 {
            my_size += ::protobuf::rt::value_size(1, self.major, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.minor != 0 {
            my_size += ::protobuf::rt::value_size(2, self.minor, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.patch != 0 {
            my_size += ::protobuf::rt::value_size(3, self.patch, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.major != 0 {
            os.write_int32(1, self.major)?;
        }
        if self.minor != 0 {
            os.write_int32(2, self.minor)?;
        }
        if self.patch != 0 {
            os.write_int32(3, self.patch)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CudnnVersion {
        CudnnVersion::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "major",
                |m: &CudnnVersion| { &m.major },
                |m: &mut CudnnVersion| { &mut m.major },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "minor",
                |m: &CudnnVersion| { &m.minor },
                |m: &mut CudnnVersion| { &mut m.minor },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "patch",
                |m: &CudnnVersion| { &m.patch },
                |m: &mut CudnnVersion| { &mut m.patch },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CudnnVersion>(
                "CudnnVersion",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CudnnVersion {
        static instance: ::protobuf::rt::LazyV2<CudnnVersion> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CudnnVersion::new)
    }
}

impl ::protobuf::Clear for CudnnVersion {
    fn clear(&mut self) {
        self.major = 0;
        self.minor = 0;
        self.patch = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CudnnVersion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CudnnVersion {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ComputeCapability {
    // message fields
    pub major: i32,
    pub minor: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ComputeCapability {
    fn default() -> &'a ComputeCapability {
        <ComputeCapability as ::protobuf::Message>::default_instance()
    }
}

impl ComputeCapability {
    pub fn new() -> ComputeCapability {
        ::std::default::Default::default()
    }

    // int32 major = 1;


    pub fn get_major(&self) -> i32 {
        self.major
    }
    pub fn clear_major(&mut self) {
        self.major = 0;
    }

    // Param is passed by value, moved
    pub fn set_major(&mut self, v: i32) {
        self.major = v;
    }

    // int32 minor = 2;


    pub fn get_minor(&self) -> i32 {
        self.minor
    }
    pub fn clear_minor(&mut self) {
        self.minor = 0;
    }

    // Param is passed by value, moved
    pub fn set_minor(&mut self, v: i32) {
        self.minor = v;
    }
}

impl ::protobuf::Message for ComputeCapability {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.major = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.minor = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.major != 0 {
            my_size += ::protobuf::rt::value_size(1, self.major, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.minor != 0 {
            my_size += ::protobuf::rt::value_size(2, self.minor, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.major != 0 {
            os.write_int32(1, self.major)?;
        }
        if self.minor != 0 {
            os.write_int32(2, self.minor)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ComputeCapability {
        ComputeCapability::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "major",
                |m: &ComputeCapability| { &m.major },
                |m: &mut ComputeCapability| { &mut m.major },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "minor",
                |m: &ComputeCapability| { &m.minor },
                |m: &mut ComputeCapability| { &mut m.minor },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ComputeCapability>(
                "ComputeCapability",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ComputeCapability {
        static instance: ::protobuf::rt::LazyV2<ComputeCapability> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ComputeCapability::new)
    }
}

impl ::protobuf::Clear for ComputeCapability {
    fn clear(&mut self) {
        self.major = 0;
        self.minor = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ComputeCapability {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ComputeCapability {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AutotuneResult {
    // message fields
    pub scratch_bytes: i64,
    pub run_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub failure: ::protobuf::SingularPtrField<AutotuneResult_FailureResult>,
    // message oneof groups
    pub key: ::std::option::Option<AutotuneResult_oneof_key>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AutotuneResult {
    fn default() -> &'a AutotuneResult {
        <AutotuneResult as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum AutotuneResult_oneof_key {
    conv(AutotuneResult_ConvKey),
    gemm(AutotuneResult_GemmKey),
}

impl AutotuneResult {
    pub fn new() -> AutotuneResult {
        ::std::default::Default::default()
    }

    // int64 scratch_bytes = 8;


    pub fn get_scratch_bytes(&self) -> i64 {
        self.scratch_bytes
    }
    pub fn clear_scratch_bytes(&mut self) {
        self.scratch_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_scratch_bytes(&mut self, v: i64) {
        self.scratch_bytes = v;
    }

    // .google.protobuf.Duration run_time = 9;


    pub fn get_run_time(&self) -> &::protobuf::well_known_types::Duration {
        self.run_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_run_time(&mut self) {
        self.run_time.clear();
    }

    pub fn has_run_time(&self) -> bool {
        self.run_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_run_time(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.run_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_run_time(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.run_time.is_none() {
            self.run_time.set_default();
        }
        self.run_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_run_time(&mut self) -> ::protobuf::well_known_types::Duration {
        self.run_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .tensorflow.AutotuneResult.FailureResult failure = 7;


    pub fn get_failure(&self) -> &AutotuneResult_FailureResult {
        self.failure.as_ref().unwrap_or_else(|| <AutotuneResult_FailureResult as ::protobuf::Message>::default_instance())
    }
    pub fn clear_failure(&mut self) {
        self.failure.clear();
    }

    pub fn has_failure(&self) -> bool {
        self.failure.is_some()
    }

    // Param is passed by value, moved
    pub fn set_failure(&mut self, v: AutotuneResult_FailureResult) {
        self.failure = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_failure(&mut self) -> &mut AutotuneResult_FailureResult {
        if self.failure.is_none() {
            self.failure.set_default();
        }
        self.failure.as_mut().unwrap()
    }

    // Take field
    pub fn take_failure(&mut self) -> AutotuneResult_FailureResult {
        self.failure.take().unwrap_or_else(|| AutotuneResult_FailureResult::new())
    }

    // .tensorflow.AutotuneResult.ConvKey conv = 5;


    pub fn get_conv(&self) -> &AutotuneResult_ConvKey {
        match self.key {
            ::std::option::Option::Some(AutotuneResult_oneof_key::conv(ref v)) => v,
            _ => <AutotuneResult_ConvKey as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_conv(&mut self) {
        self.key = ::std::option::Option::None;
    }

    pub fn has_conv(&self) -> bool {
        match self.key {
            ::std::option::Option::Some(AutotuneResult_oneof_key::conv(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_conv(&mut self, v: AutotuneResult_ConvKey) {
        self.key = ::std::option::Option::Some(AutotuneResult_oneof_key::conv(v))
    }

    // Mutable pointer to the field.
    pub fn mut_conv(&mut self) -> &mut AutotuneResult_ConvKey {
        if let ::std::option::Option::Some(AutotuneResult_oneof_key::conv(_)) = self.key {
        } else {
            self.key = ::std::option::Option::Some(AutotuneResult_oneof_key::conv(AutotuneResult_ConvKey::new()));
        }
        match self.key {
            ::std::option::Option::Some(AutotuneResult_oneof_key::conv(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_conv(&mut self) -> AutotuneResult_ConvKey {
        if self.has_conv() {
            match self.key.take() {
                ::std::option::Option::Some(AutotuneResult_oneof_key::conv(v)) => v,
                _ => panic!(),
            }
        } else {
            AutotuneResult_ConvKey::new()
        }
    }

    // .tensorflow.AutotuneResult.GemmKey gemm = 6;


    pub fn get_gemm(&self) -> &AutotuneResult_GemmKey {
        match self.key {
            ::std::option::Option::Some(AutotuneResult_oneof_key::gemm(ref v)) => v,
            _ => <AutotuneResult_GemmKey as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_gemm(&mut self) {
        self.key = ::std::option::Option::None;
    }

    pub fn has_gemm(&self) -> bool {
        match self.key {
            ::std::option::Option::Some(AutotuneResult_oneof_key::gemm(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_gemm(&mut self, v: AutotuneResult_GemmKey) {
        self.key = ::std::option::Option::Some(AutotuneResult_oneof_key::gemm(v))
    }

    // Mutable pointer to the field.
    pub fn mut_gemm(&mut self) -> &mut AutotuneResult_GemmKey {
        if let ::std::option::Option::Some(AutotuneResult_oneof_key::gemm(_)) = self.key {
        } else {
            self.key = ::std::option::Option::Some(AutotuneResult_oneof_key::gemm(AutotuneResult_GemmKey::new()));
        }
        match self.key {
            ::std::option::Option::Some(AutotuneResult_oneof_key::gemm(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_gemm(&mut self) -> AutotuneResult_GemmKey {
        if self.has_gemm() {
            match self.key.take() {
                ::std::option::Option::Some(AutotuneResult_oneof_key::gemm(v)) => v,
                _ => panic!(),
            }
        } else {
            AutotuneResult_GemmKey::new()
        }
    }
}

impl ::protobuf::Message for AutotuneResult {
    fn is_initialized(&self) -> bool {
        for v in &self.run_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.failure {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(AutotuneResult_oneof_key::conv(ref v)) = self.key {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(AutotuneResult_oneof_key::gemm(ref v)) = self.key {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.scratch_bytes = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.run_time)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.failure)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.key = ::std::option::Option::Some(AutotuneResult_oneof_key::conv(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.key = ::std::option::Option::Some(AutotuneResult_oneof_key::gemm(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.scratch_bytes != 0 {
            my_size += ::protobuf::rt::value_size(8, self.scratch_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.run_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.failure.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.key {
            match v {
                &AutotuneResult_oneof_key::conv(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AutotuneResult_oneof_key::gemm(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.scratch_bytes != 0 {
            os.write_int64(8, self.scratch_bytes)?;
        }
        if let Some(ref v) = self.run_time.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.failure.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.key {
            match v {
                &AutotuneResult_oneof_key::conv(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AutotuneResult_oneof_key::gemm(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AutotuneResult {
        AutotuneResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "scratch_bytes",
                |m: &AutotuneResult| { &m.scratch_bytes },
                |m: &mut AutotuneResult| { &mut m.scratch_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "run_time",
                |m: &AutotuneResult| { &m.run_time },
                |m: &mut AutotuneResult| { &mut m.run_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AutotuneResult_FailureResult>>(
                "failure",
                |m: &AutotuneResult| { &m.failure },
                |m: &mut AutotuneResult| { &mut m.failure },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, AutotuneResult_ConvKey>(
                "conv",
                AutotuneResult::has_conv,
                AutotuneResult::get_conv,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, AutotuneResult_GemmKey>(
                "gemm",
                AutotuneResult::has_gemm,
                AutotuneResult::get_gemm,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AutotuneResult>(
                "AutotuneResult",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AutotuneResult {
        static instance: ::protobuf::rt::LazyV2<AutotuneResult> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AutotuneResult::new)
    }
}

impl ::protobuf::Clear for AutotuneResult {
    fn clear(&mut self) {
        self.scratch_bytes = 0;
        self.run_time.clear();
        self.failure.clear();
        self.key = ::std::option::Option::None;
        self.key = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AutotuneResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AutotuneResult {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AutotuneResult_FailureResult {
    // message fields
    pub kind: AutotuneResult_FailureKind,
    pub msg: ::std::string::String,
    pub buffer_address: i64,
    // message oneof groups
    pub key: ::std::option::Option<AutotuneResult_FailureResult_oneof_key>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AutotuneResult_FailureResult {
    fn default() -> &'a AutotuneResult_FailureResult {
        <AutotuneResult_FailureResult as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum AutotuneResult_FailureResult_oneof_key {
    reference_conv(AutotuneResult_ConvKey),
    reference_gemm(AutotuneResult_GemmKey),
}

impl AutotuneResult_FailureResult {
    pub fn new() -> AutotuneResult_FailureResult {
        ::std::default::Default::default()
    }

    // .tensorflow.AutotuneResult.FailureKind kind = 1;


    pub fn get_kind(&self) -> AutotuneResult_FailureKind {
        self.kind
    }
    pub fn clear_kind(&mut self) {
        self.kind = AutotuneResult_FailureKind::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_kind(&mut self, v: AutotuneResult_FailureKind) {
        self.kind = v;
    }

    // string msg = 2;


    pub fn get_msg(&self) -> &str {
        &self.msg
    }
    pub fn clear_msg(&mut self) {
        self.msg.clear();
    }

    // Param is passed by value, moved
    pub fn set_msg(&mut self, v: ::std::string::String) {
        self.msg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_msg(&mut self) -> &mut ::std::string::String {
        &mut self.msg
    }

    // Take field
    pub fn take_msg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.msg, ::std::string::String::new())
    }

    // .tensorflow.AutotuneResult.ConvKey reference_conv = 11;


    pub fn get_reference_conv(&self) -> &AutotuneResult_ConvKey {
        match self.key {
            ::std::option::Option::Some(AutotuneResult_FailureResult_oneof_key::reference_conv(ref v)) => v,
            _ => <AutotuneResult_ConvKey as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_reference_conv(&mut self) {
        self.key = ::std::option::Option::None;
    }

    pub fn has_reference_conv(&self) -> bool {
        match self.key {
            ::std::option::Option::Some(AutotuneResult_FailureResult_oneof_key::reference_conv(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_reference_conv(&mut self, v: AutotuneResult_ConvKey) {
        self.key = ::std::option::Option::Some(AutotuneResult_FailureResult_oneof_key::reference_conv(v))
    }

    // Mutable pointer to the field.
    pub fn mut_reference_conv(&mut self) -> &mut AutotuneResult_ConvKey {
        if let ::std::option::Option::Some(AutotuneResult_FailureResult_oneof_key::reference_conv(_)) = self.key {
        } else {
            self.key = ::std::option::Option::Some(AutotuneResult_FailureResult_oneof_key::reference_conv(AutotuneResult_ConvKey::new()));
        }
        match self.key {
            ::std::option::Option::Some(AutotuneResult_FailureResult_oneof_key::reference_conv(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_reference_conv(&mut self) -> AutotuneResult_ConvKey {
        if self.has_reference_conv() {
            match self.key.take() {
                ::std::option::Option::Some(AutotuneResult_FailureResult_oneof_key::reference_conv(v)) => v,
                _ => panic!(),
            }
        } else {
            AutotuneResult_ConvKey::new()
        }
    }

    // .tensorflow.AutotuneResult.GemmKey reference_gemm = 12;


    pub fn get_reference_gemm(&self) -> &AutotuneResult_GemmKey {
        match self.key {
            ::std::option::Option::Some(AutotuneResult_FailureResult_oneof_key::reference_gemm(ref v)) => v,
            _ => <AutotuneResult_GemmKey as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_reference_gemm(&mut self) {
        self.key = ::std::option::Option::None;
    }

    pub fn has_reference_gemm(&self) -> bool {
        match self.key {
            ::std::option::Option::Some(AutotuneResult_FailureResult_oneof_key::reference_gemm(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_reference_gemm(&mut self, v: AutotuneResult_GemmKey) {
        self.key = ::std::option::Option::Some(AutotuneResult_FailureResult_oneof_key::reference_gemm(v))
    }

    // Mutable pointer to the field.
    pub fn mut_reference_gemm(&mut self) -> &mut AutotuneResult_GemmKey {
        if let ::std::option::Option::Some(AutotuneResult_FailureResult_oneof_key::reference_gemm(_)) = self.key {
        } else {
            self.key = ::std::option::Option::Some(AutotuneResult_FailureResult_oneof_key::reference_gemm(AutotuneResult_GemmKey::new()));
        }
        match self.key {
            ::std::option::Option::Some(AutotuneResult_FailureResult_oneof_key::reference_gemm(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_reference_gemm(&mut self) -> AutotuneResult_GemmKey {
        if self.has_reference_gemm() {
            match self.key.take() {
                ::std::option::Option::Some(AutotuneResult_FailureResult_oneof_key::reference_gemm(v)) => v,
                _ => panic!(),
            }
        } else {
            AutotuneResult_GemmKey::new()
        }
    }

    // int64 buffer_address = 13;


    pub fn get_buffer_address(&self) -> i64 {
        self.buffer_address
    }
    pub fn clear_buffer_address(&mut self) {
        self.buffer_address = 0;
    }

    // Param is passed by value, moved
    pub fn set_buffer_address(&mut self, v: i64) {
        self.buffer_address = v;
    }
}

impl ::protobuf::Message for AutotuneResult_FailureResult {
    fn is_initialized(&self) -> bool {
        if let Some(AutotuneResult_FailureResult_oneof_key::reference_conv(ref v)) = self.key {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(AutotuneResult_FailureResult_oneof_key::reference_gemm(ref v)) = self.key {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.kind, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.msg)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.key = ::std::option::Option::Some(AutotuneResult_FailureResult_oneof_key::reference_conv(is.read_message()?));
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.key = ::std::option::Option::Some(AutotuneResult_FailureResult_oneof_key::reference_gemm(is.read_message()?));
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.buffer_address = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.kind != AutotuneResult_FailureKind::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(1, self.kind);
        }
        if !self.msg.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.msg);
        }
        if self.buffer_address != 0 {
            my_size += ::protobuf::rt::value_size(13, self.buffer_address, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.key {
            match v {
                &AutotuneResult_FailureResult_oneof_key::reference_conv(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AutotuneResult_FailureResult_oneof_key::reference_gemm(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.kind != AutotuneResult_FailureKind::UNKNOWN {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.kind))?;
        }
        if !self.msg.is_empty() {
            os.write_string(2, &self.msg)?;
        }
        if self.buffer_address != 0 {
            os.write_int64(13, self.buffer_address)?;
        }
        if let ::std::option::Option::Some(ref v) = self.key {
            match v {
                &AutotuneResult_FailureResult_oneof_key::reference_conv(ref v) => {
                    os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AutotuneResult_FailureResult_oneof_key::reference_gemm(ref v) => {
                    os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AutotuneResult_FailureResult {
        AutotuneResult_FailureResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<AutotuneResult_FailureKind>>(
                "kind",
                |m: &AutotuneResult_FailureResult| { &m.kind },
                |m: &mut AutotuneResult_FailureResult| { &mut m.kind },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "msg",
                |m: &AutotuneResult_FailureResult| { &m.msg },
                |m: &mut AutotuneResult_FailureResult| { &mut m.msg },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, AutotuneResult_ConvKey>(
                "reference_conv",
                AutotuneResult_FailureResult::has_reference_conv,
                AutotuneResult_FailureResult::get_reference_conv,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, AutotuneResult_GemmKey>(
                "reference_gemm",
                AutotuneResult_FailureResult::has_reference_gemm,
                AutotuneResult_FailureResult::get_reference_gemm,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "buffer_address",
                |m: &AutotuneResult_FailureResult| { &m.buffer_address },
                |m: &mut AutotuneResult_FailureResult| { &mut m.buffer_address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AutotuneResult_FailureResult>(
                "AutotuneResult.FailureResult",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AutotuneResult_FailureResult {
        static instance: ::protobuf::rt::LazyV2<AutotuneResult_FailureResult> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AutotuneResult_FailureResult::new)
    }
}

impl ::protobuf::Clear for AutotuneResult_FailureResult {
    fn clear(&mut self) {
        self.kind = AutotuneResult_FailureKind::UNKNOWN;
        self.msg.clear();
        self.key = ::std::option::Option::None;
        self.key = ::std::option::Option::None;
        self.buffer_address = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AutotuneResult_FailureResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AutotuneResult_FailureResult {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AutotuneResult_ConvKey {
    // message fields
    pub algorithm: i64,
    pub tensor_ops_enabled: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AutotuneResult_ConvKey {
    fn default() -> &'a AutotuneResult_ConvKey {
        <AutotuneResult_ConvKey as ::protobuf::Message>::default_instance()
    }
}

impl AutotuneResult_ConvKey {
    pub fn new() -> AutotuneResult_ConvKey {
        ::std::default::Default::default()
    }

    // int64 algorithm = 1;


    pub fn get_algorithm(&self) -> i64 {
        self.algorithm
    }
    pub fn clear_algorithm(&mut self) {
        self.algorithm = 0;
    }

    // Param is passed by value, moved
    pub fn set_algorithm(&mut self, v: i64) {
        self.algorithm = v;
    }

    // bool tensor_ops_enabled = 2;


    pub fn get_tensor_ops_enabled(&self) -> bool {
        self.tensor_ops_enabled
    }
    pub fn clear_tensor_ops_enabled(&mut self) {
        self.tensor_ops_enabled = false;
    }

    // Param is passed by value, moved
    pub fn set_tensor_ops_enabled(&mut self, v: bool) {
        self.tensor_ops_enabled = v;
    }
}

impl ::protobuf::Message for AutotuneResult_ConvKey {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.algorithm = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.tensor_ops_enabled = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.algorithm != 0 {
            my_size += ::protobuf::rt::value_size(1, self.algorithm, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tensor_ops_enabled != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.algorithm != 0 {
            os.write_int64(1, self.algorithm)?;
        }
        if self.tensor_ops_enabled != false {
            os.write_bool(2, self.tensor_ops_enabled)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AutotuneResult_ConvKey {
        AutotuneResult_ConvKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "algorithm",
                |m: &AutotuneResult_ConvKey| { &m.algorithm },
                |m: &mut AutotuneResult_ConvKey| { &mut m.algorithm },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "tensor_ops_enabled",
                |m: &AutotuneResult_ConvKey| { &m.tensor_ops_enabled },
                |m: &mut AutotuneResult_ConvKey| { &mut m.tensor_ops_enabled },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AutotuneResult_ConvKey>(
                "AutotuneResult.ConvKey",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AutotuneResult_ConvKey {
        static instance: ::protobuf::rt::LazyV2<AutotuneResult_ConvKey> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AutotuneResult_ConvKey::new)
    }
}

impl ::protobuf::Clear for AutotuneResult_ConvKey {
    fn clear(&mut self) {
        self.algorithm = 0;
        self.tensor_ops_enabled = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AutotuneResult_ConvKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AutotuneResult_ConvKey {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AutotuneResult_GemmKey {
    // message fields
    pub algorithm: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AutotuneResult_GemmKey {
    fn default() -> &'a AutotuneResult_GemmKey {
        <AutotuneResult_GemmKey as ::protobuf::Message>::default_instance()
    }
}

impl AutotuneResult_GemmKey {
    pub fn new() -> AutotuneResult_GemmKey {
        ::std::default::Default::default()
    }

    // int64 algorithm = 1;


    pub fn get_algorithm(&self) -> i64 {
        self.algorithm
    }
    pub fn clear_algorithm(&mut self) {
        self.algorithm = 0;
    }

    // Param is passed by value, moved
    pub fn set_algorithm(&mut self, v: i64) {
        self.algorithm = v;
    }
}

impl ::protobuf::Message for AutotuneResult_GemmKey {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.algorithm = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.algorithm != 0 {
            my_size += ::protobuf::rt::value_size(1, self.algorithm, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.algorithm != 0 {
            os.write_int64(1, self.algorithm)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AutotuneResult_GemmKey {
        AutotuneResult_GemmKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "algorithm",
                |m: &AutotuneResult_GemmKey| { &m.algorithm },
                |m: &mut AutotuneResult_GemmKey| { &mut m.algorithm },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AutotuneResult_GemmKey>(
                "AutotuneResult.GemmKey",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AutotuneResult_GemmKey {
        static instance: ::protobuf::rt::LazyV2<AutotuneResult_GemmKey> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AutotuneResult_GemmKey::new)
    }
}

impl ::protobuf::Clear for AutotuneResult_GemmKey {
    fn clear(&mut self) {
        self.algorithm = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AutotuneResult_GemmKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AutotuneResult_GemmKey {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum AutotuneResult_FailureKind {
    UNKNOWN = 0,
    REDZONE_MODIFIED = 1,
    WRONG_RESULT = 2,
}

impl ::protobuf::ProtobufEnum for AutotuneResult_FailureKind {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<AutotuneResult_FailureKind> {
        match value {
            0 => ::std::option::Option::Some(AutotuneResult_FailureKind::UNKNOWN),
            1 => ::std::option::Option::Some(AutotuneResult_FailureKind::REDZONE_MODIFIED),
            2 => ::std::option::Option::Some(AutotuneResult_FailureKind::WRONG_RESULT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [AutotuneResult_FailureKind] = &[
            AutotuneResult_FailureKind::UNKNOWN,
            AutotuneResult_FailureKind::REDZONE_MODIFIED,
            AutotuneResult_FailureKind::WRONG_RESULT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<AutotuneResult_FailureKind>("AutotuneResult.FailureKind", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for AutotuneResult_FailureKind {
}

impl ::std::default::Default for AutotuneResult_FailureKind {
    fn default() -> Self {
        AutotuneResult_FailureKind::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for AutotuneResult_FailureKind {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AutotuningLog {
    // message fields
    pub instr: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    pub results: ::protobuf::RepeatedField<AutotuneResult>,
    pub cudnn_version: ::protobuf::SingularPtrField<CudnnVersion>,
    pub compute_capability: ::protobuf::SingularPtrField<ComputeCapability>,
    pub device_pci_bus_id: ::std::string::String,
    pub blas_version: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AutotuningLog {
    fn default() -> &'a AutotuningLog {
        <AutotuningLog as ::protobuf::Message>::default_instance()
    }
}

impl AutotuningLog {
    pub fn new() -> AutotuningLog {
        ::std::default::Default::default()
    }

    // .google.protobuf.Any instr = 1;


    pub fn get_instr(&self) -> &::protobuf::well_known_types::Any {
        self.instr.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_instr(&mut self) {
        self.instr.clear();
    }

    pub fn has_instr(&self) -> bool {
        self.instr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_instr(&mut self, v: ::protobuf::well_known_types::Any) {
        self.instr = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instr(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.instr.is_none() {
            self.instr.set_default();
        }
        self.instr.as_mut().unwrap()
    }

    // Take field
    pub fn take_instr(&mut self) -> ::protobuf::well_known_types::Any {
        self.instr.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }

    // repeated .tensorflow.AutotuneResult results = 2;


    pub fn get_results(&self) -> &[AutotuneResult] {
        &self.results
    }
    pub fn clear_results(&mut self) {
        self.results.clear();
    }

    // Param is passed by value, moved
    pub fn set_results(&mut self, v: ::protobuf::RepeatedField<AutotuneResult>) {
        self.results = v;
    }

    // Mutable pointer to the field.
    pub fn mut_results(&mut self) -> &mut ::protobuf::RepeatedField<AutotuneResult> {
        &mut self.results
    }

    // Take field
    pub fn take_results(&mut self) -> ::protobuf::RepeatedField<AutotuneResult> {
        ::std::mem::replace(&mut self.results, ::protobuf::RepeatedField::new())
    }

    // .tensorflow.CudnnVersion cudnn_version = 3;


    pub fn get_cudnn_version(&self) -> &CudnnVersion {
        self.cudnn_version.as_ref().unwrap_or_else(|| <CudnnVersion as ::protobuf::Message>::default_instance())
    }
    pub fn clear_cudnn_version(&mut self) {
        self.cudnn_version.clear();
    }

    pub fn has_cudnn_version(&self) -> bool {
        self.cudnn_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cudnn_version(&mut self, v: CudnnVersion) {
        self.cudnn_version = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cudnn_version(&mut self) -> &mut CudnnVersion {
        if self.cudnn_version.is_none() {
            self.cudnn_version.set_default();
        }
        self.cudnn_version.as_mut().unwrap()
    }

    // Take field
    pub fn take_cudnn_version(&mut self) -> CudnnVersion {
        self.cudnn_version.take().unwrap_or_else(|| CudnnVersion::new())
    }

    // .tensorflow.ComputeCapability compute_capability = 4;


    pub fn get_compute_capability(&self) -> &ComputeCapability {
        self.compute_capability.as_ref().unwrap_or_else(|| <ComputeCapability as ::protobuf::Message>::default_instance())
    }
    pub fn clear_compute_capability(&mut self) {
        self.compute_capability.clear();
    }

    pub fn has_compute_capability(&self) -> bool {
        self.compute_capability.is_some()
    }

    // Param is passed by value, moved
    pub fn set_compute_capability(&mut self, v: ComputeCapability) {
        self.compute_capability = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_compute_capability(&mut self) -> &mut ComputeCapability {
        if self.compute_capability.is_none() {
            self.compute_capability.set_default();
        }
        self.compute_capability.as_mut().unwrap()
    }

    // Take field
    pub fn take_compute_capability(&mut self) -> ComputeCapability {
        self.compute_capability.take().unwrap_or_else(|| ComputeCapability::new())
    }

    // string device_pci_bus_id = 5;


    pub fn get_device_pci_bus_id(&self) -> &str {
        &self.device_pci_bus_id
    }
    pub fn clear_device_pci_bus_id(&mut self) {
        self.device_pci_bus_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_device_pci_bus_id(&mut self, v: ::std::string::String) {
        self.device_pci_bus_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_pci_bus_id(&mut self) -> &mut ::std::string::String {
        &mut self.device_pci_bus_id
    }

    // Take field
    pub fn take_device_pci_bus_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.device_pci_bus_id, ::std::string::String::new())
    }

    // string blas_version = 6;


    pub fn get_blas_version(&self) -> &str {
        &self.blas_version
    }
    pub fn clear_blas_version(&mut self) {
        self.blas_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_blas_version(&mut self, v: ::std::string::String) {
        self.blas_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_blas_version(&mut self) -> &mut ::std::string::String {
        &mut self.blas_version
    }

    // Take field
    pub fn take_blas_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.blas_version, ::std::string::String::new())
    }
}

impl ::protobuf::Message for AutotuningLog {
    fn is_initialized(&self) -> bool {
        for v in &self.instr {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.results {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.cudnn_version {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.compute_capability {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.instr)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.results)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cudnn_version)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.compute_capability)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.device_pci_bus_id)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.blas_version)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.instr.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.results {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.cudnn_version.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.compute_capability.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.device_pci_bus_id.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.device_pci_bus_id);
        }
        if !self.blas_version.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.blas_version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.instr.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.results {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.cudnn_version.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.compute_capability.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.device_pci_bus_id.is_empty() {
            os.write_string(5, &self.device_pci_bus_id)?;
        }
        if !self.blas_version.is_empty() {
            os.write_string(6, &self.blas_version)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AutotuningLog {
        AutotuningLog::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "instr",
                |m: &AutotuningLog| { &m.instr },
                |m: &mut AutotuningLog| { &mut m.instr },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AutotuneResult>>(
                "results",
                |m: &AutotuningLog| { &m.results },
                |m: &mut AutotuningLog| { &mut m.results },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CudnnVersion>>(
                "cudnn_version",
                |m: &AutotuningLog| { &m.cudnn_version },
                |m: &mut AutotuningLog| { &mut m.cudnn_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ComputeCapability>>(
                "compute_capability",
                |m: &AutotuningLog| { &m.compute_capability },
                |m: &mut AutotuningLog| { &mut m.compute_capability },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "device_pci_bus_id",
                |m: &AutotuningLog| { &m.device_pci_bus_id },
                |m: &mut AutotuningLog| { &mut m.device_pci_bus_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "blas_version",
                |m: &AutotuningLog| { &m.blas_version },
                |m: &mut AutotuningLog| { &mut m.blas_version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AutotuningLog>(
                "AutotuningLog",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AutotuningLog {
        static instance: ::protobuf::rt::LazyV2<AutotuningLog> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AutotuningLog::new)
    }
}

impl ::protobuf::Clear for AutotuningLog {
    fn clear(&mut self) {
        self.instr.clear();
        self.results.clear();
        self.cudnn_version.clear();
        self.compute_capability.clear();
        self.device_pci_bus_id.clear();
        self.blas_version.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AutotuningLog {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AutotuningLog {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)tensorflow/core/protobuf/autotuning.proto\x12\ntensorflow\x1a\x19goog\
    le/protobuf/any.proto\x1a\x1egoogle/protobuf/duration.proto\"P\n\x0cCudn\
    nVersion\x12\x14\n\x05major\x18\x01\x20\x01(\x05R\x05major\x12\x14\n\x05\
    minor\x18\x02\x20\x01(\x05R\x05minor\x12\x14\n\x05patch\x18\x03\x20\x01(\
    \x05R\x05patch\"?\n\x11ComputeCapability\x12\x14\n\x05major\x18\x01\x20\
    \x01(\x05R\x05major\x12\x14\n\x05minor\x18\x02\x20\x01(\x05R\x05minor\"\
    \x96\x06\n\x0eAutotuneResult\x12#\n\rscratch_bytes\x18\x08\x20\x01(\x03R\
    \x0cscratchBytes\x124\n\x08run_time\x18\t\x20\x01(\x0b2\x19.google.proto\
    buf.DurationR\x07runTime\x12B\n\x07failure\x18\x07\x20\x01(\x0b2(.tensor\
    flow.AutotuneResult.FailureResultR\x07failure\x128\n\x04conv\x18\x05\x20\
    \x01(\x0b2\".tensorflow.AutotuneResult.ConvKeyH\0R\x04conv\x128\n\x04gem\
    m\x18\x06\x20\x01(\x0b2\".tensorflow.AutotuneResult.GemmKeyH\0R\x04gemm\
    \x1a\xa5\x02\n\rFailureResult\x12:\n\x04kind\x18\x01\x20\x01(\x0e2&.tens\
    orflow.AutotuneResult.FailureKindR\x04kind\x12\x10\n\x03msg\x18\x02\x20\
    \x01(\tR\x03msg\x12K\n\x0ereference_conv\x18\x0b\x20\x01(\x0b2\".tensorf\
    low.AutotuneResult.ConvKeyH\0R\rreferenceConv\x12K\n\x0ereference_gemm\
    \x18\x0c\x20\x01(\x0b2\".tensorflow.AutotuneResult.GemmKeyH\0R\rreferenc\
    eGemm\x12%\n\x0ebuffer_address\x18\r\x20\x01(\x03R\rbufferAddressB\x05\n\
    \x03key\x1aU\n\x07ConvKey\x12\x1c\n\talgorithm\x18\x01\x20\x01(\x03R\tal\
    gorithm\x12,\n\x12tensor_ops_enabled\x18\x02\x20\x01(\x08R\x10tensorOpsE\
    nabled\x1a'\n\x07GemmKey\x12\x1c\n\talgorithm\x18\x01\x20\x01(\x03R\talg\
    orithm\"B\n\x0bFailureKind\x12\x0b\n\x07UNKNOWN\x10\0\x12\x14\n\x10REDZO\
    NE_MODIFIED\x10\x01\x12\x10\n\x0cWRONG_RESULT\x10\x02B\x05\n\x03key\"\
    \xcc\x02\n\rAutotuningLog\x12*\n\x05instr\x18\x01\x20\x01(\x0b2\x14.goog\
    le.protobuf.AnyR\x05instr\x124\n\x07results\x18\x02\x20\x03(\x0b2\x1a.te\
    nsorflow.AutotuneResultR\x07results\x12=\n\rcudnn_version\x18\x03\x20\
    \x01(\x0b2\x18.tensorflow.CudnnVersionR\x0ccudnnVersion\x12L\n\x12comput\
    e_capability\x18\x04\x20\x01(\x0b2\x1d.tensorflow.ComputeCapabilityR\x11\
    computeCapability\x12)\n\x11device_pci_bus_id\x18\x05\x20\x01(\tR\x0edev\
    icePciBusId\x12!\n\x0cblas_version\x18\x06\x20\x01(\tR\x0bblasVersionb\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
