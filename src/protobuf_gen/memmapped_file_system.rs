// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow/core/util/memmapped_file_system.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct MemmappedFileSystemDirectoryElement {
    // message fields
    pub offset: u64,
    pub name: ::std::string::String,
    pub length: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MemmappedFileSystemDirectoryElement {
    fn default() -> &'a MemmappedFileSystemDirectoryElement {
        <MemmappedFileSystemDirectoryElement as ::protobuf::Message>::default_instance()
    }
}

impl MemmappedFileSystemDirectoryElement {
    pub fn new() -> MemmappedFileSystemDirectoryElement {
        ::std::default::Default::default()
    }

    // uint64 offset = 1;


    pub fn get_offset(&self) -> u64 {
        self.offset
    }
    pub fn clear_offset(&mut self) {
        self.offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: u64) {
        self.offset = v;
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // uint64 length = 3;


    pub fn get_length(&self) -> u64 {
        self.length
    }
    pub fn clear_length(&mut self) {
        self.length = 0;
    }

    // Param is passed by value, moved
    pub fn set_length(&mut self, v: u64) {
        self.length = v;
    }
}

impl ::protobuf::Message for MemmappedFileSystemDirectoryElement {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.offset = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.length = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.offset != 0 {
            my_size += ::protobuf::rt::value_size(1, self.offset, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if self.length != 0 {
            my_size += ::protobuf::rt::value_size(3, self.length, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.offset != 0 {
            os.write_uint64(1, self.offset)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if self.length != 0 {
            os.write_uint64(3, self.length)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MemmappedFileSystemDirectoryElement {
        MemmappedFileSystemDirectoryElement::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "offset",
                |m: &MemmappedFileSystemDirectoryElement| { &m.offset },
                |m: &mut MemmappedFileSystemDirectoryElement| { &mut m.offset },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &MemmappedFileSystemDirectoryElement| { &m.name },
                |m: &mut MemmappedFileSystemDirectoryElement| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "length",
                |m: &MemmappedFileSystemDirectoryElement| { &m.length },
                |m: &mut MemmappedFileSystemDirectoryElement| { &mut m.length },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MemmappedFileSystemDirectoryElement>(
                "MemmappedFileSystemDirectoryElement",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MemmappedFileSystemDirectoryElement {
        static instance: ::protobuf::rt::LazyV2<MemmappedFileSystemDirectoryElement> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MemmappedFileSystemDirectoryElement::new)
    }
}

impl ::protobuf::Clear for MemmappedFileSystemDirectoryElement {
    fn clear(&mut self) {
        self.offset = 0;
        self.name.clear();
        self.length = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MemmappedFileSystemDirectoryElement {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MemmappedFileSystemDirectoryElement {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MemmappedFileSystemDirectory {
    // message fields
    pub element: ::protobuf::RepeatedField<MemmappedFileSystemDirectoryElement>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MemmappedFileSystemDirectory {
    fn default() -> &'a MemmappedFileSystemDirectory {
        <MemmappedFileSystemDirectory as ::protobuf::Message>::default_instance()
    }
}

impl MemmappedFileSystemDirectory {
    pub fn new() -> MemmappedFileSystemDirectory {
        ::std::default::Default::default()
    }

    // repeated .tensorflow.MemmappedFileSystemDirectoryElement element = 1;


    pub fn get_element(&self) -> &[MemmappedFileSystemDirectoryElement] {
        &self.element
    }
    pub fn clear_element(&mut self) {
        self.element.clear();
    }

    // Param is passed by value, moved
    pub fn set_element(&mut self, v: ::protobuf::RepeatedField<MemmappedFileSystemDirectoryElement>) {
        self.element = v;
    }

    // Mutable pointer to the field.
    pub fn mut_element(&mut self) -> &mut ::protobuf::RepeatedField<MemmappedFileSystemDirectoryElement> {
        &mut self.element
    }

    // Take field
    pub fn take_element(&mut self) -> ::protobuf::RepeatedField<MemmappedFileSystemDirectoryElement> {
        ::std::mem::replace(&mut self.element, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MemmappedFileSystemDirectory {
    fn is_initialized(&self) -> bool {
        for v in &self.element {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.element)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.element {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.element {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MemmappedFileSystemDirectory {
        MemmappedFileSystemDirectory::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MemmappedFileSystemDirectoryElement>>(
                "element",
                |m: &MemmappedFileSystemDirectory| { &m.element },
                |m: &mut MemmappedFileSystemDirectory| { &mut m.element },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MemmappedFileSystemDirectory>(
                "MemmappedFileSystemDirectory",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MemmappedFileSystemDirectory {
        static instance: ::protobuf::rt::LazyV2<MemmappedFileSystemDirectory> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MemmappedFileSystemDirectory::new)
    }
}

impl ::protobuf::Clear for MemmappedFileSystemDirectory {
    fn clear(&mut self) {
        self.element.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MemmappedFileSystemDirectory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MemmappedFileSystemDirectory {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n0tensorflow/core/util/memmapped_file_system.proto\x12\ntensorflow\"i\n\
    #MemmappedFileSystemDirectoryElement\x12\x16\n\x06offset\x18\x01\x20\x01\
    (\x04R\x06offset\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12\x16\n\
    \x06length\x18\x03\x20\x01(\x04R\x06length\"i\n\x1cMemmappedFileSystemDi\
    rectory\x12I\n\x07element\x18\x01\x20\x03(\x0b2/.tensorflow.MemmappedFil\
    eSystemDirectoryElementR\x07elementB\x03\xf8\x01\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
