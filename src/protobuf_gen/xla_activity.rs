// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow/compiler/jit/xla_activity.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct XlaAutoClusteringSummary {
    // message fields
    pub unclustered_node_count: i32,
    pub clustered_node_count: i32,
    pub clusters: ::protobuf::RepeatedField<XlaAutoClusteringSummary_Cluster>,
    pub unclustered_op_histogram: ::protobuf::RepeatedField<XlaAutoClusteringSummary_OpAndCount>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a XlaAutoClusteringSummary {
    fn default() -> &'a XlaAutoClusteringSummary {
        <XlaAutoClusteringSummary as ::protobuf::Message>::default_instance()
    }
}

impl XlaAutoClusteringSummary {
    pub fn new() -> XlaAutoClusteringSummary {
        ::std::default::Default::default()
    }

    // int32 unclustered_node_count = 1;


    pub fn get_unclustered_node_count(&self) -> i32 {
        self.unclustered_node_count
    }
    pub fn clear_unclustered_node_count(&mut self) {
        self.unclustered_node_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_unclustered_node_count(&mut self, v: i32) {
        self.unclustered_node_count = v;
    }

    // int32 clustered_node_count = 2;


    pub fn get_clustered_node_count(&self) -> i32 {
        self.clustered_node_count
    }
    pub fn clear_clustered_node_count(&mut self) {
        self.clustered_node_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_clustered_node_count(&mut self, v: i32) {
        self.clustered_node_count = v;
    }

    // repeated .tensorflow.XlaAutoClusteringSummary.Cluster clusters = 3;


    pub fn get_clusters(&self) -> &[XlaAutoClusteringSummary_Cluster] {
        &self.clusters
    }
    pub fn clear_clusters(&mut self) {
        self.clusters.clear();
    }

    // Param is passed by value, moved
    pub fn set_clusters(&mut self, v: ::protobuf::RepeatedField<XlaAutoClusteringSummary_Cluster>) {
        self.clusters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_clusters(&mut self) -> &mut ::protobuf::RepeatedField<XlaAutoClusteringSummary_Cluster> {
        &mut self.clusters
    }

    // Take field
    pub fn take_clusters(&mut self) -> ::protobuf::RepeatedField<XlaAutoClusteringSummary_Cluster> {
        ::std::mem::replace(&mut self.clusters, ::protobuf::RepeatedField::new())
    }

    // repeated .tensorflow.XlaAutoClusteringSummary.OpAndCount unclustered_op_histogram = 4;


    pub fn get_unclustered_op_histogram(&self) -> &[XlaAutoClusteringSummary_OpAndCount] {
        &self.unclustered_op_histogram
    }
    pub fn clear_unclustered_op_histogram(&mut self) {
        self.unclustered_op_histogram.clear();
    }

    // Param is passed by value, moved
    pub fn set_unclustered_op_histogram(&mut self, v: ::protobuf::RepeatedField<XlaAutoClusteringSummary_OpAndCount>) {
        self.unclustered_op_histogram = v;
    }

    // Mutable pointer to the field.
    pub fn mut_unclustered_op_histogram(&mut self) -> &mut ::protobuf::RepeatedField<XlaAutoClusteringSummary_OpAndCount> {
        &mut self.unclustered_op_histogram
    }

    // Take field
    pub fn take_unclustered_op_histogram(&mut self) -> ::protobuf::RepeatedField<XlaAutoClusteringSummary_OpAndCount> {
        ::std::mem::replace(&mut self.unclustered_op_histogram, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for XlaAutoClusteringSummary {
    fn is_initialized(&self) -> bool {
        for v in &self.clusters {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.unclustered_op_histogram {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.unclustered_node_count = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.clustered_node_count = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.clusters)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.unclustered_op_histogram)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.unclustered_node_count != 0 {
            my_size += ::protobuf::rt::value_size(1, self.unclustered_node_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.clustered_node_count != 0 {
            my_size += ::protobuf::rt::value_size(2, self.clustered_node_count, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.clusters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.unclustered_op_histogram {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.unclustered_node_count != 0 {
            os.write_int32(1, self.unclustered_node_count)?;
        }
        if self.clustered_node_count != 0 {
            os.write_int32(2, self.clustered_node_count)?;
        }
        for v in &self.clusters {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.unclustered_op_histogram {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> XlaAutoClusteringSummary {
        XlaAutoClusteringSummary::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "unclustered_node_count",
                |m: &XlaAutoClusteringSummary| { &m.unclustered_node_count },
                |m: &mut XlaAutoClusteringSummary| { &mut m.unclustered_node_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "clustered_node_count",
                |m: &XlaAutoClusteringSummary| { &m.clustered_node_count },
                |m: &mut XlaAutoClusteringSummary| { &mut m.clustered_node_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<XlaAutoClusteringSummary_Cluster>>(
                "clusters",
                |m: &XlaAutoClusteringSummary| { &m.clusters },
                |m: &mut XlaAutoClusteringSummary| { &mut m.clusters },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<XlaAutoClusteringSummary_OpAndCount>>(
                "unclustered_op_histogram",
                |m: &XlaAutoClusteringSummary| { &m.unclustered_op_histogram },
                |m: &mut XlaAutoClusteringSummary| { &mut m.unclustered_op_histogram },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<XlaAutoClusteringSummary>(
                "XlaAutoClusteringSummary",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static XlaAutoClusteringSummary {
        static instance: ::protobuf::rt::LazyV2<XlaAutoClusteringSummary> = ::protobuf::rt::LazyV2::INIT;
        instance.get(XlaAutoClusteringSummary::new)
    }
}

impl ::protobuf::Clear for XlaAutoClusteringSummary {
    fn clear(&mut self) {
        self.unclustered_node_count = 0;
        self.clustered_node_count = 0;
        self.clusters.clear();
        self.unclustered_op_histogram.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for XlaAutoClusteringSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for XlaAutoClusteringSummary {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct XlaAutoClusteringSummary_OpAndCount {
    // message fields
    pub op: ::std::string::String,
    pub count: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a XlaAutoClusteringSummary_OpAndCount {
    fn default() -> &'a XlaAutoClusteringSummary_OpAndCount {
        <XlaAutoClusteringSummary_OpAndCount as ::protobuf::Message>::default_instance()
    }
}

impl XlaAutoClusteringSummary_OpAndCount {
    pub fn new() -> XlaAutoClusteringSummary_OpAndCount {
        ::std::default::Default::default()
    }

    // string op = 1;


    pub fn get_op(&self) -> &str {
        &self.op
    }
    pub fn clear_op(&mut self) {
        self.op.clear();
    }

    // Param is passed by value, moved
    pub fn set_op(&mut self, v: ::std::string::String) {
        self.op = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_op(&mut self) -> &mut ::std::string::String {
        &mut self.op
    }

    // Take field
    pub fn take_op(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.op, ::std::string::String::new())
    }

    // int32 count = 2;


    pub fn get_count(&self) -> i32 {
        self.count
    }
    pub fn clear_count(&mut self) {
        self.count = 0;
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: i32) {
        self.count = v;
    }
}

impl ::protobuf::Message for XlaAutoClusteringSummary_OpAndCount {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.op)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.count = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.op.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.op);
        }
        if self.count != 0 {
            my_size += ::protobuf::rt::value_size(2, self.count, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.op.is_empty() {
            os.write_string(1, &self.op)?;
        }
        if self.count != 0 {
            os.write_int32(2, self.count)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> XlaAutoClusteringSummary_OpAndCount {
        XlaAutoClusteringSummary_OpAndCount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "op",
                |m: &XlaAutoClusteringSummary_OpAndCount| { &m.op },
                |m: &mut XlaAutoClusteringSummary_OpAndCount| { &mut m.op },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "count",
                |m: &XlaAutoClusteringSummary_OpAndCount| { &m.count },
                |m: &mut XlaAutoClusteringSummary_OpAndCount| { &mut m.count },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<XlaAutoClusteringSummary_OpAndCount>(
                "XlaAutoClusteringSummary.OpAndCount",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static XlaAutoClusteringSummary_OpAndCount {
        static instance: ::protobuf::rt::LazyV2<XlaAutoClusteringSummary_OpAndCount> = ::protobuf::rt::LazyV2::INIT;
        instance.get(XlaAutoClusteringSummary_OpAndCount::new)
    }
}

impl ::protobuf::Clear for XlaAutoClusteringSummary_OpAndCount {
    fn clear(&mut self) {
        self.op.clear();
        self.count = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for XlaAutoClusteringSummary_OpAndCount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for XlaAutoClusteringSummary_OpAndCount {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct XlaAutoClusteringSummary_Cluster {
    // message fields
    pub name: ::std::string::String,
    pub size: i32,
    pub op_histogram: ::protobuf::RepeatedField<XlaAutoClusteringSummary_OpAndCount>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a XlaAutoClusteringSummary_Cluster {
    fn default() -> &'a XlaAutoClusteringSummary_Cluster {
        <XlaAutoClusteringSummary_Cluster as ::protobuf::Message>::default_instance()
    }
}

impl XlaAutoClusteringSummary_Cluster {
    pub fn new() -> XlaAutoClusteringSummary_Cluster {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // int32 size = 2;


    pub fn get_size(&self) -> i32 {
        self.size
    }
    pub fn clear_size(&mut self) {
        self.size = 0;
    }

    // Param is passed by value, moved
    pub fn set_size(&mut self, v: i32) {
        self.size = v;
    }

    // repeated .tensorflow.XlaAutoClusteringSummary.OpAndCount op_histogram = 3;


    pub fn get_op_histogram(&self) -> &[XlaAutoClusteringSummary_OpAndCount] {
        &self.op_histogram
    }
    pub fn clear_op_histogram(&mut self) {
        self.op_histogram.clear();
    }

    // Param is passed by value, moved
    pub fn set_op_histogram(&mut self, v: ::protobuf::RepeatedField<XlaAutoClusteringSummary_OpAndCount>) {
        self.op_histogram = v;
    }

    // Mutable pointer to the field.
    pub fn mut_op_histogram(&mut self) -> &mut ::protobuf::RepeatedField<XlaAutoClusteringSummary_OpAndCount> {
        &mut self.op_histogram
    }

    // Take field
    pub fn take_op_histogram(&mut self) -> ::protobuf::RepeatedField<XlaAutoClusteringSummary_OpAndCount> {
        ::std::mem::replace(&mut self.op_histogram, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for XlaAutoClusteringSummary_Cluster {
    fn is_initialized(&self) -> bool {
        for v in &self.op_histogram {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.size = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.op_histogram)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.size != 0 {
            my_size += ::protobuf::rt::value_size(2, self.size, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.op_histogram {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.size != 0 {
            os.write_int32(2, self.size)?;
        }
        for v in &self.op_histogram {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> XlaAutoClusteringSummary_Cluster {
        XlaAutoClusteringSummary_Cluster::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &XlaAutoClusteringSummary_Cluster| { &m.name },
                |m: &mut XlaAutoClusteringSummary_Cluster| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "size",
                |m: &XlaAutoClusteringSummary_Cluster| { &m.size },
                |m: &mut XlaAutoClusteringSummary_Cluster| { &mut m.size },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<XlaAutoClusteringSummary_OpAndCount>>(
                "op_histogram",
                |m: &XlaAutoClusteringSummary_Cluster| { &m.op_histogram },
                |m: &mut XlaAutoClusteringSummary_Cluster| { &mut m.op_histogram },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<XlaAutoClusteringSummary_Cluster>(
                "XlaAutoClusteringSummary.Cluster",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static XlaAutoClusteringSummary_Cluster {
        static instance: ::protobuf::rt::LazyV2<XlaAutoClusteringSummary_Cluster> = ::protobuf::rt::LazyV2::INIT;
        instance.get(XlaAutoClusteringSummary_Cluster::new)
    }
}

impl ::protobuf::Clear for XlaAutoClusteringSummary_Cluster {
    fn clear(&mut self) {
        self.name.clear();
        self.size = 0;
        self.op_histogram.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for XlaAutoClusteringSummary_Cluster {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for XlaAutoClusteringSummary_Cluster {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct XlaAutoClusteringActivity {
    // message fields
    pub global_jit_level: super::config::OptimizerOptions_GlobalJitLevel,
    pub cpu_global_jit_enabled: bool,
    pub summary: ::protobuf::SingularPtrField<XlaAutoClusteringSummary>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a XlaAutoClusteringActivity {
    fn default() -> &'a XlaAutoClusteringActivity {
        <XlaAutoClusteringActivity as ::protobuf::Message>::default_instance()
    }
}

impl XlaAutoClusteringActivity {
    pub fn new() -> XlaAutoClusteringActivity {
        ::std::default::Default::default()
    }

    // .tensorflow.OptimizerOptions.GlobalJitLevel global_jit_level = 1;


    pub fn get_global_jit_level(&self) -> super::config::OptimizerOptions_GlobalJitLevel {
        self.global_jit_level
    }
    pub fn clear_global_jit_level(&mut self) {
        self.global_jit_level = super::config::OptimizerOptions_GlobalJitLevel::DEFAULT;
    }

    // Param is passed by value, moved
    pub fn set_global_jit_level(&mut self, v: super::config::OptimizerOptions_GlobalJitLevel) {
        self.global_jit_level = v;
    }

    // bool cpu_global_jit_enabled = 2;


    pub fn get_cpu_global_jit_enabled(&self) -> bool {
        self.cpu_global_jit_enabled
    }
    pub fn clear_cpu_global_jit_enabled(&mut self) {
        self.cpu_global_jit_enabled = false;
    }

    // Param is passed by value, moved
    pub fn set_cpu_global_jit_enabled(&mut self, v: bool) {
        self.cpu_global_jit_enabled = v;
    }

    // .tensorflow.XlaAutoClusteringSummary summary = 3;


    pub fn get_summary(&self) -> &XlaAutoClusteringSummary {
        self.summary.as_ref().unwrap_or_else(|| <XlaAutoClusteringSummary as ::protobuf::Message>::default_instance())
    }
    pub fn clear_summary(&mut self) {
        self.summary.clear();
    }

    pub fn has_summary(&self) -> bool {
        self.summary.is_some()
    }

    // Param is passed by value, moved
    pub fn set_summary(&mut self, v: XlaAutoClusteringSummary) {
        self.summary = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_summary(&mut self) -> &mut XlaAutoClusteringSummary {
        if self.summary.is_none() {
            self.summary.set_default();
        }
        self.summary.as_mut().unwrap()
    }

    // Take field
    pub fn take_summary(&mut self) -> XlaAutoClusteringSummary {
        self.summary.take().unwrap_or_else(|| XlaAutoClusteringSummary::new())
    }
}

impl ::protobuf::Message for XlaAutoClusteringActivity {
    fn is_initialized(&self) -> bool {
        for v in &self.summary {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.global_jit_level, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.cpu_global_jit_enabled = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.summary)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.global_jit_level != super::config::OptimizerOptions_GlobalJitLevel::DEFAULT {
            my_size += ::protobuf::rt::enum_size(1, self.global_jit_level);
        }
        if self.cpu_global_jit_enabled != false {
            my_size += 2;
        }
        if let Some(ref v) = self.summary.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.global_jit_level != super::config::OptimizerOptions_GlobalJitLevel::DEFAULT {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.global_jit_level))?;
        }
        if self.cpu_global_jit_enabled != false {
            os.write_bool(2, self.cpu_global_jit_enabled)?;
        }
        if let Some(ref v) = self.summary.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> XlaAutoClusteringActivity {
        XlaAutoClusteringActivity::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::config::OptimizerOptions_GlobalJitLevel>>(
                "global_jit_level",
                |m: &XlaAutoClusteringActivity| { &m.global_jit_level },
                |m: &mut XlaAutoClusteringActivity| { &mut m.global_jit_level },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "cpu_global_jit_enabled",
                |m: &XlaAutoClusteringActivity| { &m.cpu_global_jit_enabled },
                |m: &mut XlaAutoClusteringActivity| { &mut m.cpu_global_jit_enabled },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<XlaAutoClusteringSummary>>(
                "summary",
                |m: &XlaAutoClusteringActivity| { &m.summary },
                |m: &mut XlaAutoClusteringActivity| { &mut m.summary },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<XlaAutoClusteringActivity>(
                "XlaAutoClusteringActivity",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static XlaAutoClusteringActivity {
        static instance: ::protobuf::rt::LazyV2<XlaAutoClusteringActivity> = ::protobuf::rt::LazyV2::INIT;
        instance.get(XlaAutoClusteringActivity::new)
    }
}

impl ::protobuf::Clear for XlaAutoClusteringActivity {
    fn clear(&mut self) {
        self.global_jit_level = super::config::OptimizerOptions_GlobalJitLevel::DEFAULT;
        self.cpu_global_jit_enabled = false;
        self.summary.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for XlaAutoClusteringActivity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for XlaAutoClusteringActivity {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct XlaJitCompilationActivity {
    // message fields
    pub cluster_name: ::std::string::String,
    pub compile_count: i32,
    pub compile_time_us: i64,
    pub cumulative_compile_time_us: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a XlaJitCompilationActivity {
    fn default() -> &'a XlaJitCompilationActivity {
        <XlaJitCompilationActivity as ::protobuf::Message>::default_instance()
    }
}

impl XlaJitCompilationActivity {
    pub fn new() -> XlaJitCompilationActivity {
        ::std::default::Default::default()
    }

    // string cluster_name = 1;


    pub fn get_cluster_name(&self) -> &str {
        &self.cluster_name
    }
    pub fn clear_cluster_name(&mut self) {
        self.cluster_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cluster_name(&mut self, v: ::std::string::String) {
        self.cluster_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cluster_name(&mut self) -> &mut ::std::string::String {
        &mut self.cluster_name
    }

    // Take field
    pub fn take_cluster_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cluster_name, ::std::string::String::new())
    }

    // int32 compile_count = 2;


    pub fn get_compile_count(&self) -> i32 {
        self.compile_count
    }
    pub fn clear_compile_count(&mut self) {
        self.compile_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_compile_count(&mut self, v: i32) {
        self.compile_count = v;
    }

    // int64 compile_time_us = 3;


    pub fn get_compile_time_us(&self) -> i64 {
        self.compile_time_us
    }
    pub fn clear_compile_time_us(&mut self) {
        self.compile_time_us = 0;
    }

    // Param is passed by value, moved
    pub fn set_compile_time_us(&mut self, v: i64) {
        self.compile_time_us = v;
    }

    // int64 cumulative_compile_time_us = 4;


    pub fn get_cumulative_compile_time_us(&self) -> i64 {
        self.cumulative_compile_time_us
    }
    pub fn clear_cumulative_compile_time_us(&mut self) {
        self.cumulative_compile_time_us = 0;
    }

    // Param is passed by value, moved
    pub fn set_cumulative_compile_time_us(&mut self, v: i64) {
        self.cumulative_compile_time_us = v;
    }
}

impl ::protobuf::Message for XlaJitCompilationActivity {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cluster_name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.compile_count = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.compile_time_us = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.cumulative_compile_time_us = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.cluster_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.cluster_name);
        }
        if self.compile_count != 0 {
            my_size += ::protobuf::rt::value_size(2, self.compile_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.compile_time_us != 0 {
            my_size += ::protobuf::rt::value_size(3, self.compile_time_us, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cumulative_compile_time_us != 0 {
            my_size += ::protobuf::rt::value_size(4, self.cumulative_compile_time_us, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.cluster_name.is_empty() {
            os.write_string(1, &self.cluster_name)?;
        }
        if self.compile_count != 0 {
            os.write_int32(2, self.compile_count)?;
        }
        if self.compile_time_us != 0 {
            os.write_int64(3, self.compile_time_us)?;
        }
        if self.cumulative_compile_time_us != 0 {
            os.write_int64(4, self.cumulative_compile_time_us)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> XlaJitCompilationActivity {
        XlaJitCompilationActivity::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cluster_name",
                |m: &XlaJitCompilationActivity| { &m.cluster_name },
                |m: &mut XlaJitCompilationActivity| { &mut m.cluster_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "compile_count",
                |m: &XlaJitCompilationActivity| { &m.compile_count },
                |m: &mut XlaJitCompilationActivity| { &mut m.compile_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "compile_time_us",
                |m: &XlaJitCompilationActivity| { &m.compile_time_us },
                |m: &mut XlaJitCompilationActivity| { &mut m.compile_time_us },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "cumulative_compile_time_us",
                |m: &XlaJitCompilationActivity| { &m.cumulative_compile_time_us },
                |m: &mut XlaJitCompilationActivity| { &mut m.cumulative_compile_time_us },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<XlaJitCompilationActivity>(
                "XlaJitCompilationActivity",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static XlaJitCompilationActivity {
        static instance: ::protobuf::rt::LazyV2<XlaJitCompilationActivity> = ::protobuf::rt::LazyV2::INIT;
        instance.get(XlaJitCompilationActivity::new)
    }
}

impl ::protobuf::Clear for XlaJitCompilationActivity {
    fn clear(&mut self) {
        self.cluster_name.clear();
        self.compile_count = 0;
        self.compile_time_us = 0;
        self.cumulative_compile_time_us = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for XlaJitCompilationActivity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for XlaJitCompilationActivity {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct XlaOptimizationRemark {
    // message fields
    pub warning: XlaOptimizationRemark_Warning,
    pub debug_information: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a XlaOptimizationRemark {
    fn default() -> &'a XlaOptimizationRemark {
        <XlaOptimizationRemark as ::protobuf::Message>::default_instance()
    }
}

impl XlaOptimizationRemark {
    pub fn new() -> XlaOptimizationRemark {
        ::std::default::Default::default()
    }

    // .tensorflow.XlaOptimizationRemark.Warning warning = 1;


    pub fn get_warning(&self) -> XlaOptimizationRemark_Warning {
        self.warning
    }
    pub fn clear_warning(&mut self) {
        self.warning = XlaOptimizationRemark_Warning::NONE;
    }

    // Param is passed by value, moved
    pub fn set_warning(&mut self, v: XlaOptimizationRemark_Warning) {
        self.warning = v;
    }

    // string debug_information = 2;


    pub fn get_debug_information(&self) -> &str {
        &self.debug_information
    }
    pub fn clear_debug_information(&mut self) {
        self.debug_information.clear();
    }

    // Param is passed by value, moved
    pub fn set_debug_information(&mut self, v: ::std::string::String) {
        self.debug_information = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_debug_information(&mut self) -> &mut ::std::string::String {
        &mut self.debug_information
    }

    // Take field
    pub fn take_debug_information(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.debug_information, ::std::string::String::new())
    }
}

impl ::protobuf::Message for XlaOptimizationRemark {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.warning, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.debug_information)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.warning != XlaOptimizationRemark_Warning::NONE {
            my_size += ::protobuf::rt::enum_size(1, self.warning);
        }
        if !self.debug_information.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.debug_information);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.warning != XlaOptimizationRemark_Warning::NONE {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.warning))?;
        }
        if !self.debug_information.is_empty() {
            os.write_string(2, &self.debug_information)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> XlaOptimizationRemark {
        XlaOptimizationRemark::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<XlaOptimizationRemark_Warning>>(
                "warning",
                |m: &XlaOptimizationRemark| { &m.warning },
                |m: &mut XlaOptimizationRemark| { &mut m.warning },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "debug_information",
                |m: &XlaOptimizationRemark| { &m.debug_information },
                |m: &mut XlaOptimizationRemark| { &mut m.debug_information },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<XlaOptimizationRemark>(
                "XlaOptimizationRemark",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static XlaOptimizationRemark {
        static instance: ::protobuf::rt::LazyV2<XlaOptimizationRemark> = ::protobuf::rt::LazyV2::INIT;
        instance.get(XlaOptimizationRemark::new)
    }
}

impl ::protobuf::Clear for XlaOptimizationRemark {
    fn clear(&mut self) {
        self.warning = XlaOptimizationRemark_Warning::NONE;
        self.debug_information.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for XlaOptimizationRemark {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for XlaOptimizationRemark {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum XlaOptimizationRemark_Warning {
    NONE = 0,
    INACCURATE_OPERATION = 1,
    SLOW_OPERATION = 2,
    UNIMPLEMENTED_OPERATION = 3,
    SLOW_IMAGE_RESIZE_DIMENSIONS = 4,
    MEGAMORPHIC_FUNCTION = 5,
}

impl ::protobuf::ProtobufEnum for XlaOptimizationRemark_Warning {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<XlaOptimizationRemark_Warning> {
        match value {
            0 => ::std::option::Option::Some(XlaOptimizationRemark_Warning::NONE),
            1 => ::std::option::Option::Some(XlaOptimizationRemark_Warning::INACCURATE_OPERATION),
            2 => ::std::option::Option::Some(XlaOptimizationRemark_Warning::SLOW_OPERATION),
            3 => ::std::option::Option::Some(XlaOptimizationRemark_Warning::UNIMPLEMENTED_OPERATION),
            4 => ::std::option::Option::Some(XlaOptimizationRemark_Warning::SLOW_IMAGE_RESIZE_DIMENSIONS),
            5 => ::std::option::Option::Some(XlaOptimizationRemark_Warning::MEGAMORPHIC_FUNCTION),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [XlaOptimizationRemark_Warning] = &[
            XlaOptimizationRemark_Warning::NONE,
            XlaOptimizationRemark_Warning::INACCURATE_OPERATION,
            XlaOptimizationRemark_Warning::SLOW_OPERATION,
            XlaOptimizationRemark_Warning::UNIMPLEMENTED_OPERATION,
            XlaOptimizationRemark_Warning::SLOW_IMAGE_RESIZE_DIMENSIONS,
            XlaOptimizationRemark_Warning::MEGAMORPHIC_FUNCTION,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<XlaOptimizationRemark_Warning>("XlaOptimizationRemark.Warning", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for XlaOptimizationRemark_Warning {
}

impl ::std::default::Default for XlaOptimizationRemark_Warning {
    fn default() -> Self {
        XlaOptimizationRemark_Warning::NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for XlaOptimizationRemark_Warning {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n*tensorflow/compiler/jit/xla_activity.proto\x12\ntensorflow\x1a%tensor\
    flow/core/protobuf/config.proto\"\xf3\x03\n\x18XlaAutoClusteringSummary\
    \x124\n\x16unclustered_node_count\x18\x01\x20\x01(\x05R\x14unclusteredNo\
    deCount\x120\n\x14clustered_node_count\x18\x02\x20\x01(\x05R\x12clustere\
    dNodeCount\x12H\n\x08clusters\x18\x03\x20\x03(\x0b2,.tensorflow.XlaAutoC\
    lusteringSummary.ClusterR\x08clusters\x12i\n\x18unclustered_op_histogram\
    \x18\x04\x20\x03(\x0b2/.tensorflow.XlaAutoClusteringSummary.OpAndCountR\
    \x16unclusteredOpHistogram\x1a2\n\nOpAndCount\x12\x0e\n\x02op\x18\x01\
    \x20\x01(\tR\x02op\x12\x14\n\x05count\x18\x02\x20\x01(\x05R\x05count\x1a\
    \x85\x01\n\x07Cluster\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\
    \x12\n\x04size\x18\x02\x20\x01(\x05R\x04size\x12R\n\x0cop_histogram\x18\
    \x03\x20\x03(\x0b2/.tensorflow.XlaAutoClusteringSummary.OpAndCountR\x0bo\
    pHistogram\"\xe7\x01\n\x19XlaAutoClusteringActivity\x12U\n\x10global_jit\
    _level\x18\x01\x20\x01(\x0e2+.tensorflow.OptimizerOptions.GlobalJitLevel\
    R\x0eglobalJitLevel\x123\n\x16cpu_global_jit_enabled\x18\x02\x20\x01(\
    \x08R\x13cpuGlobalJitEnabled\x12>\n\x07summary\x18\x03\x20\x01(\x0b2$.te\
    nsorflow.XlaAutoClusteringSummaryR\x07summary\"\xc8\x01\n\x19XlaJitCompi\
    lationActivity\x12!\n\x0ccluster_name\x18\x01\x20\x01(\tR\x0bclusterName\
    \x12#\n\rcompile_count\x18\x02\x20\x01(\x05R\x0ccompileCount\x12&\n\x0fc\
    ompile_time_us\x18\x03\x20\x01(\x03R\rcompileTimeUs\x12;\n\x1acumulative\
    _compile_time_us\x18\x04\x20\x01(\x03R\x17cumulativeCompileTimeUs\"\xa6\
    \x02\n\x15XlaOptimizationRemark\x12C\n\x07warning\x18\x01\x20\x01(\x0e2)\
    .tensorflow.XlaOptimizationRemark.WarningR\x07warning\x12+\n\x11debug_in\
    formation\x18\x02\x20\x01(\tR\x10debugInformation\"\x9a\x01\n\x07Warning\
    \x12\x08\n\x04NONE\x10\0\x12\x18\n\x14INACCURATE_OPERATION\x10\x01\x12\
    \x12\n\x0eSLOW_OPERATION\x10\x02\x12\x1b\n\x17UNIMPLEMENTED_OPERATION\
    \x10\x03\x12\x20\n\x1cSLOW_IMAGE_RESIZE_DIMENSIONS\x10\x04\x12\x18\n\x14\
    MEGAMORPHIC_FUNCTION\x10\x05b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
