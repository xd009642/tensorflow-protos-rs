// This file is generated by rust-protobuf 2.17.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tensorflow/core/profiler/profiler_service.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_17_0;

#[derive(PartialEq,Clone,Default)]
pub struct ProfileOptions {
    // message fields
    pub include_dataset_ops: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProfileOptions {
    fn default() -> &'a ProfileOptions {
        <ProfileOptions as ::protobuf::Message>::default_instance()
    }
}

impl ProfileOptions {
    pub fn new() -> ProfileOptions {
        ::std::default::Default::default()
    }

    // bool include_dataset_ops = 1;


    pub fn get_include_dataset_ops(&self) -> bool {
        self.include_dataset_ops
    }
    pub fn clear_include_dataset_ops(&mut self) {
        self.include_dataset_ops = false;
    }

    // Param is passed by value, moved
    pub fn set_include_dataset_ops(&mut self, v: bool) {
        self.include_dataset_ops = v;
    }
}

impl ::protobuf::Message for ProfileOptions {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.include_dataset_ops = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.include_dataset_ops != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.include_dataset_ops != false {
            os.write_bool(1, self.include_dataset_ops)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProfileOptions {
        ProfileOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "include_dataset_ops",
                |m: &ProfileOptions| { &m.include_dataset_ops },
                |m: &mut ProfileOptions| { &mut m.include_dataset_ops },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProfileOptions>(
                "ProfileOptions",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProfileOptions {
        static instance: ::protobuf::rt::LazyV2<ProfileOptions> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProfileOptions::new)
    }
}

impl ::protobuf::Clear for ProfileOptions {
    fn clear(&mut self) {
        self.include_dataset_ops = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProfileOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProfileOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ToolRequestOptions {
    // message fields
    pub output_formats: ::std::string::String,
    pub save_to_repo: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ToolRequestOptions {
    fn default() -> &'a ToolRequestOptions {
        <ToolRequestOptions as ::protobuf::Message>::default_instance()
    }
}

impl ToolRequestOptions {
    pub fn new() -> ToolRequestOptions {
        ::std::default::Default::default()
    }

    // string output_formats = 2;


    pub fn get_output_formats(&self) -> &str {
        &self.output_formats
    }
    pub fn clear_output_formats(&mut self) {
        self.output_formats.clear();
    }

    // Param is passed by value, moved
    pub fn set_output_formats(&mut self, v: ::std::string::String) {
        self.output_formats = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_output_formats(&mut self) -> &mut ::std::string::String {
        &mut self.output_formats
    }

    // Take field
    pub fn take_output_formats(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.output_formats, ::std::string::String::new())
    }

    // bool save_to_repo = 3;


    pub fn get_save_to_repo(&self) -> bool {
        self.save_to_repo
    }
    pub fn clear_save_to_repo(&mut self) {
        self.save_to_repo = false;
    }

    // Param is passed by value, moved
    pub fn set_save_to_repo(&mut self, v: bool) {
        self.save_to_repo = v;
    }
}

impl ::protobuf::Message for ToolRequestOptions {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.output_formats)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.save_to_repo = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.output_formats.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.output_formats);
        }
        if self.save_to_repo != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.output_formats.is_empty() {
            os.write_string(2, &self.output_formats)?;
        }
        if self.save_to_repo != false {
            os.write_bool(3, self.save_to_repo)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ToolRequestOptions {
        ToolRequestOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "output_formats",
                |m: &ToolRequestOptions| { &m.output_formats },
                |m: &mut ToolRequestOptions| { &mut m.output_formats },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "save_to_repo",
                |m: &ToolRequestOptions| { &m.save_to_repo },
                |m: &mut ToolRequestOptions| { &mut m.save_to_repo },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ToolRequestOptions>(
                "ToolRequestOptions",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ToolRequestOptions {
        static instance: ::protobuf::rt::LazyV2<ToolRequestOptions> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ToolRequestOptions::new)
    }
}

impl ::protobuf::Clear for ToolRequestOptions {
    fn clear(&mut self) {
        self.output_formats.clear();
        self.save_to_repo = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ToolRequestOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ToolRequestOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ProfileRequest {
    // message fields
    pub duration_ms: u64,
    pub max_events: u64,
    pub tools: ::protobuf::RepeatedField<::std::string::String>,
    pub tool_options: ::std::collections::HashMap<::std::string::String, ToolRequestOptions>,
    pub opts: ::protobuf::SingularPtrField<ProfileOptions>,
    pub repository_root: ::std::string::String,
    pub session_id: ::std::string::String,
    pub host_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProfileRequest {
    fn default() -> &'a ProfileRequest {
        <ProfileRequest as ::protobuf::Message>::default_instance()
    }
}

impl ProfileRequest {
    pub fn new() -> ProfileRequest {
        ::std::default::Default::default()
    }

    // uint64 duration_ms = 1;


    pub fn get_duration_ms(&self) -> u64 {
        self.duration_ms
    }
    pub fn clear_duration_ms(&mut self) {
        self.duration_ms = 0;
    }

    // Param is passed by value, moved
    pub fn set_duration_ms(&mut self, v: u64) {
        self.duration_ms = v;
    }

    // uint64 max_events = 2;


    pub fn get_max_events(&self) -> u64 {
        self.max_events
    }
    pub fn clear_max_events(&mut self) {
        self.max_events = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_events(&mut self, v: u64) {
        self.max_events = v;
    }

    // repeated string tools = 3;


    pub fn get_tools(&self) -> &[::std::string::String] {
        &self.tools
    }
    pub fn clear_tools(&mut self) {
        self.tools.clear();
    }

    // Param is passed by value, moved
    pub fn set_tools(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.tools = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tools(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.tools
    }

    // Take field
    pub fn take_tools(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.tools, ::protobuf::RepeatedField::new())
    }

    // repeated .tensorflow.ProfileRequest.ToolOptionsEntry tool_options = 8;


    pub fn get_tool_options(&self) -> &::std::collections::HashMap<::std::string::String, ToolRequestOptions> {
        &self.tool_options
    }
    pub fn clear_tool_options(&mut self) {
        self.tool_options.clear();
    }

    // Param is passed by value, moved
    pub fn set_tool_options(&mut self, v: ::std::collections::HashMap<::std::string::String, ToolRequestOptions>) {
        self.tool_options = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tool_options(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ToolRequestOptions> {
        &mut self.tool_options
    }

    // Take field
    pub fn take_tool_options(&mut self) -> ::std::collections::HashMap<::std::string::String, ToolRequestOptions> {
        ::std::mem::replace(&mut self.tool_options, ::std::collections::HashMap::new())
    }

    // .tensorflow.ProfileOptions opts = 4;


    pub fn get_opts(&self) -> &ProfileOptions {
        self.opts.as_ref().unwrap_or_else(|| <ProfileOptions as ::protobuf::Message>::default_instance())
    }
    pub fn clear_opts(&mut self) {
        self.opts.clear();
    }

    pub fn has_opts(&self) -> bool {
        self.opts.is_some()
    }

    // Param is passed by value, moved
    pub fn set_opts(&mut self, v: ProfileOptions) {
        self.opts = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_opts(&mut self) -> &mut ProfileOptions {
        if self.opts.is_none() {
            self.opts.set_default();
        }
        self.opts.as_mut().unwrap()
    }

    // Take field
    pub fn take_opts(&mut self) -> ProfileOptions {
        self.opts.take().unwrap_or_else(|| ProfileOptions::new())
    }

    // string repository_root = 5;


    pub fn get_repository_root(&self) -> &str {
        &self.repository_root
    }
    pub fn clear_repository_root(&mut self) {
        self.repository_root.clear();
    }

    // Param is passed by value, moved
    pub fn set_repository_root(&mut self, v: ::std::string::String) {
        self.repository_root = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_repository_root(&mut self) -> &mut ::std::string::String {
        &mut self.repository_root
    }

    // Take field
    pub fn take_repository_root(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.repository_root, ::std::string::String::new())
    }

    // string session_id = 6;


    pub fn get_session_id(&self) -> &str {
        &self.session_id
    }
    pub fn clear_session_id(&mut self) {
        self.session_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: ::std::string::String) {
        self.session_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_session_id(&mut self) -> &mut ::std::string::String {
        &mut self.session_id
    }

    // Take field
    pub fn take_session_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.session_id, ::std::string::String::new())
    }

    // string host_name = 7;


    pub fn get_host_name(&self) -> &str {
        &self.host_name
    }
    pub fn clear_host_name(&mut self) {
        self.host_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_host_name(&mut self, v: ::std::string::String) {
        self.host_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_host_name(&mut self) -> &mut ::std::string::String {
        &mut self.host_name
    }

    // Take field
    pub fn take_host_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.host_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ProfileRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.opts {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.duration_ms = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.max_events = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.tools)?;
                },
                8 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<ToolRequestOptions>>(wire_type, is, &mut self.tool_options)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.opts)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.repository_root)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.session_id)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.host_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.duration_ms != 0 {
            my_size += ::protobuf::rt::value_size(1, self.duration_ms, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.max_events != 0 {
            my_size += ::protobuf::rt::value_size(2, self.max_events, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.tools {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<ToolRequestOptions>>(8, &self.tool_options);
        if let Some(ref v) = self.opts.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.repository_root.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.repository_root);
        }
        if !self.session_id.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.session_id);
        }
        if !self.host_name.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.host_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.duration_ms != 0 {
            os.write_uint64(1, self.duration_ms)?;
        }
        if self.max_events != 0 {
            os.write_uint64(2, self.max_events)?;
        }
        for v in &self.tools {
            os.write_string(3, &v)?;
        };
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<ToolRequestOptions>>(8, &self.tool_options, os)?;
        if let Some(ref v) = self.opts.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.repository_root.is_empty() {
            os.write_string(5, &self.repository_root)?;
        }
        if !self.session_id.is_empty() {
            os.write_string(6, &self.session_id)?;
        }
        if !self.host_name.is_empty() {
            os.write_string(7, &self.host_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProfileRequest {
        ProfileRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "duration_ms",
                |m: &ProfileRequest| { &m.duration_ms },
                |m: &mut ProfileRequest| { &mut m.duration_ms },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "max_events",
                |m: &ProfileRequest| { &m.max_events },
                |m: &mut ProfileRequest| { &mut m.max_events },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tools",
                |m: &ProfileRequest| { &m.tools },
                |m: &mut ProfileRequest| { &mut m.tools },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<ToolRequestOptions>>(
                "tool_options",
                |m: &ProfileRequest| { &m.tool_options },
                |m: &mut ProfileRequest| { &mut m.tool_options },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ProfileOptions>>(
                "opts",
                |m: &ProfileRequest| { &m.opts },
                |m: &mut ProfileRequest| { &mut m.opts },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "repository_root",
                |m: &ProfileRequest| { &m.repository_root },
                |m: &mut ProfileRequest| { &mut m.repository_root },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "session_id",
                |m: &ProfileRequest| { &m.session_id },
                |m: &mut ProfileRequest| { &mut m.session_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "host_name",
                |m: &ProfileRequest| { &m.host_name },
                |m: &mut ProfileRequest| { &mut m.host_name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProfileRequest>(
                "ProfileRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProfileRequest {
        static instance: ::protobuf::rt::LazyV2<ProfileRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProfileRequest::new)
    }
}

impl ::protobuf::Clear for ProfileRequest {
    fn clear(&mut self) {
        self.duration_ms = 0;
        self.max_events = 0;
        self.tools.clear();
        self.tool_options.clear();
        self.opts.clear();
        self.repository_root.clear();
        self.session_id.clear();
        self.host_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProfileRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProfileRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ProfileToolData {
    // message fields
    pub name: ::std::string::String,
    pub data: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProfileToolData {
    fn default() -> &'a ProfileToolData {
        <ProfileToolData as ::protobuf::Message>::default_instance()
    }
}

impl ProfileToolData {
    pub fn new() -> ProfileToolData {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // bytes data = 2;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ProfileToolData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(2, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProfileToolData {
        ProfileToolData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &ProfileToolData| { &m.name },
                |m: &mut ProfileToolData| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &ProfileToolData| { &m.data },
                |m: &mut ProfileToolData| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProfileToolData>(
                "ProfileToolData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProfileToolData {
        static instance: ::protobuf::rt::LazyV2<ProfileToolData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProfileToolData::new)
    }
}

impl ::protobuf::Clear for ProfileToolData {
    fn clear(&mut self) {
        self.name.clear();
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProfileToolData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProfileToolData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ProfileResponse {
    // message fields
    pub computation_graph: ::protobuf::RepeatedField<super::graph::GraphDef>,
    pub hlo_metadata: ::protobuf::SingularPtrField<super::config::RunMetadata>,
    pub encoded_trace: ::std::vec::Vec<u8>,
    pub op_profile: ::protobuf::SingularPtrField<super::op_profile::Profile>,
    pub tool_data: ::protobuf::RepeatedField<ProfileToolData>,
    pub empty_trace: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProfileResponse {
    fn default() -> &'a ProfileResponse {
        <ProfileResponse as ::protobuf::Message>::default_instance()
    }
}

impl ProfileResponse {
    pub fn new() -> ProfileResponse {
        ::std::default::Default::default()
    }

    // repeated .tensorflow.GraphDef computation_graph = 2;


    pub fn get_computation_graph(&self) -> &[super::graph::GraphDef] {
        &self.computation_graph
    }
    pub fn clear_computation_graph(&mut self) {
        self.computation_graph.clear();
    }

    // Param is passed by value, moved
    pub fn set_computation_graph(&mut self, v: ::protobuf::RepeatedField<super::graph::GraphDef>) {
        self.computation_graph = v;
    }

    // Mutable pointer to the field.
    pub fn mut_computation_graph(&mut self) -> &mut ::protobuf::RepeatedField<super::graph::GraphDef> {
        &mut self.computation_graph
    }

    // Take field
    pub fn take_computation_graph(&mut self) -> ::protobuf::RepeatedField<super::graph::GraphDef> {
        ::std::mem::replace(&mut self.computation_graph, ::protobuf::RepeatedField::new())
    }

    // .tensorflow.RunMetadata hlo_metadata = 5;


    pub fn get_hlo_metadata(&self) -> &super::config::RunMetadata {
        self.hlo_metadata.as_ref().unwrap_or_else(|| <super::config::RunMetadata as ::protobuf::Message>::default_instance())
    }
    pub fn clear_hlo_metadata(&mut self) {
        self.hlo_metadata.clear();
    }

    pub fn has_hlo_metadata(&self) -> bool {
        self.hlo_metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hlo_metadata(&mut self, v: super::config::RunMetadata) {
        self.hlo_metadata = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hlo_metadata(&mut self) -> &mut super::config::RunMetadata {
        if self.hlo_metadata.is_none() {
            self.hlo_metadata.set_default();
        }
        self.hlo_metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_hlo_metadata(&mut self) -> super::config::RunMetadata {
        self.hlo_metadata.take().unwrap_or_else(|| super::config::RunMetadata::new())
    }

    // bytes encoded_trace = 3;


    pub fn get_encoded_trace(&self) -> &[u8] {
        &self.encoded_trace
    }
    pub fn clear_encoded_trace(&mut self) {
        self.encoded_trace.clear();
    }

    // Param is passed by value, moved
    pub fn set_encoded_trace(&mut self, v: ::std::vec::Vec<u8>) {
        self.encoded_trace = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encoded_trace(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.encoded_trace
    }

    // Take field
    pub fn take_encoded_trace(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.encoded_trace, ::std::vec::Vec::new())
    }

    // .tensorflow.profiler.op_profile.Profile op_profile = 4;


    pub fn get_op_profile(&self) -> &super::op_profile::Profile {
        self.op_profile.as_ref().unwrap_or_else(|| <super::op_profile::Profile as ::protobuf::Message>::default_instance())
    }
    pub fn clear_op_profile(&mut self) {
        self.op_profile.clear();
    }

    pub fn has_op_profile(&self) -> bool {
        self.op_profile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_op_profile(&mut self, v: super::op_profile::Profile) {
        self.op_profile = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_op_profile(&mut self) -> &mut super::op_profile::Profile {
        if self.op_profile.is_none() {
            self.op_profile.set_default();
        }
        self.op_profile.as_mut().unwrap()
    }

    // Take field
    pub fn take_op_profile(&mut self) -> super::op_profile::Profile {
        self.op_profile.take().unwrap_or_else(|| super::op_profile::Profile::new())
    }

    // repeated .tensorflow.ProfileToolData tool_data = 6;


    pub fn get_tool_data(&self) -> &[ProfileToolData] {
        &self.tool_data
    }
    pub fn clear_tool_data(&mut self) {
        self.tool_data.clear();
    }

    // Param is passed by value, moved
    pub fn set_tool_data(&mut self, v: ::protobuf::RepeatedField<ProfileToolData>) {
        self.tool_data = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tool_data(&mut self) -> &mut ::protobuf::RepeatedField<ProfileToolData> {
        &mut self.tool_data
    }

    // Take field
    pub fn take_tool_data(&mut self) -> ::protobuf::RepeatedField<ProfileToolData> {
        ::std::mem::replace(&mut self.tool_data, ::protobuf::RepeatedField::new())
    }

    // bool empty_trace = 7;


    pub fn get_empty_trace(&self) -> bool {
        self.empty_trace
    }
    pub fn clear_empty_trace(&mut self) {
        self.empty_trace = false;
    }

    // Param is passed by value, moved
    pub fn set_empty_trace(&mut self, v: bool) {
        self.empty_trace = v;
    }
}

impl ::protobuf::Message for ProfileResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.computation_graph {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.hlo_metadata {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.op_profile {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tool_data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.computation_graph)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.hlo_metadata)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.encoded_trace)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.op_profile)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tool_data)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.empty_trace = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.computation_graph {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.hlo_metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.encoded_trace.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.encoded_trace);
        }
        if let Some(ref v) = self.op_profile.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.tool_data {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.empty_trace != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.computation_graph {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.hlo_metadata.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.encoded_trace.is_empty() {
            os.write_bytes(3, &self.encoded_trace)?;
        }
        if let Some(ref v) = self.op_profile.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.tool_data {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.empty_trace != false {
            os.write_bool(7, self.empty_trace)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProfileResponse {
        ProfileResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::graph::GraphDef>>(
                "computation_graph",
                |m: &ProfileResponse| { &m.computation_graph },
                |m: &mut ProfileResponse| { &mut m.computation_graph },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::config::RunMetadata>>(
                "hlo_metadata",
                |m: &ProfileResponse| { &m.hlo_metadata },
                |m: &mut ProfileResponse| { &mut m.hlo_metadata },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "encoded_trace",
                |m: &ProfileResponse| { &m.encoded_trace },
                |m: &mut ProfileResponse| { &mut m.encoded_trace },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::op_profile::Profile>>(
                "op_profile",
                |m: &ProfileResponse| { &m.op_profile },
                |m: &mut ProfileResponse| { &mut m.op_profile },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ProfileToolData>>(
                "tool_data",
                |m: &ProfileResponse| { &m.tool_data },
                |m: &mut ProfileResponse| { &mut m.tool_data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "empty_trace",
                |m: &ProfileResponse| { &m.empty_trace },
                |m: &mut ProfileResponse| { &mut m.empty_trace },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProfileResponse>(
                "ProfileResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProfileResponse {
        static instance: ::protobuf::rt::LazyV2<ProfileResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProfileResponse::new)
    }
}

impl ::protobuf::Clear for ProfileResponse {
    fn clear(&mut self) {
        self.computation_graph.clear();
        self.hlo_metadata.clear();
        self.encoded_trace.clear();
        self.op_profile.clear();
        self.tool_data.clear();
        self.empty_trace = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProfileResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProfileResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MonitorRequest {
    // message fields
    pub duration_ms: u64,
    pub monitoring_level: i32,
    pub timestamp: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MonitorRequest {
    fn default() -> &'a MonitorRequest {
        <MonitorRequest as ::protobuf::Message>::default_instance()
    }
}

impl MonitorRequest {
    pub fn new() -> MonitorRequest {
        ::std::default::Default::default()
    }

    // uint64 duration_ms = 1;


    pub fn get_duration_ms(&self) -> u64 {
        self.duration_ms
    }
    pub fn clear_duration_ms(&mut self) {
        self.duration_ms = 0;
    }

    // Param is passed by value, moved
    pub fn set_duration_ms(&mut self, v: u64) {
        self.duration_ms = v;
    }

    // int32 monitoring_level = 2;


    pub fn get_monitoring_level(&self) -> i32 {
        self.monitoring_level
    }
    pub fn clear_monitoring_level(&mut self) {
        self.monitoring_level = 0;
    }

    // Param is passed by value, moved
    pub fn set_monitoring_level(&mut self, v: i32) {
        self.monitoring_level = v;
    }

    // bool timestamp = 3;


    pub fn get_timestamp(&self) -> bool {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = false;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: bool) {
        self.timestamp = v;
    }
}

impl ::protobuf::Message for MonitorRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.duration_ms = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.monitoring_level = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.duration_ms != 0 {
            my_size += ::protobuf::rt::value_size(1, self.duration_ms, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.monitoring_level != 0 {
            my_size += ::protobuf::rt::value_size(2, self.monitoring_level, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.timestamp != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.duration_ms != 0 {
            os.write_uint64(1, self.duration_ms)?;
        }
        if self.monitoring_level != 0 {
            os.write_int32(2, self.monitoring_level)?;
        }
        if self.timestamp != false {
            os.write_bool(3, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MonitorRequest {
        MonitorRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "duration_ms",
                |m: &MonitorRequest| { &m.duration_ms },
                |m: &mut MonitorRequest| { &mut m.duration_ms },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "monitoring_level",
                |m: &MonitorRequest| { &m.monitoring_level },
                |m: &mut MonitorRequest| { &mut m.monitoring_level },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "timestamp",
                |m: &MonitorRequest| { &m.timestamp },
                |m: &mut MonitorRequest| { &mut m.timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MonitorRequest>(
                "MonitorRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MonitorRequest {
        static instance: ::protobuf::rt::LazyV2<MonitorRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MonitorRequest::new)
    }
}

impl ::protobuf::Clear for MonitorRequest {
    fn clear(&mut self) {
        self.duration_ms = 0;
        self.monitoring_level = 0;
        self.timestamp = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MonitorRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MonitorRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MonitorResponse {
    // message fields
    pub data: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MonitorResponse {
    fn default() -> &'a MonitorResponse {
        <MonitorResponse as ::protobuf::Message>::default_instance()
    }
}

impl MonitorResponse {
    pub fn new() -> MonitorResponse {
        ::std::default::Default::default()
    }

    // string data = 1;


    pub fn get_data(&self) -> &str {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::string::String) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::string::String {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.data, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MonitorResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.data.is_empty() {
            os.write_string(1, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MonitorResponse {
        MonitorResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "data",
                |m: &MonitorResponse| { &m.data },
                |m: &mut MonitorResponse| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MonitorResponse>(
                "MonitorResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MonitorResponse {
        static instance: ::protobuf::rt::LazyV2<MonitorResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MonitorResponse::new)
    }
}

impl ::protobuf::Clear for MonitorResponse {
    fn clear(&mut self) {
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MonitorResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MonitorResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n/tensorflow/core/profiler/profiler_service.proto\x12\ntensorflow\x1a%t\
    ensorflow/core/framework/graph.proto\x1a)tensorflow/core/profiler/op_pro\
    file.proto\x1a%tensorflow/core/protobuf/config.proto\"@\n\x0eProfileOpti\
    ons\x12.\n\x13include_dataset_ops\x18\x01\x20\x01(\x08R\x11includeDatase\
    tOps\"]\n\x12ToolRequestOptions\x12%\n\x0eoutput_formats\x18\x02\x20\x01\
    (\tR\routputFormats\x12\x20\n\x0csave_to_repo\x18\x03\x20\x01(\x08R\nsav\
    eToRepo\"\xab\x03\n\x0eProfileRequest\x12\x1f\n\x0bduration_ms\x18\x01\
    \x20\x01(\x04R\ndurationMs\x12\x1d\n\nmax_events\x18\x02\x20\x01(\x04R\t\
    maxEvents\x12\x14\n\x05tools\x18\x03\x20\x03(\tR\x05tools\x12N\n\x0ctool\
    _options\x18\x08\x20\x03(\x0b2+.tensorflow.ProfileRequest.ToolOptionsEnt\
    ryR\x0btoolOptions\x12.\n\x04opts\x18\x04\x20\x01(\x0b2\x1a.tensorflow.P\
    rofileOptionsR\x04opts\x12'\n\x0frepository_root\x18\x05\x20\x01(\tR\x0e\
    repositoryRoot\x12\x1d\n\nsession_id\x18\x06\x20\x01(\tR\tsessionId\x12\
    \x1b\n\thost_name\x18\x07\x20\x01(\tR\x08hostName\x1a^\n\x10ToolOptionsE\
    ntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x124\n\x05value\x18\x02\
    \x20\x01(\x0b2\x1e.tensorflow.ToolRequestOptionsR\x05value:\x028\x01\"9\
    \n\x0fProfileToolData\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\
    \x12\n\x04data\x18\x02\x20\x01(\x0cR\x04data\"\xde\x02\n\x0fProfileRespo\
    nse\x12A\n\x11computation_graph\x18\x02\x20\x03(\x0b2\x14.tensorflow.Gra\
    phDefR\x10computationGraph\x12:\n\x0chlo_metadata\x18\x05\x20\x01(\x0b2\
    \x17.tensorflow.RunMetadataR\x0bhloMetadata\x12#\n\rencoded_trace\x18\
    \x03\x20\x01(\x0cR\x0cencodedTrace\x12F\n\nop_profile\x18\x04\x20\x01(\
    \x0b2'.tensorflow.profiler.op_profile.ProfileR\topProfile\x128\n\ttool_d\
    ata\x18\x06\x20\x03(\x0b2\x1b.tensorflow.ProfileToolDataR\x08toolData\
    \x12\x1f\n\x0bempty_trace\x18\x07\x20\x01(\x08R\nemptyTraceJ\x04\x08\x01\
    \x10\x02\"z\n\x0eMonitorRequest\x12\x1f\n\x0bduration_ms\x18\x01\x20\x01\
    (\x04R\ndurationMs\x12)\n\x10monitoring_level\x18\x02\x20\x01(\x05R\x0fm\
    onitoringLevel\x12\x1c\n\ttimestamp\x18\x03\x20\x01(\x08R\ttimestamp\"%\
    \n\x0fMonitorResponse\x12\x12\n\x04data\x18\x01\x20\x01(\tR\x04data2\x9d\
    \x01\n\x0fProfilerService\x12D\n\x07Profile\x12\x1a.tensorflow.ProfileRe\
    quest\x1a\x1b.tensorflow.ProfileResponse\"\0\x12D\n\x07Monitor\x12\x1a.t\
    ensorflow.MonitorRequest\x1a\x1b.tensorflow.MonitorResponse\"\0b\x06prot\
    o3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
